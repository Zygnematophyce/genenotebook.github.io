[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "imports/.external-ecmascript.js",
    "static": true,
    "longname": "imports/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "imports/api/api.js",
    "content": "import './publications.js';\n\n//Import these methods here so they can be used with the Meteor.call('methodName') syntax.\n//This is crucial to be able to call them with the asteroid ddp connection in the data-loading scripts\nimport './transcriptomes/add_transcriptome.js';\nimport './transcriptomes/updateSampleInfo.js';\n\nimport './genomes/add_reference.js';\nimport './genomes/add_gff.js';\nimport './genomes/updateTrackPermissions.js';\n\nimport './genes/interproscan.js';\nimport './genes/add_interproscan.js';\nimport './genes/add_orthogroup_trees.js';\nimport './genes/download_genes.js';\nimport './genes/scan_attributes.js';\n\nimport './blast/makeblastdb.js';\nimport './blast/hasblastdb.js';\nimport './blast/removeblastdb.js';\nimport './blast/submitblastjob.js';\nimport './users/users.js';\n\nimport './methods/methods.js';\n//import './methods/blast.js';\nimport './methods/list.js';\n\n//import the following so that jobs can start running\nimport './jobqueue/process-interproscan.js';\nimport './jobqueue/process-makeBlastDb.js';\nimport './jobqueue/process-blast.js';\nimport './jobqueue/process-download.js';",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/api.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "imports/api/blast/hasblastdb.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { Roles } from 'meteor/alanning:roles';\n\nimport SimpleSchema from 'simpl-schema';\nimport { existsSync } from 'fs';\n\n/**\n * hasBlastDb validated method: checks whether blast databases exist for a given annotation track\n * @param  {String} options.trackName Name of the annotation track\n * @return {Bool}                     jobqueue\n */\nexport const hasBlastDb = new ValidatedMethod({\n  name: 'hasBlastDb',\n  validate: new SimpleSchema({\n    trackName: { type: String }\n  }).validator(),\n  applyOptions: {\n    noRetry: true\n  },\n  run({ trackName}){\n    if (! this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n    if (! Roles.userIsInRole(this.userId,'curator')){\n      throw new Meteor.Error('not-authorized');\n    }\n\n    const cleanedTrackName = trackName.replace(/ |\\./g,'_')\n\n    const filenames = [\n      `${cleanedTrackName}.nucl.nhr`,\n      `${cleanedTrackName}.prot.phr`\n    ]\n\n    console.log(filenames)\n\n    if (!this.isSimulation){\n      console.log(filenames)\n      console.log(filenames.every(existsSync))\n      return filenames.every(existsSync)\n    }\n  }\n})\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/blast/hasblastdb.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "hasBlastDb",
    "memberof": "imports/api/blast/hasblastdb.js",
    "static": true,
    "longname": "imports/api/blast/hasblastdb.js~hasBlastDb",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/blast/hasblastdb.js",
    "importStyle": "{hasBlastDb}",
    "description": "hasBlastDb validated method: checks whether blast databases exist for a given annotation track",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.trackName",
        "description": "Name of the annotation track"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bool"
      ],
      "spread": false,
      "description": "jobqueue"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "imports/api/blast/makeblastdb.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { Roles } from 'meteor/alanning:roles';\n\nimport SimpleSchema from 'simpl-schema';\nimport hash from 'object-hash';\n\nimport jobQueue from '/imports/api/jobqueue/jobqueue.js';\nimport { Job } from 'meteor/vsivsi:job-collection'\n\nimport { Genes } from '/imports/api/genes/gene_collection.js';\n\n/**\n * makeBlastDb validated method: submits makeblastdb job to jobqueue, call this from the client\n * @param  {String} options.trackName Name of the annotation track\n * @param  {String} options.dbType    Either nucl or prot\n * @return {String}                   jobId of the makeblastdb job\n */\nexport const makeBlastDb = new ValidatedMethod({\n  name: 'makeBlastDb',\n  validate: new SimpleSchema({\n    trackName: { type: String }\n  }).validator(),\n  applyOptions: {\n    noRetry: true\n  },\n  run({ trackName, dbType }){\n    if (! this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n    if (! Roles.userIsInRole(this.userId,'curator')){\n      throw new Meteor.Error('not-authorized');\n    }\n\n    if (!this.isSimulation){\n      const jobId = new Job(jobQueue, 'makeBlastDb', {\n        trackName: trackName,\n        user: this.userId\n      }).priority('normal').save()\n\n      return jobId\n    }\n  }\n})\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/blast/makeblastdb.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "makeBlastDb",
    "memberof": "imports/api/blast/makeblastdb.js",
    "static": true,
    "longname": "imports/api/blast/makeblastdb.js~makeBlastDb",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/blast/makeblastdb.js",
    "importStyle": "{makeBlastDb}",
    "description": "makeBlastDb validated method: submits makeblastdb job to jobqueue, call this from the client",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.trackName",
        "description": "Name of the annotation track"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.dbType",
        "description": "Either nucl or prot"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "jobId of the makeblastdb job"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "file",
    "name": "imports/api/blast/removeblastdb.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { Roles } from 'meteor/alanning:roles';\n\nimport SimpleSchema from 'simpl-schema';\n\nimport { Tracks } from '/imports/api/genomes/track_collection.js';\n\n/**\n * hasBlastDb validated method: checks whether blast databases exist for a given annotation track\n * @param  {String} options.trackName Name of the annotation track\n * @return {Bool}                     jobqueue\n */\nexport const removeBlastDb = new ValidatedMethod({\n  name: 'removeBlastDb',\n  validate: new SimpleSchema({\n    trackName: { type: String }\n  }).validator(),\n  applyOptions: {\n    noRetry: true\n  },\n  run({ trackName}){\n    if (! this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n    if (! Roles.userIsInRole(this.userId,'admin')){\n      throw new Meteor.Error('not-authorized');\n    }\n\n    console.log(`remove ${trackName}`)\n\n    if (!this.isSimulation){\n      const track = Tracks.findOne({trackName: trackName})\n      console.log(track)\n      Tracks.update({\n        trackName: trackName\n      },{\n        $unset: {\n          'blastdbs': 1\n        }\n      })\n    }\n  }\n})\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/blast/removeblastdb.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "removeBlastDb",
    "memberof": "imports/api/blast/removeblastdb.js",
    "static": true,
    "longname": "imports/api/blast/removeblastdb.js~removeBlastDb",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/blast/removeblastdb.js",
    "importStyle": "{removeBlastDb}",
    "description": "hasBlastDb validated method: checks whether blast databases exist for a given annotation track",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.trackName",
        "description": "Name of the annotation track"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bool"
      ],
      "spread": false,
      "description": "jobqueue"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "imports/api/blast/submitblastjob.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { Roles } from 'meteor/alanning:roles';\n\nimport SimpleSchema from 'simpl-schema';\n\nimport jobQueue from '/imports/api/jobqueue/jobqueue.js';\nimport { Job } from 'meteor/vsivsi:job-collection';\n\n/**\n * submitBlastJob validated method: submits makeblastdb job to jobqueue, call this from the client\n * @param  {String} options.trackName Name of the annotation track\n * @param  {String} options.dbType    Either nucl or prot\n * @return {String}                   jobId of the makeblastdb job\n */\nexport const submitBlastJob = new ValidatedMethod({\n  name: 'submitBlastJob',\n  validate: new SimpleSchema({\n    blastType: { type: String },\n    input: { type: String },\n    trackNames: { type: Array },\n    'trackNames.$': { type: String }\n  }).validator(),\n  applyOptions: {\n    noRetry: true\n  },\n  run({ blastType, input, trackNames }){\n    if (! this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n    if (! Roles.userIsInRole(this.userId,'user')){\n      throw new Meteor.Error('not-authorized');\n    }\n\n    console.log('submit blast job')\n    \n    const jobId = new Job(jobQueue, 'blast', {\n      blastType: blastType,\n      input: input,\n      trackNames: trackNames,\n      user: Meteor.userId()\n    }).priority('normal').save()\n\n    console.log(jobId)\n\n    return jobId\n  \n  }\n})\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/blast/submitblastjob.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "submitBlastJob",
    "memberof": "imports/api/blast/submitblastjob.js",
    "static": true,
    "longname": "imports/api/blast/submitblastjob.js~submitBlastJob",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/blast/submitblastjob.js",
    "importStyle": "{submitBlastJob}",
    "description": "submitBlastJob validated method: submits makeblastdb job to jobqueue, call this from the client",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.trackName",
        "description": "Name of the annotation track"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.dbType",
        "description": "Either nucl or prot"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "jobId of the makeblastdb job"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "imports/api/downloads/download_collection.js",
    "content": "import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\n//DESIGN SCHEMA\n\nconst Downloads = new Mongo.Collection('downloads');\n\nconst DownloadSchema = new SimpleSchema({\n  query: {\n    type: Object,\n    blackbox: true\n  },\n  queryHash: {\n    type: String\n  },\n  counts: {\n    type: Number\n  },\n  accessed: {\n    type: Date\n  }\n})\n\nexport { Downloads };",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/downloads/download_collection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "DownloadSchema",
    "memberof": "imports/api/downloads/download_collection.js",
    "static": true,
    "longname": "imports/api/downloads/download_collection.js~DownloadSchema",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/downloads/download_collection.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "Downloads",
    "memberof": "imports/api/downloads/download_collection.js",
    "static": true,
    "longname": "imports/api/downloads/download_collection.js~Downloads",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/downloads/download_collection.js",
    "importStyle": "{Downloads}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "imports/api/genes/add_interproscan.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\n\nimport SimpleSchema from 'simpl-schema';\nimport Papa from 'papaparse';\nimport fs from 'fs';\n\nimport { Genes } from '/imports/api/genes/gene_collection.js';\nimport { formatGffAttributes } from '/imports/api/util/util.js';\n\n\nconst debugFormatAttributes = attributeString => {\n  arr = attributeString.split(';');\n  console.log(arr)\n  const attributes = arr.reduce((attr, stringPart) => {\n    const [key, value] = stringPart.split('=')\n    console.log(key,value)\n    const values = value.split('\"').join('').split(',').map(decodeURIComponent)\n    console.log(values)\n    attr[key] = values\n    return attr\n  }, {})\n  console.log(attributes)\n  return attributes\n}\n\nexport const addInterproscan = new ValidatedMethod({\n  name: 'addInterproscan',\n  validate: new SimpleSchema({\n    fileName: { type: String },\n    trackName: { type: String }\n  }).validator(),\n  applyOptions: {\n    noRetry: true\n  },\n  run({ fileName, trackName }){\n    console.log('addInterproscan', trackName, fileName)\n\n    let lineNumber = 0;\n\n    const fileHandle = fs.readFileSync(fileName, { encoding:'binary' });\n\n    const interproIds = new Set();\n\n    Papa.parse(fileHandle, {\n      delimiter: '\\t',\n      dynamicTyping: true,\n      skipEmptyLines: true,\n      //comments: '#',\n      error(error,file) {\n        console.log(error)\n      },\n      step(line, parser){\n        lineNumber += 1;\n        if (lineNumber % 100 === 0){\n          console.log(`Processed ${lineNumber} lines`)\n        }\n        const data = line.data[0];\n        if (data[0][0] === '#'){\n          if (/fasta/i.test(data[0])){\n            console.log('Encountered fasta section, stopped parsing')\n            parser.abort()\n          }\n        } else {\n          const [\n            seqId,\n            source,\n            type,\n            start,\n            end,\n            score,\n            strand,\n            phase,\n            attributeString\n          ] = data;\n\n          if (type === 'protein_match'){\n            if (typeof attributeString !== 'undefined'){\n              let attributes;\n              try {\n                attributes = formatGffAttributes(attributeString);\n              } catch(error) {\n                console.log(`Error line ${lineNumber}`)\n                console.log(data.join('\\t'))\n                console.log(attributeString)\n                console.log(debugFormatAttributes(attributeString))\n                throw error\n              }\n\n              const name = attributes['Name'][0];\n              const proteinDomain = {\n                start,\n                end,\n                source,\n                score,\n                name\n              }\n              const dbxref = attributes['Dbxref'];\n              if (typeof dbxref !== 'undefined'){\n                proteinDomain['dbxref'] = dbxref;\n                let hasInterpro = false;\n                dbxref.forEach(crossref => {\n                  const [db, id] = crossref.split(':')\n                  if (/InterPro/.test(db)){\n                    hasInterpro = true\n                    proteinDomain['interpro'] = id;\n                    interproIds.add(id)\n                  }\n                })\n                if (!hasInterpro) {\n                  proteinDomain['interpro'] = 'Unintegrated signature';\n                }\n              } else {\n                proteinDomain['interpro'] = 'Unintegrated signature';\n              }\n\n              if (typeof attributes['signature_desc'] !== 'undefined'){\n                proteinDomain['signature_desc'] = attributes['signature_desc'][0];\n              }\n              Genes.update({\n                'subfeatures.ID': seqId\n              },{ \n                $addToSet: { \n                  'subfeatures.$.protein_domains': proteinDomain\n                }\n              })\n            } else {\n              console.log('Undefined attributes:')\n              console.log(data.join('\\t'))\n            }\n          }\n        }\n\n      },\n      complete(results,file) {\n        console.log('Finished')\n        //console.log(interproIds)\n      }\n    })\n  }\n})",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/genes/add_interproscan.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "debugFormatAttributes",
    "memberof": "imports/api/genes/add_interproscan.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/api/genes/add_interproscan.js~debugFormatAttributes",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/genes/add_interproscan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "attributeString",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "addInterproscan",
    "memberof": "imports/api/genes/add_interproscan.js",
    "static": true,
    "longname": "imports/api/genes/add_interproscan.js~addInterproscan",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genes/add_interproscan.js",
    "importStyle": "{addInterproscan}",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "imports/api/genes/add_orthogroup_trees.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\n\nimport SimpleSchema from 'simpl-schema';\nimport Papa from 'papaparse';\nimport glob from 'glob';\n\nimport { Orthogroups } from '/imports/api/genes/orthogroup_collection.js';\nimport { Genes } from '/imports/api/genes/gene_collection.js';\nimport { parseNewick } from '/imports/api/util/util.js';\nimport fs from 'fs';\n\nexport const addOrthogroupTrees = new ValidatedMethod({\n  name: 'addOrthogroupTrees',\n  validate: new SimpleSchema({\n    folder: { type: String }\n  }).validator(),\n  applyOptions: {\n    noRetry: true\n  },\n  run({ folder }){\n    console.log('addOrthogroupTrees', folder)\n    const geneBulkOp = Genes.rawCollection().initializeUnorderedBulkOp();\n    const orthoBulkOp = Orthogroups.rawCollection().initializeUnorderedBulkOp();\n    glob(`${folder}/*`, (err, fileNames) => {\n      fileNames.forEach(fileName => {\n        //console.log(fileName)\n        const orthogroupId = fileName.split('/').pop().split('_')[0];\n        \n        const data = fs.readFileSync(fileName, 'utf8')//, (err, data) => {\n          const tree = parseNewick(data);\n          orthoBulkOp.insert({\n            ID: orthogroupId,\n            size: tree.size,\n            tree: tree.tree,\n            genes: tree.geneIds\n          })\n          geneBulkOp.find({ID: {$in: tree.geneIds}}).update({$set: {orthogroup: orthogroupId}})\n          //console.log(orthogroupId, tree.size, tree.geneIds);\n        //});\n      })\n    console.log('geneBulkOp execute')\n    const geneBulkOpResults = geneBulkOp.execute();\n    console.log(geneBulkOpResults)\n    \n    console.log('orthoBulkOp execute')\n    const orthoBulkOpResults = orthoBulkOp.execute();\n    console.log(orthoBulkOpResults)\n    })\n\n\n  }\n})",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/genes/add_orthogroup_trees.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "addOrthogroupTrees",
    "memberof": "imports/api/genes/add_orthogroup_trees.js",
    "static": true,
    "longname": "imports/api/genes/add_orthogroup_trees.js~addOrthogroupTrees",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genes/add_orthogroup_trees.js",
    "importStyle": "{addOrthogroupTrees}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "imports/api/genes/attribute_collection.js",
    "content": "import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\n//DESIGN SCHEMA\n\nconst Attributes = new Mongo.Collection('attributes');\n\nexport { Attributes };",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/genes/attribute_collection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "Attributes",
    "memberof": "imports/api/genes/attribute_collection.js",
    "static": true,
    "longname": "imports/api/genes/attribute_collection.js~Attributes",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genes/attribute_collection.js",
    "importStyle": "{Attributes}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "imports/api/genes/download_collection.js",
    "content": "import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\n//DESIGN SCHEMA\n\nconst Downloads = new Mongo.Collection('downloads');\n\nexport { Downloads }",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/genes/download_collection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "Downloads",
    "memberof": "imports/api/genes/download_collection.js",
    "static": true,
    "longname": "imports/api/genes/download_collection.js~Downloads",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genes/download_collection.js",
    "importStyle": "{Downloads}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "imports/api/genes/download_genes.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\n\nimport SimpleSchema from 'simpl-schema';\nimport hash from 'object-hash';\n//import Future from 'fibers/future';\n\nimport jobQueue from '/imports/api/jobqueue/jobqueue.js';\nimport { Job } from 'meteor/vsivsi:job-collection';\n\nimport { Genes } from '/imports/api/genes/gene_collection.js';\nimport { Downloads } from '/imports/api/downloads/download_collection.js';\n\nexport const downloadGenes = new ValidatedMethod({\n  name: 'downloadGenes',\n  validate: new SimpleSchema({\n    query: { \n      type: Object,\n      blackbox: true \n    },\n    dataType: { type: String }\n  }).validator(),\n  applyOptions: {\n    noRetry: true\n  },\n  run({ query, dataType }){\n    /**\n     * If the query has not been used before, create a file from it. \n     * Otherwise use the cached file and increment the download count.\n     * Return md5 hash of download query as download url\n     */\n    console.log(`downloading ${dataType}`)\n    console.log(query);\n    \n    const queryString = JSON.stringify(query);\n\n    const queryHash = hash(`${queryString}${dataType}`);\n\n\n    console.log(queryHash)\n    if (! this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n    const existingJob = jobQueue.findOne({ 'data.queryHash': queryHash });\n\n    if (typeof existingJob === 'undefined'){\n      console.log('initiating new download job')\n      const job = new Job(jobQueue, 'download', {\n        queryString: queryString,\n        queryHash: queryHash,\n        dataType: dataType\n      });\n      job.priority('high').save();\n    }\n\n    return queryHash\n  }\n})",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/genes/download_genes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "downloadGenes",
    "memberof": "imports/api/genes/download_genes.js",
    "static": true,
    "longname": "imports/api/genes/download_genes.js~downloadGenes",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genes/download_genes.js",
    "importStyle": "{downloadGenes}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "imports/api/genes/edithistory_collection.js",
    "content": "import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\n//DESIGN SCHEMA\n\nconst EditHistory = new Mongo.Collection('editHistory');\n\nexport { EditHistory };",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/genes/edithistory_collection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "EditHistory",
    "memberof": "imports/api/genes/edithistory_collection.js",
    "static": true,
    "longname": "imports/api/genes/edithistory_collection.js~EditHistory",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genes/edithistory_collection.js",
    "importStyle": "{EditHistory}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "imports/api/genes/gene_collection.js",
    "content": "import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst Genes = new Mongo.Collection('genes');\n\n//create a base schema so we can add it at multiple places\nconst IntervalBaseSchema = new SimpleSchema({\n  ID: {\n    type: String,\n    unique: true,\n    index: true,\n    //denyUpdate: true,\n    label: 'Unique gene ID'\n  },\n  type: {\n    type: String,\n    allowedValues: ['gene','mRNA','CDS','exon','three_prime_UTR','five_prime_UTR'],\n    label: 'Interval type'\n  },\n  seq: {\n    type: String,\n    label: 'Reference sequence of this feature'\n  },\n  start: {\n    type: Number,\n    label: 'Start coordinate'\n  },\n  end: {\n    type: Number,\n    label: 'End coordinate'\n  },\n  score: {\n    type: String,\n    label: 'Score',\n    custom: function(){\n      if (!this.isSet){\n        return 'required'\n      }\n      if (this.value === '.'){\n        return true\n      } else {\n        let parsedValue = parseFloat(this.value);\n        if (isNaN(parsedValue)){\n          return 'scoreError'\n        } else {\n          return true\n        }\n      }\n    }\n  },\n  attributes: {\n    type: Object,\n    blackbox: true,\n    index: true,\n    label: 'Any attributes'\n  },\n  children: {\n    type: Array,//[String],\n    optional: true,\n    label: 'Child subfeatures'\n  },\n  'children.$': {\n    type: String\n  }\n});\n\n\n//Define subfeature schema first so we can then add it to the gene schema\nconst SubfeatureSchema = new SimpleSchema({\n  phase: {\n    type: SimpleSchema.oneOf(Number,String),\n    allowedValues: [0,1,2,'.'],\n    label: 'phase'\n  },\n  type: {\n    type: String,\n    allowedValues: ['CDS','exon','mRNA','five_prime_UTR','three_prime_UTR'],\n    label: 'Subfeature types'\n  },\n  parents: {\n    type: Array,//[String],\n    label: 'Parent subfeatures'\n  },\n  'parents.$': {\n    type: String\n  },\n  protein_domains: {\n    type: Array,\n    label: 'Interproscan protein domains',\n    optional: true\n  },\n  'protein_domains.$': {\n    type: Object,\n    label: 'Interproscan protein domain',\n    blackbox: true\n  }\n});\n\n//extend the subfeature schema with base subfeatures\nSubfeatureSchema.extend(IntervalBaseSchema);\n\nconst GeneSchema = new SimpleSchema({\n  type: {\n    type: String,\n    allowedValues: ['gene'],\n    label: 'Gene type'\n  },\n  editing: {\n    type: String,\n    optional: true\n  },\n  viewing: {\n    type: Array,//[String],\n    optional: true\n  },\n  'viewing.$': {\n    type: String\n  },\n  changed: {\n    type: Boolean,\n    optional: true\n  },\n  expression: {\n    type: Array,//[Object],\n    optional: true,\n    label: 'Transcriptome counts and TPM'\n  },\n  'expression.$': {\n    type: Object,\n    blackbox: true\n  },\n  subfeatures: {\n    type: Array,//[SubfeatureSchema],\n    //blackbox: true,\n    optional: true,\n    label: 'Array of subfeatures'\n  },\n  'subfeatures.$': {\n    type: Object,\n    blackbox: true\n  },\n  reference: { \n    type: String,\n    //denyUpdate: true,\n    label: 'Reference genome'\n  },\n  seqid: {\n    type: String,\n    //denyUpdate: true,\n    label: 'ID of the sequence on which the gene is, e.g. chr1'\n  },\n  source: {\n    type: String,\n    label: 'Source of the annotation'\n  },\n  type: {\n    type: String,\n    allowedValues: ['gene'],\n    label: 'Type of the top level annotation (currently only \"gene\" is allowed)'\n  },\n  strand: {\n    type: String,\n    allowedValues: ['+', '-'],\n    label: 'Strand'\n  },\n  track: {\n    type: String,\n    label: 'Track name'\n  },\n  permissions: {\n    type: Array,//[String],\n    label: 'Permission level'\n  },\n  'permissions.$': {\n    type: String\n  }\n});\n\n//extend the gene schema with base features\nGeneSchema.extend(IntervalBaseSchema);\n\nGenes.attachSchema(GeneSchema);\n\nexport { Genes, GeneSchema, SubfeatureSchema };",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/genes/gene_collection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "name": "IntervalBaseSchema",
    "memberof": "imports/api/genes/gene_collection.js",
    "static": true,
    "longname": "imports/api/genes/gene_collection.js~IntervalBaseSchema",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/genes/gene_collection.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "Genes",
    "memberof": "imports/api/genes/gene_collection.js",
    "static": true,
    "longname": "imports/api/genes/gene_collection.js~Genes",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genes/gene_collection.js",
    "importStyle": "{Genes}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "GeneSchema",
    "memberof": "imports/api/genes/gene_collection.js",
    "static": true,
    "longname": "imports/api/genes/gene_collection.js~GeneSchema",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genes/gene_collection.js",
    "importStyle": "{GeneSchema}",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "SubfeatureSchema",
    "memberof": "imports/api/genes/gene_collection.js",
    "static": true,
    "longname": "imports/api/genes/gene_collection.js~SubfeatureSchema",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genes/gene_collection.js",
    "importStyle": "{SubfeatureSchema}",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "imports/api/genes/interpro_collection.js",
    "content": "import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\n//DESIGN SCHEMA\n\nconst Interpro = new Mongo.Collection('interpro');\n\nexport { Interpro }",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/genes/interpro_collection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "Interpro",
    "memberof": "imports/api/genes/interpro_collection.js",
    "static": true,
    "longname": "imports/api/genes/interpro_collection.js~Interpro",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genes/interpro_collection.js",
    "importStyle": "{Interpro}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "imports/api/genes/interproscan.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { Roles } from 'meteor/alanning:roles';\n\nimport request from 'request';\nimport Future from 'fibers/future';\n\nimport { getGeneSequences } from '/imports/api/util/util.js';\n\nimport { Genes } from '/imports/api/genes/gene_collection.js'; \n/**\n * Reverse complement a DNA string\n * @param  {String} seq [String representing DNA constisting of alphabet AaCcGgTtNn]\n * @return {String}     [String representing DNA constisting of alphabet AaCcGgTtNn, reverse complement of input]\n */\nconst revcomp = (seq) => {\n  const comp = {  \n    'A':'T','a':'t',\n    'T':'A','t':'a',\n    'C':'G','c':'g',\n    'G':'C','g':'c',\n    'N':'N','n':'n'\n  }\n  const revSeqArray = seq.split('').reverse()\n  const revCompSeqArray = revSeqArray.map( (nuc) => {\n    return comp[nuc]\n  })\n  const revCompSeq = revCompSeqArray.join('')\n  return revCompSeq\n}\n\n/**\n * Convert a DNA string into a amino acid string\n * @param  {String} seq String representing DNA constisting of alphabet ACGTN\n * @return {String}     [tring representing the amino acid complement of input string\n */\nconst translate = (seq) => {\n  const trans = {\n    'ACC': 'T', 'ACA': 'T', 'ACG': 'T',\n    'AGG': 'R', 'AGC': 'S', 'GTA': 'V',\n    'AGA': 'R', 'ACT': 'T', 'GTG': 'V',\n    'AGT': 'S', 'CCA': 'P', 'CCC': 'P',\n    'GGT': 'G', 'CGA': 'R', 'CGC': 'R',\n    'TAT': 'Y', 'CGG': 'R', 'CCT': 'P',\n    'GGG': 'G', 'GGA': 'G', 'GGC': 'G',\n    'TAA': '*', 'TAC': 'Y', 'CGT': 'R',\n    'TAG': '*', 'ATA': 'I', 'CTT': 'L',\n    'ATG': 'M', 'CTG': 'L', 'ATT': 'I',\n    'CTA': 'L', 'TTT': 'F', 'GAA': 'E',\n    'TTG': 'L', 'TTA': 'L', 'TTC': 'F',\n    'GTC': 'V', 'AAG': 'K', 'AAA': 'K',\n    'AAC': 'N', 'ATC': 'I', 'CAT': 'H',\n    'AAT': 'N', 'GTT': 'V', 'CAC': 'H',\n    'CAA': 'Q', 'CAG': 'Q', 'CCG': 'P',\n    'TCT': 'S', 'TGC': 'C', 'TGA': '*',\n    'TGG': 'W', 'TCG': 'S', 'TCC': 'S',\n    'TCA': 'S', 'GAG': 'E', 'GAC': 'D',\n    'TGT': 'C', 'GCA': 'A', 'GCC': 'A',\n    'GCG': 'A', 'GCT': 'A', 'CTC': 'L',\n    'GAT': 'D'}\n  const codonArray = seq.match(/.{1,3}/g)\n  const pepArray = codonArray.map( (codon) => {\n    let aminoAcid = 'X'\n    if (codon.indexOf('N') < 0){\n      aminoAcid = trans[codon]\n    }\n    return aminoAcid\n  })\n  const pep = pepArray.join('')\n  return pep\n}\n\nconst makeFasta = (gene) => {\n  let transcripts = gene.subfeatures.filter( (subfeature) => { return subfeature.type === 'mRNA' })\n  let sequences = transcripts.map( (transcript) => {\n    let transcriptSeq = `>${transcript.ID}\\n`;\n    let transcriptPep = `>${transcript.ID}\\n`;\n    let cdsArray = gene.subfeatures.filter( (sub) => { \n      return sub.parents.indexOf(transcript.ID) >= 0 && sub.type === 'CDS'\n    }).sort( (a,b) => {\n      return a.start - b.start\n    })\n\n    let refStart = 10e99;\n    //let referenceSubscription = Meteor.subscribe('references',gene.seqid)\n    \n    //find all reference fragments overlapping the mRNA feature\n    let referenceArray = References.find({ \n      header: gene.seqid, \n      $and: [ \n        { start: {$lte: gene.end} }, \n        { end: {$gte: gene.start} }\n      ] \n    }).fetch()\n\n    if (referenceArray.length){\n      let reference = referenceArray.sort( (a,b) => {\n        //sort on start coordinate\n        return a.start - b.start\n      }).map( (ref) => {\n        //find starting position of first reference fragment\n        refStart = Math.min(refStart,ref.start)\n        return ref.seq\n      }).join('')\n\n      seq = cdsArray.map( (cds, index) => {\n        let start = cds.start - refStart - 1;\n        let end = cds.end - refStart;\n        return reference.slice(start,end)\n      }).join('')\n\n      let phase;\n      if (this.strand === '-'){\n        seq = revcomp(seq)\n        phase = cdsArray[cdsArray.length -1].phase\n      } else {\n        phase = cdsArray[0].phase\n      }\n   \n      if ([1,2].indexOf(phase) >= 0){\n        seq = seq.slice(phase)\n      }\n\n      let pep = translate(seq.toUpperCase());\n\n      transcriptSeq += seq;\n      \n      transcriptPep += pep;\n      transcriptPep = transcriptPep.split('*').join('X')\n    }\n    return {ID:transcript.ID, seq: transcriptSeq, pep: transcriptPep}\n  })\n  return sequences\n}\n\nfunction submitInterpro(sequenceId,peptide){\n  const submitJob = new Future();\n\n  request.post({\n    url: 'http://www.ebi.ac.uk/Tools/services/rest/iprscan5/run/',\n    form: {\n      email: 'rens.holmer@gmail.com',\n      title: `genebook protein ${sequenceId}`,\n      sequence: peptide\n    }\n  }, (error, response, jobId) => {\n    console.log('error:', error); // Print the error if one occurred \n    console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received \n    console.log('requestId:', jobId);\n    submitJob.return(jobId)\n  })\n\n  const jobId = submitJob.wait()\n\n  return jobId\n}\n\nfunction pollInterpro(jobId,cb){\n  const statusRequest = new Future();\n  const url = `http://www.ebi.ac.uk/Tools/services/rest/iprscan5/status/${jobId}`;\n  console.log(`Trying ${url}`)\n  request.get(url, (error,response,body) => {\n    console.log(error)\n    console.log(body)\n    statusRequest.return(body)\n  })\n  const status = statusRequest.wait()\n  if (status === 'RUNNING'){\n    //figure out a way to call the function with a parameter\n    Meteor.setTimeout(function(){return pollInterpro(jobId,cb)}, 100000)\n  } else {\n    cb(status)\n  }\n}\n\nfunction getInterproResults(jobId){\n  const future = new Future();\n  const url = `http://www.ebi.ac.uk/Tools/services/rest/iprscan5/result/${jobId}/json`\n  console.log(`Trying ${url}`)\n  request.get(url, (error,response,body) => {\n    let interproAnnotation = JSON.parse(body)\n    future.return(interproAnnotation)\n  })\n  const results = future.wait()\n  return results\n}\n\nMeteor.methods({\n  interproscan(geneId){\n    if (! this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n    if (! Roles.userIsInRole(this.userId,'admin')){\n      throw new Meteor.Error('not-authorized');\n    }\n\n    //this.unblock();\n    const gene = Genes.findOne({ID: geneId})\n    const sequences = getGeneSequences(gene)\n    const results = sequences.map((sequence) => { \n\n      // interproscan does not like stop codons, just replace all with X\n      let pep = sequence.pep.split('*').join('X')\n\n      const jobId = submitInterpro(sequence.ID, pep);\n\n      const fut = new Future();\n      pollInterpro(jobId, (status) => {\n        console.log(`pollInterpro: ${status}`)\n        fut.return(status)\n      })\n\n      const finished = fut.wait();\n      \n      let results;\n\n      if (finished === 'FINISHED'){\n        results = getInterproResults(jobId)\n        console.log(results)\n        Genes.update({'subfeatures.ID':sequence.ID},{$set:{interproscan:results[0].matches}})\n      } \n\n      return results\n    })\n    \n\n    return results\n  }\n})",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/genes/interproscan.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "revcomp",
    "memberof": "imports/api/genes/interproscan.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/api/genes/interproscan.js~revcomp",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/genes/interproscan.js",
    "importStyle": null,
    "description": "Reverse complement a DNA string",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "seq",
        "description": "[String representing DNA constisting of alphabet AaCcGgTtNn]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "[String representing DNA constisting of alphabet AaCcGgTtNn, reverse complement of input]"
    },
    "ignore": true
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "translate",
    "memberof": "imports/api/genes/interproscan.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/api/genes/interproscan.js~translate",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/genes/interproscan.js",
    "importStyle": null,
    "description": "Convert a DNA string into a amino acid string",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "seq",
        "description": "String representing DNA constisting of alphabet ACGTN"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "[tring representing the amino acid complement of input string"
    },
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "makeFasta",
    "memberof": "imports/api/genes/interproscan.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/api/genes/interproscan.js~makeFasta",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/genes/interproscan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "gene",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "submitInterpro",
    "memberof": "imports/api/genes/interproscan.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/api/genes/interproscan.js~submitInterpro",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/genes/interproscan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "params": [
      {
        "name": "sequenceId",
        "types": [
          "*"
        ]
      },
      {
        "name": "peptide",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "pollInterpro",
    "memberof": "imports/api/genes/interproscan.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/api/genes/interproscan.js~pollInterpro",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/genes/interproscan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "params": [
      {
        "name": "jobId",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "getInterproResults",
    "memberof": "imports/api/genes/interproscan.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/api/genes/interproscan.js~getInterproResults",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/genes/interproscan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "params": [
      {
        "name": "jobId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "imports/api/genes/orthogroup_collection.js",
    "content": "import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\n//DESIGN SCHEMA\n\nconst Orthogroups = new Mongo.Collection('orthogroups');\n\nexport { Orthogroups }",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/genes/orthogroup_collection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "Orthogroups",
    "memberof": "imports/api/genes/orthogroup_collection.js",
    "static": true,
    "longname": "imports/api/genes/orthogroup_collection.js~Orthogroups",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genes/orthogroup_collection.js",
    "importStyle": "{Orthogroups}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "imports/api/genes/scan_attributes.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\n\nimport SimpleSchema from 'simpl-schema';\n//import Future from 'fibers/future';\n\nimport { Genes } from '/imports/api/genes/gene_collection.js';\nimport { Attributes } from '/imports/api/genes/attribute_collection.js';\nimport { Tracks } from '/imports/api/genomes/track_collection.js';\n\n/**\n * Map function for mongodb mapreduce\n */\nconst mapFunction = function(){\n\tprintjson('map function');\n\t//Use 'var' instead of 'let'! This will be executed in mongodb, which does not know 'const/let'\n\tvar gene = this;\n\tif (typeof gene.attributes !== 'undefined'){\n\t\temit(null, { attributeKeys: Object.keys(gene.attributes) })\n\t}\n}\n\n/**\n * Reduce function for mongodb mapreduce\n * @param  {String} _key    [description]\n * @param  {Array\t} values [description]\n * @return {Object}        [description]\n */\nconst reduceFunction = function(_key, values){\n\tprintjson('reduce function')\n\t//Use 'var' instead of 'let'! This will be executed in mongodb, which does not know 'const/let'\n\tconst attributeKeySet = new Set()\n\tvalues.forEach(value => {\n\t\tvalue.attributeKeys.forEach(attributeKey => {\n\t\t\tattributeKeySet.add(attributeKey)\n\t\t})\n\t})\n\t//Use 'var' instead of 'let'! This will be executed in mongodb, which does not know 'const/let'\n\tconst attributeKeys = Array.from(attributeKeySet)\n\treturn { attributeKeys: attributeKeys }\n}\n\nexport const scanGeneAttributes = new ValidatedMethod({\n\tname: 'scanGeneAttributes',\n\tvalidate: new SimpleSchema({\n\t\ttrackName: { type: String }\n\t}).validator(),\n\tapplyOptions: {\n\t\tnoRetry: true\n\t},\n\trun({ trackName }){\n\t\tconsole.log(`scanGeneAttributes: ${trackName}`)\n\t\tif (! this.userId) {\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tif (! Roles.userIsInRole(this.userId,'curator')){\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\n\t\tconst track = Tracks.findOne({trackName: trackName})\n\n\t\t//check if the track exists\n\t\tif (typeof track === 'undefined'){\n\t\t\tthrow new Meteor.Error(`Unknown track: ${trackName}`)\n\t\t}\n\n\t\t//check that it is running on the server\n\t\tif ( !this.isSimulation ){\n\t\t\tthis.unblock();\n\t\t\tconst mapReduceOptions = { \n\t\t\t\t\tout: { inline: 1 },\n\t\t\t\t\tquery: { track: trackName }\n\t\t\t\t}\n\t\t\t//mapreduce to find all keys for all genes, this takes a while\n\t\t\tconsole.log('mapreducing')\n\t\t\tconst attributeScan = Genes.rawCollection()\n\t\t\t\t.mapReduce(mapFunction, reduceFunction, mapReduceOptions)\n\t\t\t\t.then(results => {\n\t\t\t\t\tconsole.log('mapreduce finished')\n\t\t\t\t\tresults.forEach( result => {\n\t\t\t\t\t\tconst attributeKeys = result.value.attributeKeys;\n\t\t\t\t\t\tattributeKeys.forEach(attributeKey => {\n\t\t\t\t\t\t\tAttributes.update({ \n\t\t\t\t\t\t\t\tname: attributeKey \n\t\t\t\t\t\t\t},{\n\t\t\t\t\t\t\t\t$addToSet: {\n\t\t\t\t\t\t\t\t\ttracks: trackName,\n\t\t\t\t\t\t\t\t\treferences: track.reference\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t$setOnInsert: { \n\t\t\t\t\t\t\t\t\tname: attributeKey,\n\t\t\t\t\t\t\t\t\tquery: `attributes.${attributeKey}`,\n\t\t\t\t\t\t\t\t\tshow: true, \n\t\t\t\t\t\t\t\t\tcanEdit: false, \n\t\t\t\t\t\t\t\t\treserved: false \n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},{\n\t\t\t\t\t\t\t\tupsert: true\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tconsole.log(err)\n\t\t\t\t\tthrow new Meteor.Error(err)\n\t\t\t\t})\n\t\t\treturn true\n\t\t}\n\t}\n})\n\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/genes/scan_attributes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "mapFunction",
    "memberof": "imports/api/genes/scan_attributes.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/api/genes/scan_attributes.js~mapFunction",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/genes/scan_attributes.js",
    "importStyle": null,
    "description": "Map function for mongodb mapreduce",
    "lineNumber": 14,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "reduceFunction",
    "memberof": "imports/api/genes/scan_attributes.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/api/genes/scan_attributes.js~reduceFunction",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/genes/scan_attributes.js",
    "importStyle": null,
    "description": "Reduce function for mongodb mapreduce",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "_key",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "Array\t"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "[description]"
    },
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "scanGeneAttributes",
    "memberof": "imports/api/genes/scan_attributes.js",
    "static": true,
    "longname": "imports/api/genes/scan_attributes.js~scanGeneAttributes",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genes/scan_attributes.js",
    "importStyle": "{scanGeneAttributes}",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "imports/api/genomes/add_gff.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\n\nimport SimpleSchema from 'simpl-schema';\nimport assert from 'assert';\nimport Papa from 'papaparse';\nimport fs from 'fs';\nimport { findIndex, isEqual, isEmpty, mapValues } from 'lodash';\nimport querystring from 'querystring';\n\nimport { Genes, GeneSchema, SubfeatureSchema } from '/imports/api/genes/gene_collection.js';\nimport { References, ReferenceInfo } from '/imports/api/genomes/reference_collection.js';\nimport { Tracks } from '/imports/api/genomes/track_collection.js';\n\nimport { scanGeneAttributes } from '/imports/api/genes/scan_attributes.js';\nimport { formatGffAttributes } from '/imports/api/util/util.js';\n\n/**\n * Override the default querystring unescape function to be able to parse commas correctly in gff attributes\n * @param  {String}\n * @return {String}\n */\nquerystring.unescape = uri => uri;\n\n/**\n * Interval Class containing a single genomic interval. Every line in a gff3 file is an interval\n * @type {Interval}\n */\nconst Interval = class Interval{\n\tconstructor({ line, trackName, referenceName , referenceSequences }){\n\t\tassert.equal(line.length,9)\n\t\tconst [\n\t\t\tseqid,\n\t\t\tsource,\n\t\t\ttype,\n\t\t\tstart,\n\t\t\tend,\n\t\t\tscore,\n\t\t\tstrand,\n\t\t\tphase,\n\t\t\tattributes\n\t\t] = line\n\t\t\n\t\tthis.type = type;\n\t\tthis.start = start;\n\t\tthis.end = end;\n\t\tthis.score = String(score);\n\t\tthis.attributes = formatGffAttributes(attributes);\n\n\t\tthis.ID = this.attributes.ID[0];\n\t\tdelete this.attributes.ID;\n\n\t\tif (this.attributes.Parent !== undefined){\n\t\t\tthis.parents = this.attributes.Parent;\n\t\t\tdelete this.attributes.Parent;\n\t\t}\n\t\n\t\tthis.seq = referenceSequences[seqid].slice(start - 1, end)\n\t\tif (this.type === 'gene'){\n\t\t\t\tthis.seqid = seqid;\n\t\t\t\tthis.source = source;\n\t\t\t\tthis.strand = strand;\n\t\t\t\tthis.reference = referenceName;\n\t\t\t\tthis.track = trackName;\n\t\t\tGeneSchema.validate(this)\n\t\t} else {\n\t\t\tthis.phase = phase\n\t\t\tSubfeatureSchema.validate(this)\n\t\t}\n\t}\n}\n\n/**\n * Genemodel Class containing all intervals for a single gene.\n * @type {GeneModel}\n */\nconst GeneModel = class GeneModel{\n\tconstructor(intervals){\n\t\tconsole.log('constructing genemodel')\n\t\tObject.values(intervals).forEach( interval => {\n\t\t\tif (interval.parents !== undefined){\n\t\t\t\tinterval.parents.forEach( parentId => {\n\t\t\t\t\tlet parent = intervals[parentId]\n\t\t\t\t\tif (parent.children === undefined){\n\t\t\t\t\t\tintervals[parentId].children = []\n\t\t\t\t\t}\n\t\t\t\t\tintervals[parentId].children.push(interval.ID)\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t\tconst genes = Object.values(intervals).filter( interval => {\n\t\t\treturn interval.type === 'gene';\n\t\t})\n\t\tassert.equal(genes.length, 1)\n\t\tconst gene = genes[0]\n\n\t\tconsole.log(gene.ID)\n\n\t\tObject.keys(gene).forEach(key => {\n\t\t\tthis[key] = gene[key]\n\t\t})\n\n\t\tthis.subfeatures = Object.values(intervals).filter( interval => {\n\t\t\treturn interval.type !== 'gene';\n\t\t})\n\t}\n}\n\n\nexport const addGff = new ValidatedMethod({\n\tname: 'addGff',\n\tvalidate: new SimpleSchema({\n\t\tfileName: { type: String },\n\t\treferenceName: { type: String },\n\t\ttrackName: { type: String }\n\t}).validator(),\n\tapplyOptions: {\n\t\tnoRetry: true\n\t},\n\trun({ fileName, referenceName, trackName }){\n\t\tif (! this.userId) {\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tif (! Roles.userIsInRole(this.userId,'curator')){\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\n\t\tconst existingTrack = Tracks.find({ trackName: trackName }).fetch().length\n\t\tif (existingTrack){\n\t\t\tthrow new Meteor.Error('Track exists: ' + trackName);\n\t\t}\n\n\t\tconst existingReference = References.find({ referenceName: referenceName }).fetch().length\n\t\tif (!existingReference){\n\t\t\tthrow new Meteor.Error('Invalid reference: ' + referenceName)\n\t\t}\n\n\t\tconst fileHandle = fs.readFileSync(fileName,{encoding:'binary'});\n\n\t\tlet intervals = {};\n\t\tlet geneCount = 0;\n\n\t\tconsole.log(`Gathering reference sequences for ${referenceName}`)\n\t\tconst referenceSequences = getReferenceSequences(referenceName);\n\n\t\tconsole.log('start reading')\n\t\tPapa.parse(fileHandle, {\n\t\t\tdelimiter: '\\t',\n\t\t\tdynamicTyping: true,\n\t\t\tskipEmptyLines: true,\n\t\t\tcomments: '#',\n\t\t\terror(error,file) {\n\t\t\t\tconsole.log(error)\n\t\t\t},\n\t\t\tstep(line){\n\t\t\t\tlet interval = new Interval({\n\t\t\t\t\tline: line.data[0], \n\t\t\t\t\treferenceName: referenceName, \n\t\t\t\t\ttrackName: trackName,\n\t\t\t\t\treferenceSequences: referenceSequences\n\t\t\t\t})\n\n\t\t\t\tif (interval.parents === undefined){\n\t\t\t\t\tassert.equal(interval.type, 'gene');\n\t\t\t\t\tif ( !isEmpty(intervals) ) {\n\t\t\t\t\t\tconst gene = new GeneModel(intervals);\n\t\t\t\t\t\tGeneSchema.validate(gene);\n\t\t\t\t\t\tGenes.insert(gene);\n\t\t\t\t\t\tgeneCount += 1;\n\t\t\t\t\t\tintervals = {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tintervals[interval.ID] = interval;\n\t\t\t},\n\t\t\tcomplete(results,file) {\n\t\t\t\t\n\t\t\t\tif ( !isEmpty(intervals) ) {\n\t\t\t\t\tconsole.log('constructing final gene')\n\t\t\t\t\tconst gene = new GeneModel(intervals);\n\t\t\t\t\tGeneSchema.validate(gene);\n\t\t\t\t\tGenes.insert(gene);\n\t\t\t\t\tgeneCount += 1;\n\t\t\t\t\tintervals = {}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tTracks.insert({\n\t\t\t\t\ttrackName: trackName,\n\t\t\t\t\treference: referenceName,\n\t\t\t\t\tgeneCount: geneCount,\n\t\t\t\t\tpermissions: ['admin']\n\t\t\t\t});\n\n\t\t\t\tscanGeneAttributes.call({ trackName: trackName });\n\t\t\t}\n\t\t})\n\t\treturn true\n\t}\n})\n\n/**\n * Retrieve \n * @param  { String } referenceName Reference sequence name\n * @return {Object}               Object with all sequences belonging to a reference. Keys are header and values are DNA sequence strings\n */\nconst getReferenceSequences = referenceName => {\n\tconst headers = References.find({\n\t\treferenceName: referenceName\n\t},{\n\t\tfields: {\n\t\t\theader: 1\n\t\t}\n\t}).map(reference => reference.header).reduce((headers, header) => {\n\t\tif (headers.indexOf(header) < 0){\n\t\t\theaders.push(header)\n\t\t}\n\t\treturn headers\n\t},[])\n\n\tconst referenceSequences = headers.reduce((sequences, header) => {\n\t\tconst sequence = References.find({\n\t\t\treferenceName: referenceName,\n\t\t\theader: header\n\t\t},{\n\t\t\tsort: {\n\t\t\t\tstart: 1\n\t\t\t}\n\t\t}).map( ref => ref.seq).join('')\n\t\tsequences[header] = sequence;\n\t\treturn sequences\n\t},{})\n\treturn referenceSequences\n}\n\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/genomes/add_gff.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "class",
    "name": "Interval",
    "memberof": "imports/api/genomes/add_gff.js",
    "static": true,
    "longname": "imports/api/genomes/add_gff.js~Interval",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/genomes/add_gff.js",
    "importStyle": null,
    "description": "Interval Class containing a single genomic interval. Every line in a gff3 file is an interval",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Interval"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/api/genomes/add_gff.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/api/genomes/add_gff.js~Interval#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "type",
    "memberof": "imports/api/genomes/add_gff.js~Interval",
    "static": false,
    "longname": "imports/api/genomes/add_gff.js~Interval#type",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "start",
    "memberof": "imports/api/genomes/add_gff.js~Interval",
    "static": false,
    "longname": "imports/api/genomes/add_gff.js~Interval#start",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "end",
    "memberof": "imports/api/genomes/add_gff.js~Interval",
    "static": false,
    "longname": "imports/api/genomes/add_gff.js~Interval#end",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "score",
    "memberof": "imports/api/genomes/add_gff.js~Interval",
    "static": false,
    "longname": "imports/api/genomes/add_gff.js~Interval#score",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "attributes",
    "memberof": "imports/api/genomes/add_gff.js~Interval",
    "static": false,
    "longname": "imports/api/genomes/add_gff.js~Interval#attributes",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "ID",
    "memberof": "imports/api/genomes/add_gff.js~Interval",
    "static": false,
    "longname": "imports/api/genomes/add_gff.js~Interval#ID",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "parents",
    "memberof": "imports/api/genomes/add_gff.js~Interval",
    "static": false,
    "longname": "imports/api/genomes/add_gff.js~Interval#parents",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "seq",
    "memberof": "imports/api/genomes/add_gff.js~Interval",
    "static": false,
    "longname": "imports/api/genomes/add_gff.js~Interval#seq",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "seqid",
    "memberof": "imports/api/genomes/add_gff.js~Interval",
    "static": false,
    "longname": "imports/api/genomes/add_gff.js~Interval#seqid",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "source",
    "memberof": "imports/api/genomes/add_gff.js~Interval",
    "static": false,
    "longname": "imports/api/genomes/add_gff.js~Interval#source",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "strand",
    "memberof": "imports/api/genomes/add_gff.js~Interval",
    "static": false,
    "longname": "imports/api/genomes/add_gff.js~Interval#strand",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "reference",
    "memberof": "imports/api/genomes/add_gff.js~Interval",
    "static": false,
    "longname": "imports/api/genomes/add_gff.js~Interval#reference",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "track",
    "memberof": "imports/api/genomes/add_gff.js~Interval",
    "static": false,
    "longname": "imports/api/genomes/add_gff.js~Interval#track",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "member",
    "name": "phase",
    "memberof": "imports/api/genomes/add_gff.js~Interval",
    "static": false,
    "longname": "imports/api/genomes/add_gff.js~Interval#phase",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "class",
    "name": "GeneModel",
    "memberof": "imports/api/genomes/add_gff.js",
    "static": true,
    "longname": "imports/api/genomes/add_gff.js~GeneModel",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/genomes/add_gff.js",
    "importStyle": null,
    "description": "Genemodel Class containing all intervals for a single gene.",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "GeneModel"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/api/genomes/add_gff.js~GeneModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/api/genomes/add_gff.js~GeneModel#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "[key]",
    "memberof": "imports/api/genomes/add_gff.js~GeneModel",
    "static": false,
    "longname": "imports/api/genomes/add_gff.js~GeneModel#[key]",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "subfeatures",
    "memberof": "imports/api/genomes/add_gff.js~GeneModel",
    "static": false,
    "longname": "imports/api/genomes/add_gff.js~GeneModel#subfeatures",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "addGff",
    "memberof": "imports/api/genomes/add_gff.js",
    "static": true,
    "longname": "imports/api/genomes/add_gff.js~addGff",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genomes/add_gff.js",
    "importStyle": "{addGff}",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "getReferenceSequences",
    "memberof": "imports/api/genomes/add_gff.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/api/genomes/add_gff.js~getReferenceSequences",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/genomes/add_gff.js",
    "importStyle": null,
    "description": "Retrieve ",
    "lineNumber": 205,
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "referenceName",
        "description": "Reference sequence name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Object with all sequences belonging to a reference. Keys are header and values are DNA sequence strings"
    },
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "imports/api/genomes/add_reference.js",
    "content": "import { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { Meteor } from 'meteor/meteor';\n\nimport SimpleSchema from 'simpl-schema';\nimport fs from 'fs';\nimport readline from 'readline';\nimport Fiber from 'fibers';\nimport Future from 'fibers/future';\n\nimport { ReferenceInfo, References } from '/imports/api/genomes/reference_collection.js';\n\nconst parameterSchema = new SimpleSchema({\n\tfileName: { type: String },\n\treferenceName: { type: String }\n})\n\nexport const addReference = new ValidatedMethod({\n\tname: 'addReference',\n\tvalidate: parameterSchema.validator(),\n\tapplyOptions: {\n\t\tnoRetry: true\n\t},\n\trun({ fileName, referenceName }) {\n\t\tif (! this.userId) {\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tif (! Roles.userIsInRole(this.userId,'curator')){\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\n\t\tconst existingReference = ReferenceInfo.find({referenceName: referenceName}).fetch().length\n\t\tif (existingReference){\n\t\t\tthrow new Meteor.Error('Existing reference: ' + referenceName)\n\t\t}\n\n\t\tconst lineReader = readline.createInterface({\n\t\t\tinput: fs.createReadStream(fileName, 'utf8')\n\t\t})\n\n\t\tconst bulkOp = References.rawCollection().initializeUnorderedBulkOp();\n\n\t\tlet seq = '';\n\t\tlet header;\n\t\tlet start = 0;\n\t\tlet end = 0;\n\t\tconst chunkSize = 10000;\n\t\t\n\t\tconst fut = new Future();\n\t\tconsole.log('start parsing')\n\t\tlineReader.on('line', (line) => {\n\t\t\tif (line[0] === '>'){\n\t\t\t\tif (header !== undefined){\n\t\t\t\t\tconsole.log(header)\n\t\t\t\t\tif (seq.length > 0){\n\t\t\t\t\t\tend += seq.length;\n\t\t\t\t\t\tnew Fiber(()=>{\n\t\t\t\t\t\t\tReferences.insert({\n\t\t\t\t\t\t\t\theader: header,\n\t\t\t\t\t\t\t\tseq: seq,\n\t\t\t\t\t\t\t\tstart: start,\n\t\t\t\t\t\t\t\tend: end,\n\t\t\t\t\t\t\t\treferenceName: referenceName,\n\t\t\t\t\t\t\t\tpermissions: ['admin']\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}).run()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\theader = line.split('>')[1].split(' ')[0];\n\t\t\t\tseq = '';\n\t\t\t\tstart = 0;\n\t\t\t\tend = 0;\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tseq += line;\n\t\t\t\tif ( seq.length > chunkSize ){\n\t\t\t\t\tend += chunkSize\n\t\t\t\t\tnew Fiber(()=>{\n\t\t\t\t\t\tReferences.insert({\n\t\t\t\t\t\t\theader: header,\n\t\t\t\t\t\t\tseq: seq.substring(0,chunkSize),\n\t\t\t\t\t\t\tstart: start,\n\t\t\t\t\t\t\tend: end,\n\t\t\t\t\t\t\treferenceName: referenceName,\n\t\t\t\t\t\t\tpermissions: ['admin']\n\t\t\t\t\t\t})\n\t\t\t\t\t}).run()\n\t\t\t\t\tseq = seq.substring(chunkSize);\n\t\t\t\t\tstart += chunkSize;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tlineReader.on('close', () => {\n\t\t\tend += seq.length;\n\t\t\tnew Fiber(()=>{\n\t\t\t\tReferences.insert({\n\t\t\t\t\theader: header,\n\t\t\t\t\tseq: seq,\n\t\t\t\t\tstart: start,\n\t\t\t\t\tend: end,\n\t\t\t\t\treferenceName: referenceName,\n\t\t\t\t\tpermissions: ['admin']\n\t\t\t\t})\n\t\t\t\tReferenceInfo.insert({\n\t\t\t\t\treferenceName: referenceName,\n\t\t\t\t\tpermissions: ['admin'],\n\t\t\t\t\tdescription: 'description',\n\t\t\t\t\torganism: 'organism'\n\t\t\t\t})\n\t\t\t\tconsole.log('finished parsing')\n\n\t\t\t\tfut.return(1)\n\t\t\t}).run()\n\t\t\t\n\n\t\t})\n\t\treturn fut.wait()\n\t}\n})",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/genomes/add_reference.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "parameterSchema",
    "memberof": "imports/api/genomes/add_reference.js",
    "static": true,
    "longname": "imports/api/genomes/add_reference.js~parameterSchema",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/genomes/add_reference.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "name": "addReference",
    "memberof": "imports/api/genomes/add_reference.js",
    "static": true,
    "longname": "imports/api/genomes/add_reference.js~addReference",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genomes/add_reference.js",
    "importStyle": "{addReference}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "imports/api/genomes/reference_collection.js",
    "content": "import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst References = new Mongo.Collection('references');\n\nconst ReferenceSchema = new SimpleSchema({\n\theader: {\n\t\ttype: String,\n\t\tindex: true,\n\t\tlabel: 'Fasta style sequence header'\n\t},\n\tseq: {\n\t\ttype: String,\n\t\tlabel: 'Nucleotide sequence'\n\t},\n\treferenceName: {\n\t\ttype: String,\n\t\tindex: true,\n\t\tlabel: 'Reference name'\n\t},\n\tstart: {\n\t\ttype: Number,\n\t\tindex: true,\n\t\tlabel: 'Start position of sequence fragment on original sequence'\n\t},\n\tend: {\n\t\ttype: Number,\n\t\tindex: true,\n\t\tlabel: 'End position of sequence fragment on original sequence'\n\t},\n\tpermissions: {\n\t\ttype: Array,//[String],\n\t\tlabel: 'User groups that are allowed to see this reference'\n\t},\n\t'permissions.$' : {\n\t\ttype: String\n\t}\n})\n\nReferences.attachSchema(ReferenceSchema)\n\nconst ReferenceInfo = new Mongo.Collection('referenceInfo')\n\nconst ReferenceInfoSchema = new SimpleSchema({\n\treferenceName: {\n\t\ttype: String,\n\t\tlabel: 'Reference name',\n\t\tindex: true,\n\t\tunique: true\n\t},\n\tpermissions: {\n\t\ttype: Array,//[String],\n\t\tlabel: 'User groups that are allowed to see this reference'\n\t},\n\t'permissions.$': {\n\t\ttype: String\n\t},\n\tdescription: {\n\t\ttype: String,\n\t\tlabel: 'Reference sequence description'\n\t},\n\torganism: {\n\t\ttype: String,\n\t\tlabel: 'Organism name'\n\t}\n})\n\nReferenceInfo.attachSchema(ReferenceInfoSchema)\n\nexport { References, ReferenceSchema, ReferenceInfo, ReferenceInfoSchema };",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/genomes/reference_collection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "References",
    "memberof": "imports/api/genomes/reference_collection.js",
    "static": true,
    "longname": "imports/api/genomes/reference_collection.js~References",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genomes/reference_collection.js",
    "importStyle": "{References}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "ReferenceSchema",
    "memberof": "imports/api/genomes/reference_collection.js",
    "static": true,
    "longname": "imports/api/genomes/reference_collection.js~ReferenceSchema",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genomes/reference_collection.js",
    "importStyle": "{ReferenceSchema}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "ReferenceInfo",
    "memberof": "imports/api/genomes/reference_collection.js",
    "static": true,
    "longname": "imports/api/genomes/reference_collection.js~ReferenceInfo",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genomes/reference_collection.js",
    "importStyle": "{ReferenceInfo}",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "ReferenceInfoSchema",
    "memberof": "imports/api/genomes/reference_collection.js",
    "static": true,
    "longname": "imports/api/genomes/reference_collection.js~ReferenceInfoSchema",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genomes/reference_collection.js",
    "importStyle": "{ReferenceInfoSchema}",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "file",
    "name": "imports/api/genomes/track_collection.js",
    "content": "import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst Tracks = new Mongo.Collection('tracks');\n\nconst trackSchema = new SimpleSchema({\n\ttrackName: {\n\t\ttype: String,\n    label: 'Annotation track name'\n\t},\n\treference: {\n\t\ttype: String,\n    label: 'Reference sequence to which the annotation belongs'\n\t},\n  blastdbs: {\n    type: Object,\n    optional: true,\n  },\n  'blastdbs.nucl': {\n    type: String,\n    optional: true,\n    label: 'Nucleotide blast database name'\n  },\n  'blastdbs.prot': {\n    type: String,\n    optional: true,\n    label: 'Peptide blast database name'\n  },\n  permissions: {\n    type: Array,//[String],\n    label: 'Track permissions'\n  },\n  'permissions.$': {\n    type: String\n  }\n});\n\nTracks.attachSchema(trackSchema);\n\nexport { Tracks, trackSchema };",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/genomes/track_collection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "Tracks",
    "memberof": "imports/api/genomes/track_collection.js",
    "static": true,
    "longname": "imports/api/genomes/track_collection.js~Tracks",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genomes/track_collection.js",
    "importStyle": "{Tracks}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "trackSchema",
    "memberof": "imports/api/genomes/track_collection.js",
    "static": true,
    "longname": "imports/api/genomes/track_collection.js~trackSchema",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genomes/track_collection.js",
    "importStyle": "{trackSchema}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "file",
    "name": "imports/api/genomes/updateTrackPermissions.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { Roles } from 'meteor/alanning:roles';\n\nimport SimpleSchema from 'simpl-schema';\n\nimport { Tracks } from '/imports/api/genomes/track_collection.js';\n\n/**\n * submitBlastJob validated method: submits makeblastdb job to jobqueue, call this from the client\n * @param  {String} options.trackName Name of the annotation track\n * @param  {String} options.dbType    Either nucl or prot\n * @return {String}                   jobId of the makeblastdb job\n */\nexport const updateTrackPermissions = new ValidatedMethod({\n  name: 'updateTrackPermissions',\n  validate: new SimpleSchema({\n    trackName: { type: String },\n    permissions: { type: Array },\n    'permissions.$': { type: String }\n  }).validator(),\n  applyOptions: {\n    noRetry: true\n  },\n  run({ trackName, permissions }){\n    if (! this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n    if (! Roles.userIsInRole(this.userId,'user')){\n      throw new Meteor.Error('not-authorized');\n    }\n\n    if (permissions.length === 0){\n      permissions.push('admin')\n    }\n\n    Tracks.update({\n      trackName: trackName\n    },{\n      $set: {\n        permissions: permissions\n      }\n    })\n  \n  }\n})\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/genomes/updateTrackPermissions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "updateTrackPermissions",
    "memberof": "imports/api/genomes/updateTrackPermissions.js",
    "static": true,
    "longname": "imports/api/genomes/updateTrackPermissions.js~updateTrackPermissions",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/genomes/updateTrackPermissions.js",
    "importStyle": "{updateTrackPermissions}",
    "description": "submitBlastJob validated method: submits makeblastdb job to jobqueue, call this from the client",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.trackName",
        "description": "Name of the annotation track"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.dbType",
        "description": "Either nucl or prot"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "jobId of the makeblastdb job"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "imports/api/jobqueue/jobqueue.js",
    "content": "const jobQueue = new JobCollection('jobQueue', { noCollectionSuffix: true });\n\n//immediately build a 'job cleaning job' so that the jobcollection does not fill up endlessly\nnew Job(jobQueue, 'cleanup',{})\n  .repeat({ schedule: jobQueue.later.parse.text('every 20 minutes') })\n  .save({ cancelRepeats: true })\n\nconst cleanup = jobQueue.processJobs(\n  'cleanup',\n  {\n    pollInterval: false,\n    workTimeout: 60 * 1000\n  },\n  (job,callback) => {\n    let current = new Date()\n    current.setMinutes(current.getMinutes() - 20 )\n    ids = jobQueue.find({\n      status: {\n        $in: Job.jobStatusRemovable\n      },\n      updated: {\n        $lt: current\n      }\n    },{\n      fields: {\n        _id: 1\n      }\n    }).map(job => job._id)\n\n    if (ids.length > 0){\n      jobQueue.removeJobs(ids)\n    }\n    job.done(`removed ${ids.length} old jobs`)\n    callback()\n  })\n\njobQueue.find({\n  type: 'cleanup',\n  status: 'ready'\n}).observe({\n  added(){\n    return cleanup.trigger()\n  }\n})\n\nexport default jobQueue\n\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/jobqueue/jobqueue.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "cleanup",
    "memberof": "imports/api/jobqueue/jobqueue.js",
    "static": true,
    "longname": "imports/api/jobqueue/jobqueue.js~cleanup",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/jobqueue/jobqueue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "imports/api/jobqueue/process-blast.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport jobQueue from './jobqueue.js';\nimport  spawn  from 'spawn-promise';//child-process-promise';\n\nimport xml2js from 'xml2js-es6-promise';\n\nimport { Tracks } from '/imports/api/genomes/track_collection.js';\n\n\n/**\n * Keep track of what blast commands should use which databases\n * @type {Object}\n */\nconst DB_TYPES = {  \n  'blastn':'nucl',\n  'tblastn':'nucl',\n  'tblastx':'nucl',\n  'blastp':'prot',\n  'blastx':'prot'\n}\n\njobQueue.processJobs(\n  'blast',\n  {\n    concurrency: 1,\n    payload: 1\n  },\n  (job, callback) => {\n    console.log(job.data)\n\n    const {\n      blastType,\n      input,\n      trackNames,\n      user\n    } =  job.data\n\n    const dbType = DB_TYPES[blastType]\n\n    const dbs = Tracks.find({\n      trackName: {\n        $in: trackNames\n      } \n    },{\n      fields: {\n        blastdbs: 1\n      }\n    }).map(track => { \n      return track.blastdbs[dbType]\n    }).join(' ')\n\n    const options = ['-db',dbs,'-outfmt','5','-num_alignments','20']\n\n    console.log(`${blastType} ${options.join(' ')} ${input.substring(0,3)}...${input.substring(input.length - 3, input.length)}`)\n\n    spawn(blastType, options, input)\n      .then( result => {\n        console.log('blast finished')\n        return xml2js(result.toString())\n      })\n      .then( resultJson => {\n        job.done(resultJson)\n        callback()\n      })\n      .catch( error => {\n        console.log(error)\n        job.fail(error.process)\n        callback()\n      })\n    //job.done(blastResult)\n    //callback()\n  }\n)",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/jobqueue/process-blast.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "DB_TYPES",
    "memberof": "imports/api/jobqueue/process-blast.js",
    "static": true,
    "longname": "imports/api/jobqueue/process-blast.js~DB_TYPES",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/jobqueue/process-blast.js",
    "importStyle": null,
    "description": "Keep track of what blast commands should use which databases",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "imports/api/jobqueue/process-download.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport jobQueue from './jobqueue.js';\n\nimport fs from 'fs';\nimport zlib from 'zlib';\n\nimport { Genes } from '/imports/api/genes/gene_collection.js';\n\nconst DATATYPE_EXTENSIONS = {\n  'Annotations': 'annotations.gff'\n}\n\nconst queue = jobQueue.processJobs(\n  'download',\n  {\n    concurrency: 1,\n    payload: 1\n  },\n  (job, callback) => {\n    console.log(job.data)\n    const { queryHash, queryString, dataType } = job.data;\n    const query = JSON.parse(queryString);\n    const extension = DATATYPE_EXTENSIONS[dataType]\n\n    const fileName = `Genebook_download_${queryHash}.${extension}.gz`;\n\n    const writeStream = fs.createWriteStream(fileName);\n    const compress = zlib.createGzip();\n    compress.pipe(writeStream);\n\n    // the finish event is emitted when all data has been flushed from the stream\n    compress.on('finish', () => {  \n        console.log('wrote all data to file');\n    });\n\n    Genes.find(query).forEach(gene => {\n      console.log(gene.ID)\n      compress.write(gene.ID)\n    })\n\n    // close the stream\n    compress.end();\n\n    job.done(fileName)\n    callback()\n  })\n\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/jobqueue/process-download.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "DATATYPE_EXTENSIONS",
    "memberof": "imports/api/jobqueue/process-download.js",
    "static": true,
    "longname": "imports/api/jobqueue/process-download.js~DATATYPE_EXTENSIONS",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/jobqueue/process-download.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{\"Annotations\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "queue",
    "memberof": "imports/api/jobqueue/process-download.js",
    "static": true,
    "longname": "imports/api/jobqueue/process-download.js~queue",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/jobqueue/process-download.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "file",
    "name": "imports/api/jobqueue/process-interproscan.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport jobQueue from './jobqueue.js';\n\nconst queue = jobQueue.processJobs(\n  'interproscan',\n  {\n    concurrency: 4,\n    payload: 1\n  },\n  function(job, callback){\n    console.log(job.data.geneId)\n    //Meteor.call('interproscan',job.data.geneId)\n    job.done()\n    callback()\n  })\n\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/jobqueue/process-interproscan.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 137,
    "kind": "variable",
    "name": "queue",
    "memberof": "imports/api/jobqueue/process-interproscan.js",
    "static": true,
    "longname": "imports/api/jobqueue/process-interproscan.js~queue",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/jobqueue/process-interproscan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "file",
    "name": "imports/api/jobqueue/process-makeBlastDb.js",
    "content": "import { Meteor } from 'meteor/meteor';\n\nimport spawn  from 'spawn-promise';\nimport fs from 'fs';\n\nimport jobQueue from './jobqueue.js';\n\nimport { Genes } from '/imports/api/genes/gene_collection.js';\nimport { Tracks } from '/imports/api/genomes/track_collection.js';\n\nimport { getGeneSequences } from '/imports/api/util/util.js';\n\n\njobQueue.processJobs(\n  'makeBlastDb',\n  {\n    concurrency: 2,\n    payload: 1\n  },\n  function(job, callback){\n    console.log('processing makeblastdb')\n    console.log(job.data)\n    const { trackName } = job.data;\n\n    const trackId = trackName.split(/ |\\./).join('_')\n\n    const geneNumber = Genes.find({ track: trackName }).count()\n    const stepSize = Math.round(geneNumber / 10);\n    console.log(`scanning ${geneNumber} genes`)\n    \n    const tempFiles = {\n      nucl: `tmp_${trackId}.nucl.fa`,\n      prot: `tmp_${trackId}.prot.fa`\n    }\n\n    const tempFileHandles = {\n      nucl: fs.createWriteStream(tempFiles.nucl),\n      prot: fs.createWriteStream(tempFiles.prot)\n    }\n    \n    Genes.find({ track: trackName }).forEach( (gene, index) => {\n\n      if (index % stepSize === 0){\n        job.progress(index, geneNumber, { echo: true })\n      }\n      \n      getGeneSequences(gene).forEach(transcript => {\n        const header = `>${gene.ID} ${transcript.ID}\\n`\n\n        tempFileHandles.prot.write(header)\n        tempFileHandles.prot.write(`${transcript.pep}\\n`)\n\n        tempFileHandles.nucl.write(header)\n        tempFileHandles.nucl.write(`${transcript.seq}\\n`)\n        //let sequence = dbType === 'prot' ? transcript.pep : transcript.seq\n        //keep track of gene ID and transcript ID for later processing\n        //return `>${gene.ID} ${transcript.ID}\\n${sequence}`\n      })\n    })\n\n    tempFileHandles.nucl.end();\n    tempFileHandles.prot.end();\n    \n    const dbFiles = Object.keys(tempFiles).map(async dbType => {\n      const tempFile = tempFiles[dbType];\n\n      const outFile = `${trackId}.${dbType}`\n      const options = [\n        '-dbtype', dbType, \n        '-title', trackId,\n        '-in', tempFile, \n        '-out', outFile\n        ];\n      console.log(options)\n      const dbFile =  await spawn('makeblastdb', options)\n        .then( result => {\n          let stdout = result.toString();\n          if (stdout){\n            console.log(`makeblastdb stdout:${stdout}`)\n          }\n          Tracks.update({\n            trackName: trackName\n          },{\n            $set: {\n              [`blastdbs.${dbType}`]:`${trackId}.${dbType}`\n            }\n          })\n          return `${trackId}.${dbType}` \n        }).catch(error => {\n          console.error(error)\n        })\n      console.log(`${dbFile} done`)\n      return dbFile\n    })\n    job.done(dbFiles)\n    callback()\n  }\n)\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/jobqueue/process-makeBlastDb.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "imports/api/methods/list.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { Roles } from 'meteor/alanning:roles';\n\nimport { Tracks } from '/imports/api/genomes/track_collection.js';\n\n\nMeteor.methods({\n\tlist: function(what){\n\t\tif (! this.userId) {\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tif (! Roles.userIsInRole(this.userId,'curator')){\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tlet retval;\n\t\tswitch( what ){\n\t\t\tcase 'tracks':\n\t\t\t\tretval = Tracks.find({},{ fields: { _id: 0}}).fetch();\n\t\t\t\tbreak;\n\t\t\tcase 'references':\n\t\t\t\tretval = References.find(\n\t\t\t\t\t{},\n\t\t\t\t\t{ fields: { _id: 0, reference: 1 }}\n\t\t\t\t\t).fetch().map(function(ret){\n\t\t\t\t\t\treturn ret.reference\n\t\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Meteor.Error('Can not list: ' + what) \n\t\t}\n\t\treturn [...new Set(retval)];\n\t}\n})",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/methods/list.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "imports/api/methods/methods.js",
    "content": "import { spawn } from 'child_process';\nimport Future from 'fibers/future';\n\nimport { Genes } from '/imports/api/genes/gene_collection.js';\nimport { Attributes } from '/imports/api/genes/attribute_collection.js';\nimport { EditHistory } from '/imports/api/genes/edithistory_collection.js';\n\nimport { reverseComplement, translate, getGeneSequences } from '/imports/api/util/util.js';\n\nimport hash from 'object-hash';\n\n\n\nMeteor.methods({\n\t/**\n\t * formatFasta description\n\t * @param  {Object} query        Database query to select genes\n\t * @param  {String} sequenceType One of 'protein' or 'nucleotide'\n\t * @return {Array}               Array of fasta formatted coding sequences\n\t */\n\tformatFasta (query, sequenceType){\n\t\tif (! this.userId) {\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tconsole.log('formatFasta')\n\t\tconsole.log(query)\n\n\t\tconst fasta = Genes.find(query).map( (gene, index) => {\n      const transcriptFasta = getGeneSequences(gene).map(transcript => {\n        const sequence = sequenceType === 'protein' ? transcript.pep : transcript.seq;\n        const wrappedSequence = sequence.match(/.{1,60}/g).join('\\n');\n        return `>${transcript.ID}\\n${wrappedSequence}\\n`\n      }).join('')\n      return transcriptFasta\n    })\n\n\t\treturn fasta\n\t},\n\tqueryCount (search,query){\n\t\tif (! this.userId) {\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tif (! Roles.userIsInRole(this.userId,'curator')){\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tif (search) {\n\t\t\tquery.$or = [{ 'ID': { $regex: search , $options: 'i' } },{ 'Name': { $regex: search , $options: 'i' } }];\n\t\t\tif (!query.hasOwnProperty('Productname')){\n\t\t\t\tquery.$or.push({ 'Productname': { $regex: search , $options: 'i' } })\n\t\t\t}\n\t\t}\n\t\tconst count = Genes.find(query).count()\n\t\treturn count\n\t},\n\tremoveFromViewing (geneId){\n\t\tif (! this.userId) {\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tGenes.update({ 'ID': geneId },{ $pull: { 'viewing': this.userId } }, (err,res) => {\n\t\t\tif (err) {\n\t\t\t\tthrow new Meteor.Error('removeFromViewing server method error')\n\t\t\t}\n\t\t\tconst gene = Genes.findOne({'ID': geneId})\n\t\t\tconsole.log(gene)\n\t\t\t//if ( viewing.length === 0 ){\n\t\t\t\t//Genes.update({ 'ID': geneId },{ $unset: { 'viewing': 1 } } )\n\t\t\t//} \n\t\t})\n\t\t\n\t},\n\t/**\n\t * If a gene is being edited it is locked so other users can not edit it as well.\n\t * @param  {String} geneId Gene ID of the gene that should be locked for editing\n\t * @return {undefined}        No return value\n\t */\n\tlockGene (geneId) {\n\t\tif (! this.userId) {\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tif (! Roles.userIsInRole(this.userId,'curator')){\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tGenes.update({ 'ID': geneId },{ $set: { editing: this.userId } }, (err,res) => {\n\t\t\tif (err){\n\t\t\t\tthrow new Meteor.Error('Locking gene failed')\n\t\t\t}\n\t\t\tconsole.log(`${this.userId} is editing gene ${geneId}`)\n\t\t})\n\t},\n\t/**\n\t * This unlocks a gene from being blocked during editing. \n\t * A gene should only be unlocked by the person that locked it\n\t * @param  {String} geneId Gene ID of the gene that should be locked for editing\n\t * @return {undefined}        No return value\n\t */\n\tunlockGene (geneId) {\n\t\tif (! this.userId) {\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tif (! Roles.userIsInRole(this.userId,'curator')){\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tconst gene = Genes.findOne({ ID: geneId })\n\t\tif (!gene){\n\t\t\tthrow new Meteor.Error('not-authorized')\n\t\t}\n\n\t\tif (!gene.editing){\n\t\t\tthrow new Meteor.Error('not-authorized')\n\t\t}\n\n\t\tif (!(gene.editing === this.userId)){\n\t\t\tthrow new Meteor.Error('not-authorized')\n\t\t}\n\n\t\tconsole.log('allow unlock ===',gene.editing === this.userId)\n\t\tif (gene.editing === this.userId){\n\t\t\tconsole.log(`${this.userId} is no longer editing gene ${geneId}`)\n\t\t\tGenes.update({ ID: geneId}, { $set: { editing: 'Unlocking' } }, (err,res) => {\n\t\t\t\tif (err){\n\t\t\t\t\tthrow new Meteor.Error('Unlocking failed')\n\t\t\t\t}\n\t\t\t\tGenes.update({ ID: geneId },{ $unset: { editing: 1 } })\n\t\t\t} )\n\t\t}\n\t}\n})\n\nMeteor.methods({\n\tupdateExperiments (_id,fields){\n\t\tif (! this.userId) {\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t};\n\t\tif (! Roles.userIsInRole(this.userId,'admin')){\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tExperiments.update({'_id':_id},{$set:fields});\n\t},\n\t updateUsers (_id,fields){\n\t\tif (! this.userId) {\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tMeteor.users.update({'_id':_id},{$set:fields})\n\t},\n\tupdateGeneInfo (geneId,update,revert){\n\t\tconst userId = this.userId;\n\t\tif (! userId) {\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tif (! Roles.userIsInRole(userId,'curator')){\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tconsole.log(`Updating gene ${geneId}`)\n\t\tconsole.log('Update:',update)\n\t\tconsole.log('Revert:',revert)\n\n\t\tlet newAttributes = [];\n\n\t\tif (update.hasOwnProperty('$set')){\n\t\t\tnewAttributes = Object.keys(update['$set']).filter( key => {\n\t\t\t\treturn key.startsWith('attributes.')\n\t\t\t}).map( key => {\n\t\t\t\treturn {\n\t\t\t\t\tquery: key,\n\t\t\t\t\tname: key.replace('attributes.','')\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\t\t\n\t\tconsole.log('New attributes:', newAttributes)\n\n\t\tconst revertString = JSON.stringify(revert);\n\n\t\tconst gene = Genes.findOne({ID: geneId})\n\n\t\tGenes.update({ ID: geneId }, update, (err,res) => {\n\t\t\tif (!err){\n\t\t\t\tEditHistory.insert({ \n\t\t\t\t\tID: geneId, \n\t\t\t\t\tdate: new Date(), \n\t\t\t\t\tuser: userId, \n\t\t\t\t\trevert: revertString\n\t\t\t\t})\n\t\t\t\tnewAttributes.forEach( newAttribute => {\n\t\t\t\t\tAttributes.findAndModify({\n\t\t\t\t\t\tquery: {\n\t\t\t\t\t\t\tname: newAttribute.name\n\t\t\t\t\t\t},\n\t\t\t\t\t\tupdate: {\n\t\t\t\t\t\t\t$setOnInsert: {\n\t\t\t\t\t\t\t\tname: newAttribute.name,\n\t\t\t\t\t\t\t\tquery: newAttribute.query,\n\t\t\t\t\t\t\t\tshow: true,\n\t\t\t\t\t\t\t\treserved: false,\n\t\t\t\t\t\t\t\tcanEdit: false\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\treferences: gene.reference,\n\t\t\t\t\t\t\t\ttracks: gene.track\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tupsert: true,\n\t\t\t\t\t\tnew: true\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t},\n\tupdateAttributes (_id,fields){\n\t\tif (! this.userId) {\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tif (! Roles.userIsInRole(this.userId,'admin')){\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tAttributes.update({'_id':_id},{$set:fields})\n\t},\n\tformatGff3 (query){\n\t\tif (! this.userId) {\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\t\n\t\tconst genes = Genes.find(query)\n\t\tconst total = genes.count();\n\t\tlet counter = 0;\n\t\tconst gff = genes.map(function(gene){\n\t\t\tcounter += 1;\n\t\t\tlet subLines = gene.subfeatures.map(function(sub){\n\t\t\t\tlet subFields = [\n\t\t\t\t\tgene.seqid,\n\t\t\t\t\tgene.source,\n\t\t\t\t\tsub.type,\n\t\t\t\t\tsub.start,\n\t\t\t\t\tsub.end,\n\t\t\t\t\tsub.score,\n\t\t\t\t\tgene.strand,\n\t\t\t\t\tsub.phase,\n\t\t\t\t\t'ID='+sub.ID+';Parents='+sub.parents.join()\n\t\t\t\t]\n\t\t\t\treturn subFields.join('\\t') + '\\n';\n\t\t\t})\n\t\t\tlet geneFields = [\n\t\t\t\tgene.seqid,\n\t\t\t\tgene.source,\n\t\t\t\tgene.type,\n\t\t\t\tgene.start,\n\t\t\t\tgene.end,\n\t\t\t\tgene.score,\n\t\t\t\tgene.strand,\n\t\t\t\tgene.phase,\n\t\t\t\t'ID='+gene.ID\n\t\t\t]\n\t\t\tlet geneLine = geneFields.join('\\t') + '\\n';\n\t\t\t\n\t\t\t//unshift adds to the beginning of the array\n\t\t\tsubLines.unshift(geneLine);\n\n\t\t\treturn subLines.join('')\n\t\t})\n\t\treturn gff\n\t},\n\tinitializeDownload (query,format){\n\t\tqueryHash = hash(query);\n\t\tqueryString = JSON.stringify(query);\n\t\texisting = Downloads.findOne({query:queryHash,format:format})\n\t\tlet downloadId;\n\t\tif (existing === undefined){\n\t\t\tdownloadId = Downloads.insert({query:queryHash,queryString:queryString,format:format})\n\t\t\t//return downloadId\n\t\t} else {\n\t\t\tdownloadId = existing._id\n\t\t\t//return existing._id\n\t\t}\n\t}\n})",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/methods/methods.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "file",
    "name": "imports/api/publications.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { Roles } from 'meteor/alanning:roles';\n\nimport jobQueue from '/imports/api/jobqueue/jobqueue.js';\n\nimport { Genes } from '/imports/api/genes/gene_collection.js';\nimport { Attributes } from '/imports/api/genes/attribute_collection.js';\nimport { Interpro } from '/imports/api/genes/interpro_collection.js';\nimport { Orthogroups } from '/imports/api/genes/orthogroup_collection.js';\nimport { EditHistory } from '/imports/api/genes/edithistory_collection.js';\nimport { Tracks } from '/imports/api/genomes/track_collection.js';\nimport { References, ReferenceInfo } from '/imports/api/genomes/reference_collection.js';\nimport { ExperimentInfo, Transcriptomes } from '/imports/api/transcriptomes/transcriptome_collection.js';\n\nMeteor.publish({\n  genes({limit, search, query}){\n    console.log('publishing gene list')\n    console.log('limit',limit)\n    console.log('search',search)\n    console.log('query',query)\n    const publication = this;\n    if (!publication.userId){\n      publication.stop()\n    }\n\n    limit = limit || 40;\n    query = query || {};\n    if (search) {\n      query.$or = [{ 'ID': { $regex: search , $options: 'i' } },{ 'Name': { $regex: search , $options: 'i' } }];\n      if (!query.hasOwnProperty('Productname')){\n        query.$or.push({ 'Productname': { $regex: search , $options: 'i' } })\n      }\n    }\n\n    //get user roles\n    const roles = Roles.getRolesForUser(publication.userId);\n\n    //get accessable tracks that user can subscribe to\n    const tracks = Tracks.find({\n      permissions: {\n        $in: roles\n      }\n    }).fetch().map(track => track.trackName)\n\n    //if a track is requested in the query it should be in the list of accessable tracks\n    if ( query.hasOwnProperty('track') ){\n      //array intersection in javascript: \n      //https://stackoverflow.com/questions/1885557/simplest-code-for-array-intersection-in-javascript\n      const queryTracks = query['track']['$in'].filter(track => {\n        return tracks.indexOf(track) !== -1\n      })\n      query.track = { $in: queryTracks }\n    }\n\n    return Genes.find(query,{ limit: limit })\n  },\n  users(){\n    const publication = this;\n    if (!publication.userId){\n      publication.stop()\n    }\n    if (Roles.userIsInRole(publication.userId, 'admin')){\n      return Meteor.users.find({});\n    } else if (Roles.userIsInRole(publication.userId,['user','curator'])){\n      return Meteor.users.find({},{fields:{username:1}})\n    } else {\n      publication.ready()\n    }\n  },\n  attributes(){\n    const publication = this;\n    if (!publication.userId){\n      publication.stop()\n    }\n    const roles = Roles.getRolesForUser(publication.userId);\n    const tracks = Tracks.find({\n      permissions: { $in: roles }\n    }).fetch().map(track => {\n      return track.trackName\n    })\n    return Attributes.find({\n      $or: [\n        { tracks: { $in: tracks } },\n        { allReferences: true }\n      ]\n    })\n  },\n  singleGene (geneId) {\n    const publication = this;\n    if (!publication.userId){\n      publication.stop()\n    }\n    const roles = Roles.getRolesForUser(publication.userId);\n    const tracks = Tracks.find({\n      permissions: { $in: roles }\n    }).fetch().map(track => {\n      return track.trackName\n    })\n    return Genes.find({\n      ID: geneId,\n      track: {\n        $in: tracks\n      }\n    })\n  },\n  geneExpression (geneId) {\n    const publication = this;\n    if (!publication.userId){\n      publication.stop()\n    }\n    const roles = Roles.getRolesForUser(publication.userId);\n    return Transcriptomes.find({\n      geneId: geneId,\n      permissions: {\n        $in: roles\n      }\n    })\n  },\n  experimentInfo (){\n    const publication = this;\n    if (!publication.userId){\n      publication.stop()\n    }\n    const roles = Roles.getRolesForUser(publication.userId);\n    return ExperimentInfo.find({\n      permissions: {\n        $in: roles\n      }\n    });\n  },\n  downloads (downloadId) {\n    const publication = this;\n    const roles = publication.userId ? Roles.getRolesForUser(publication.userId) : ['public'];\n    return Downloads.findOne({ID: downloadId, permission: {$in: roles} });\n  },\n  jobQueue () {\n    const publication = this;\n    if (!publication.userId){\n      publication.stop()\n    }\n    return jobQueue.find({});\n  },\n  referenceInfo () {\n    const publication = this;\n    if (!publication.userId){\n      publication.stop()\n    }\n    const roles = Roles.getRolesForUser(publication.userId);\n    return ReferenceInfo.find({\n      permissions: {\n        $in: roles\n      }\n    })\n  },\n  orthogroups (ID) {\n    if (!this.userId){\n      this.stop()\n    }\n    return Orthogroups.find({ 'ID': ID });\n  },\n  tracks (){\n    const publication = this;\n    if (!publication.userId){\n      publication.stop()\n      //throw new Meteor.Error('Unauthorized')\n    }\n    const roles = Roles.getRolesForUser(publication.userId);\n    console.log(`tracks publication for user ${publication.userId} with roles ${roles}`)\n    return Tracks.find({\n      permissions: {\n        $in: roles\n      }\n    });\n  },\n  interpro (){\n    if (!this.userId){\n      this.stop()\n      //throw new Meteor.Error('Unauthorized')\n    }\n    return Interpro.find({});\n  },\n  editHistory (){\n    if (!this.userId){\n      this.stop()\n      //throw new Meteor.Error('Unauthorized')\n    }\n    return EditHistory.find({});\n  }\n})\n\n/*\nMeteor.publish('browser',function(track,seqid,start,end){\n  return Genes.find({ 'seqid': seqid, 'start': { $gte: start }, 'end': { $lte: end } });\n})\n*/\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/publications.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 142,
    "kind": "file",
    "name": "imports/api/transcriptomes/add_transcriptome.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { Roles } from 'meteor/alanning:roles';\n\nimport assert from 'assert';\nimport Papa from 'papaparse';\nimport fs from 'fs';\n\nimport { Tracks } from '/imports/api/genomes/track_collection.js';\nimport { Genes } from '/imports/api/genes/gene_collection.js';\nimport { ExperimentInfo, Transcriptomes } from '/imports/api/transcriptomes/transcriptome_collection.js';\n\nMeteor.methods({\n\taddTranscriptome(config){\n\t\tconsole.log('trying to insert',config)\t\n\t\tif (! this.userId) {\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\t\tif (! Roles.userIsInRole(this.userId,'curator')){\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\n\t\tconst existingTrack = Tracks.find({ trackName: config.trackName }).fetch().length\n\t\tif (!existingTrack){\n\t\t\tthrow new Meteor.Error(`Track does not exist: ${config.trackName}`);\n\t\t}\n\n\t\tconst fileHandle = fs.readFileSync(config.fileName, { encoding: 'binary' });\n\n\t\tconsole.log(`Start reading ${config.fileName}`)\n\n\t\tPapa.parse(fileHandle, {\n\t\t\tdelimiter: '\\t',\n\t\t\tdynamicTyping: true,\n\t\t\tskipEmptyLines: true,\n\t\t\tcomments: '#',\n\t\t\theader: true,\n\t\t\terror(error,file) {\n\t\t\t\tconsole.log(error)\n\t\t\t},\n\t\t\tcomplete(results,file) {\n\t\t\t\tconst missingGenes = new Set();\n\t\t\t\tconst tracks = new Set();\n\n\t\t\t\tconsole.log('Reading finished, start validating')\n\n\t\t\t\tresults.data.forEach(result => {\n\t\t\t\t\tconst gene = Genes.findOne({ID: result.target_id});\n\t\t\t\t\tif (gene === undefined){\n\t\t\t\t\t\tmissingGenes.add(result.target_id)\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttracks.add(gene.track)\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\tif (missingGenes.size > 0){\n\t\t\t\t\tthrow new Meteor.Error(`${missingGenes.length} genes could not be found`)\n\t\t\t\t}\n\n\t\t\t\tif (tracks.size > 1){\n\t\t\t\t\tthrow new Meteor.Error(`Gene IDs are linked to more than one track: ${Array.from(tracks)}`)\n\t\t\t\t}\n\n\t\t\t\tconsole.log('Validation finished, start inserting experiment info')\n\t\t\t\tconst experimentId = ExperimentInfo.insert({\n\t\t\t\t\ttrack: config.trackName,\n\t\t\t\t\tsampleName: config.sampleName,\n\t\t\t\t\texperimentGroup: config.experimentGroup,\n\t\t\t\t\treplicaGroup: config.replicaGroup,\n\t\t\t\t\tdescription: config.description,\n\t\t\t\t\tpermissions: ['admin'],\n\t\t\t\t})\n\n\t\t\t\t/*\n\t\t\t\tformattedResults = results.map(result => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tgeneId: result.target_id,\n\t\t\t\t\t\texperimentId: experimentId,\n\t\t\t\t\t\tpermissions: ['admin'],\n\t\t\t\t\t\traw_counts: result.est_counts,\n\t\t\t\t\t\ttpm: result.tpm\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t*/\n\t\t\t\tconsole.log('Start inserting expression data')\n\t\t\t\tresults.data.forEach( (gene) => {\n\t\t\t\t\tTranscriptomes.insert({\n\t\t\t\t\t\tgeneId: gene.target_id,\n\t\t\t\t\t\texperimentId: experimentId,\n\t\t\t\t\t\tpermissions: ['admin'],\n\t\t\t\t\t\traw_counts: gene.est_counts,\n\t\t\t\t\t\ttpm: gene.tpm\n\t\t\t\t\t})\n\t\t\t\t\t\n\t\t\t\t})\n\t\t\t\t\n\n\t\t\t}\n\t\t})\n\t\treturn `Succesfully inserted ${config.sampleName}`\n\t}\n})",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/transcriptomes/add_transcriptome.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "imports/api/transcriptomes/transcriptome_collection.js",
    "content": "import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst ExperimentInfo = new Mongo.Collection('experiments');\n\nconst ExperimentInfoSchema = new SimpleSchema({\n\tsampleName: {\n\t\ttype: String,\n\t\tlabel: 'Short name for the sample',\n\t},\n\texperimentGroup: {\n\t\ttype: String,\n\t\tlabel: 'Identifier to group together samples from the same experiment'\n\t},\n\treplicaGroup: {\n\t\ttype: String,\n\t\tlabel: 'Identifier to group together samples from the same replica'\n\t},\n\ttrack: {\n\t\ttype: String,\n\t\tlabel: 'Annotation track to which the transcriptome is mapped'\n\t},\n\tdescription: {\n\t\ttype: String,\n\t\tlabel: 'Experiment description'\n\t},\n\tpermissions: {\n\t\ttype: Array,\n\t\tlabel: 'User groups that can access this experiment'\n\t},\n\t'permissions.$': {\n\t\ttype: String\n\t}\n})\n\nExperimentInfo.attachSchema(ExperimentInfoSchema);\n\nconst Transcriptomes = new Mongo.Collection('transcriptomes');\n\nconst TranscriptomeSchema = new SimpleSchema({\n\tgeneId: {\n\t\ttype: String,\n\t\tlabel: 'Gene ID',\n\t\t//index: true\n\t},\n\texperimentId: {\n\t\ttype: String,\n\t\tlabel: 'Experiment ID',\n\t\t//index: true\n\t},\n\tpermissions:{\n\t\ttype: Array,//[String],\n\t\tlabel: 'User groups that can access this experiment'\n\t},\n\t'permissions.$': {\n\t\ttype: String\n\t},\n\traw_counts: {\n\t\ttype: Number,\n\t\t//decimal: true,\n\t\tlabel: 'Raw read counts'\n\t},\n\ttpm: {\n\t\ttype: Number,\n\t\t//decimal: true,\n\t\tlabel: 'TPM normalized read counts'\n\t}\n})\n\nTranscriptomes.attachSchema(TranscriptomeSchema)\n\nexport { ExperimentInfo, ExperimentInfoSchema, Transcriptomes, TranscriptomeSchema }\n\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/transcriptomes/transcriptome_collection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "variable",
    "name": "ExperimentInfo",
    "memberof": "imports/api/transcriptomes/transcriptome_collection.js",
    "static": true,
    "longname": "imports/api/transcriptomes/transcriptome_collection.js~ExperimentInfo",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/transcriptomes/transcriptome_collection.js",
    "importStyle": "{ExperimentInfo}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "variable",
    "name": "ExperimentInfoSchema",
    "memberof": "imports/api/transcriptomes/transcriptome_collection.js",
    "static": true,
    "longname": "imports/api/transcriptomes/transcriptome_collection.js~ExperimentInfoSchema",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/transcriptomes/transcriptome_collection.js",
    "importStyle": "{ExperimentInfoSchema}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "variable",
    "name": "Transcriptomes",
    "memberof": "imports/api/transcriptomes/transcriptome_collection.js",
    "static": true,
    "longname": "imports/api/transcriptomes/transcriptome_collection.js~Transcriptomes",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/transcriptomes/transcriptome_collection.js",
    "importStyle": "{Transcriptomes}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "variable",
    "name": "TranscriptomeSchema",
    "memberof": "imports/api/transcriptomes/transcriptome_collection.js",
    "static": true,
    "longname": "imports/api/transcriptomes/transcriptome_collection.js~TranscriptomeSchema",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/transcriptomes/transcriptome_collection.js",
    "importStyle": "{TranscriptomeSchema}",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "imports/api/transcriptomes/updateSampleInfo.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { Roles } from 'meteor/alanning:roles';\n\nimport SimpleSchema from 'simpl-schema';\n\nimport { ExperimentInfo } from '/imports/api/transcriptomes/transcriptome_collection.js';\n\n/**\n * updateSampleInfo validated method: Update transcriptome information and groups\n * @param  {String} options.trackName Name of the annotation track\n * @param  {String} options.dbType    Either nucl or prot\n * @return {String}                   jobId of the makeblastdb job\n */\nexport const updateSampleInfo = new ValidatedMethod({\n  name: 'updateSampleInfo',\n  validate: new SimpleSchema({\n    _id: { type: String },\n    sampleName: { type: String },\n    experimentGroup: { type: String },\n    replicaGroup: { type: String },\n    description: { type: String },\n    permissions: { type: Array },\n    'permissions.$': { type: String }\n  }).validator(),\n  applyOptions: {\n    noRetry: true\n  },\n  run({ _id, sampleName, experimentGroup, replicaGroup, description, permissions }){\n    if (! this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n    if (! Roles.userIsInRole(this.userId,'admin')){\n      throw new Meteor.Error('not-authorized');\n    }\n\n    if (permissions.length === 0){\n      permissions.push('admin')\n    }\n\n    console.log({\n      _id,sampleName,experimentGroup,replicaGroup,description,permissions\n    })\n\n    ExperimentInfo.update({\n      _id: _id\n    },{\n      $set: {\n        sampleName,\n        experimentGroup,\n        replicaGroup,\n        description,\n        permissions\n      }\n    })\n  }\n})\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/transcriptomes/updateSampleInfo.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "updateSampleInfo",
    "memberof": "imports/api/transcriptomes/updateSampleInfo.js",
    "static": true,
    "longname": "imports/api/transcriptomes/updateSampleInfo.js~updateSampleInfo",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/transcriptomes/updateSampleInfo.js",
    "importStyle": "{updateSampleInfo}",
    "description": "updateSampleInfo validated method: Update transcriptome information and groups",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.trackName",
        "description": "Name of the annotation track"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.dbType",
        "description": "Either nucl or prot"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "jobId of the makeblastdb job"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "file",
    "name": "imports/api/users/users.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\n\nimport SimpleSchema from 'simpl-schema';\n\nexport const updateUserInfo = new ValidatedMethod({\n  name: 'updateUserInfo',\n  validate: new SimpleSchema({\n    userId: { type: String },\n    update: { type: Object, blackbox: true }\n  }).validator(),\n  applyOptions: {\n    noRetry: true\n  },\n  run({ userId, update }){\n    if (! this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n    if (! Roles.userIsInRole(this.userId,'admin')){\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Meteor.users.update({_id: userId},update);\n  }\n})",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/users/users.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "updateUserInfo",
    "memberof": "imports/api/users/users.js",
    "static": true,
    "longname": "imports/api/users/users.js~updateUserInfo",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/users/users.js",
    "importStyle": "{updateUserInfo}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "file",
    "name": "imports/api/util/util.js",
    "content": "import { References } from '../genomes/reference_collection.js';\n\n/**\n * Format gff3 attribute column into key:value object.\n * @param  {String} attributeString Raw gff3 attribute column string\n * @return {Object}                 Key:value pairs of attributes.\n */\nexport const formatAttributes = attributeString => {\n  return attributeString.split(';').reduce((attributes, stringPart) => {\n    const [key, value] = stringPart.split('=')\n    if (typeof key !== 'undefined' && typeof value !== 'undefined'){\n      attributes[key] = value.split('\"').join('').split(',').map(decodeURIComponent)\n    }\n    return attributes;\n  }, {})\n}\n\n/**\n * Reverse complement a DNA string\n * @param  {String} seq String representing DNA constisting of alphabet AaCcGgTtNn\n * @return {String}     String representing DNA constisting of alphabet AaCcGgTtNn, reverse complement of input\n */\nexport const reverseComplement = seq => {\n  const comp = {  \n    'A':'T','a':'t',\n    'T':'A','t':'a',\n    'C':'G','c':'g',\n    'G':'C','g':'c',\n    'N':'N','n':'n'\n  }\n  const revSeqArray = seq.split('').reverse()\n  const revCompSeqArray = revSeqArray.map(nuc => {\n    return comp[nuc]\n  })\n  const revCompSeq = revCompSeqArray.join('')\n  return revCompSeq\n}\n\n/**\n * Convert a DNA string into a amino acid string\n * @param  {String} seq String representing DNA constisting of alphabet ACGTN\n * @return {String}     String representing the amino acid complement of input string\n */\nexport const translate = (seq) => {\n  const trans = {\n    'ACC': 'T', 'ACA': 'T', 'ACG': 'T',\n    'AGG': 'R', 'AGC': 'S', 'GTA': 'V',\n    'AGA': 'R', 'ACT': 'T', 'GTG': 'V',\n    'AGT': 'S', 'CCA': 'P', 'CCC': 'P',\n    'GGT': 'G', 'CGA': 'R', 'CGC': 'R',\n    'TAT': 'Y', 'CGG': 'R', 'CCT': 'P',\n    'GGG': 'G', 'GGA': 'G', 'GGC': 'G',\n    'TAA': '*', 'TAC': 'Y', 'CGT': 'R',\n    'TAG': '*', 'ATA': 'I', 'CTT': 'L',\n    'ATG': 'M', 'CTG': 'L', 'ATT': 'I',\n    'CTA': 'L', 'TTT': 'F', 'GAA': 'E',\n    'TTG': 'L', 'TTA': 'L', 'TTC': 'F',\n    'GTC': 'V', 'AAG': 'K', 'AAA': 'K',\n    'AAC': 'N', 'ATC': 'I', 'CAT': 'H',\n    'AAT': 'N', 'GTT': 'V', 'CAC': 'H',\n    'CAA': 'Q', 'CAG': 'Q', 'CCG': 'P',\n    'TCT': 'S', 'TGC': 'C', 'TGA': '*',\n    'TGG': 'W', 'TCG': 'S', 'TCC': 'S',\n    'TCA': 'S', 'GAG': 'E', 'GAC': 'D',\n    'TGT': 'C', 'GCA': 'A', 'GCC': 'A',\n    'GCG': 'A', 'GCT': 'A', 'CTC': 'L',\n    'GAT': 'D'}\n  const codonArray = seq.match(/.{1,3}/g)\n  const pepArray = codonArray.map(codon => {\n    let aminoAcid = 'X'\n    if (codon.indexOf('N') < 0){\n      aminoAcid = trans[codon]\n    }\n    return aminoAcid\n  })\n  const pep = pepArray.join('')\n  return pep\n}\n\n/**\n * Get nucleotide and protein sequences of all transcripts for a multiple genes (using CDS subfeatures)\n * @param  {Array<gene>} genes Array of Object representing gene-models\n * @return {Array}     Array with objects, where each object has a transcriptId, \n *                        nucleotide sequence and protein sequence field\n */\nconst getMultipleGeneSequences = genes => {\n  const seqids = genes.map(gene => {\n    return gene.seqid\n  })\n  const uniqueSeqids = [...new Set(seqids)]\n\n  console.log(uniqueSeqids)\n\n  const refSeqs = uniqueSeqids.reduce((obj,seqid,i) => {\n    obj[seqid] = References.find({\n      header: seqid\n    },{\n      sort: { start: 1 }\n    }).map(ref => {\n      return ref.seq\n    }).join('')\n    return obj\n  },{}); //this part is import, initialize reduce with empty object\n  console.log(refSeqs)\n}\n\n\n/**\n * Get nucleotide and protein sequences of all transcripts for a single gene (using CDS subfeatures)\n * @param  {Object} gene Object representing a gene-model\n * @return {Array}     Array with objects, where each object has a transcriptId, \n *                        nucleotide sequence and protein sequence field\n */\nexport const getGeneSequences = gene => {\n  //console.log(`getGeneSequences ${gene.ID}`)\n  const transcripts = gene.subfeatures.filter(subfeature => { \n    return subfeature.type === 'mRNA' \n  })\n  const sequences = transcripts.map(transcript => {\n    let cdsArray = gene.subfeatures.filter( subfeature => { \n      return subfeature.parents.indexOf(transcript.ID) >= 0 && subfeature.type === 'CDS'\n    }).sort( (a,b) => {\n      //sort CDS subfeatures on start position\n      return a.start - b.start\n    })\n\n    let rawSeq = cdsArray.map( (cds, index) => {\n      return cds.seq\n    }).join('')\n\n    const forward = gene.strand === '+';\n    const phase = forward ? cdsArray[0].phase : cdsArray[cdsArray.length - 1].phase;\n    const transcriptSeq = forward ? rawSeq : reverseComplement(rawSeq);\n\n    const isPhased = phase === 1 | phase === 2;\n    const codingSeq = isPhased ? transcriptSeq.slice(phase) : transcriptSeq;\n\n    const codingPep = translate(codingSeq.toUpperCase());\n\n    return {\n      ID: transcript.ID,\n      seq: codingSeq,\n      pep: codingPep\n    }\n  })\n  return sequences\n}\n\nexport const parseNewick = newickString => {\n  //Adapted from Jason Davies https://github.com/jasondavies/newick.js\n  const ancestors = [];\n  const tokens = newickString.split(/\\s*(;|\\(|\\)|,|:)\\s*/);\n  const geneIds = []\n  let tree = {};\n  let subtree = {};\n  tokens.forEach((token, tokenIndex) => {\n    switch(token){\n      case '(': //new branchset\n        subtree = {};\n        tree.branchset = [subtree];\n        ancestors.push(tree);\n        tree = subtree;\n        break;\n      case ',': //another branch\n        subtree = {};\n        ancestors[ancestors.length - 1].branchset.push(subtree);\n        tree = subtree;\n        break;\n      case ')': //optional name next\n        tree = ancestors.pop();\n        break;\n      case ':': //optional length next\n        break;\n      default:\n        let previousToken = tokens[tokenIndex - 1];\n        if (\n          previousToken === '(' ||\n          previousToken === ')' ||\n          previousToken === ','\n        ){\n          tree.name = token;\n          const geneId = token.split('.').slice(0,-1).join('.');\n          if (geneId.length > 0){\n            geneIds.push(geneId)\n          }\n        } else if (previousToken === ':'){\n          tree.branchLength = parseFloat(token);\n        }\n    }\n  })\n  return {\n    tree: tree,\n    geneIds: geneIds,\n    size: geneIds.length\n  };\n}\n\n\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/api/util/util.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "formatAttributes",
    "memberof": "imports/api/util/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/api/util/util.js~formatAttributes",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/util/util.js",
    "importStyle": "{formatAttributes}",
    "description": "Format gff3 attribute column into key:value object.",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "attributeString",
        "description": "Raw gff3 attribute column string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Key:value pairs of attributes."
    }
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "reverseComplement",
    "memberof": "imports/api/util/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/api/util/util.js~reverseComplement",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/util/util.js",
    "importStyle": "{reverseComplement}",
    "description": "Reverse complement a DNA string",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "seq",
        "description": "String representing DNA constisting of alphabet AaCcGgTtNn"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "String representing DNA constisting of alphabet AaCcGgTtNn, reverse complement of input"
    }
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "translate",
    "memberof": "imports/api/util/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/api/util/util.js~translate",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/util/util.js",
    "importStyle": "{translate}",
    "description": "Convert a DNA string into a amino acid string",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "seq",
        "description": "String representing DNA constisting of alphabet ACGTN"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "String representing the amino acid complement of input string"
    }
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "getMultipleGeneSequences",
    "memberof": "imports/api/util/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/api/util/util.js~getMultipleGeneSequences",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/api/util/util.js",
    "importStyle": null,
    "description": "Get nucleotide and protein sequences of all transcripts for a multiple genes (using CDS subfeatures)",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<gene>"
        ],
        "spread": false,
        "optional": false,
        "name": "genes",
        "description": "Array of Object representing gene-models"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Array with objects, where each object has a transcriptId, \n                       nucleotide sequence and protein sequence field"
    },
    "ignore": true
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "getGeneSequences",
    "memberof": "imports/api/util/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/api/util/util.js~getGeneSequences",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/util/util.js",
    "importStyle": "{getGeneSequences}",
    "description": "Get nucleotide and protein sequences of all transcripts for a single gene (using CDS subfeatures)",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "gene",
        "description": "Object representing a gene-model"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Array with objects, where each object has a transcriptId, \n                       nucleotide sequence and protein sequence field"
    }
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "parseNewick",
    "memberof": "imports/api/util/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/api/util/util.js~parseNewick",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/api/util/util.js",
    "importStyle": "{parseNewick}",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [
      {
        "name": "newickString",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"tree\": *, \"geneIds\": *, \"size\": *}"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "file",
    "name": "imports/startup/client/client-fixtures.js",
    "content": "import { Accounts } from 'meteor/accounts-base';\nimport { FlowRouter } from 'meteor/kadira:flow-router';\nimport { Session } from 'meteor/session';\n\nglobal.Buffer = global.Buffer || require(\"buffer\").Buffer;\n\nAccounts.onLogin(() => {\n  const redirect = Session.get('redirectAfterLogin');\n  if (typeof redirect !== 'undefined'){\n    FlowRouter.redirect(redirect)\n  }\n})\n\nAccounts.onLogout(() => {\n  FlowRouter.go('/login')\n})",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/startup/client/client-fixtures.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "imports/startup/client/index.js",
    "content": "//import 'bootstrap';\n//import '/node_modules/bootstrap/dist/js/bootstrap.bundle.js';\nimport './client-fixtures.js';\nimport './routes.jsx';\nimport '/imports/ui/global_stylesheets/global.scss';",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/startup/client/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "file",
    "name": "imports/startup/client/routes.jsx",
    "content": "import { FlowRouter } from 'meteor/kadira:flow-router';\n\nimport { Roles } from 'meteor/alanning:roles';\nimport { Session } from 'meteor/session';\n\nimport React from 'react';\nimport { mount } from 'react-mounter';\n\n// Import to load these templates\n\nimport MainLayout from '/imports/ui/main/MainLayout.jsx';\nimport Login from '/imports/ui/main/Login.jsx';\nimport Register from '/imports/ui/main/Register.jsx';\nimport InactiveAccountWarning from '/imports/ui/main/InactiveAccountWarning.jsx';\nimport NotFound from '/imports/ui/main/NotFound.jsx';\n\nimport Landingpage from '/imports/ui/landingpage/Landingpage.jsx';\n\nimport GeneTableCard from '/imports/ui/genelist/GeneTableCard.jsx';\n\nimport Feature from '/imports/ui/feature/Feature.jsx';\n\nimport SubmitBlast from '/imports/ui/blast/SubmitBlast.jsx';\nimport BlastResult from '/imports/ui/blast/BlastResult.jsx';\n\nimport UserProfile from '/imports/ui/user-profile/UserProfile.jsx';\n\nimport Admin from '/imports/ui/admin/Admin.jsx';\n\nimport Download from '/imports/ui/download/Download.jsx';\n\n\nconst exposedRoutes = FlowRouter.group({})\n\nconst loggedInRoutes = FlowRouter.group({\n  triggersEnter: [\n    (context, redirect) => {\n      const loggingIn = Meteor.loggingIn();\n      const userId = Meteor.userId();\n      const loggedIn = !!userId;\n      const route = FlowRouter.current();\n      if (!loggedIn && !loggingIn){\n        if (route.route.name !== 'login') {\n          Session.set('redirectAfterLogin',route.path)\n        }\n        redirect('/login');\n      }\n      const hasAccess = Roles.userIsInRole(userId, 'user');\n      if (!hasAccess && context.path !== '/profile'){\n        //redirect('/inactive-account');\n      }\n    }\n  ]\n})\n\nconst adminRoutes = loggedInRoutes.group({\n  prefix: '/admin',\n  triggersEnter: [\n    () => {\n      const isAdmin = Roles.userIsInRole(Meteor.userId(),'admin');\n      if (!isAdmin){\n        return FlowRouter.go('/')\n      }\n    }\n  ]\n})\n\nFlowRouter.notFound = {\n  action(){\n    mount(MainLayout, {\n      content: <NotFound />\n    })\n  }\n}\n\nexposedRoutes.route('/', {\n  name: 'landingpage',\n  action() {\n    mount(MainLayout, { \n      content: <Landingpage />\n    })\n  }\n})\n\nexposedRoutes.route('/login', {\n  name: 'login',\n  action() {\n    mount(MainLayout, {\n      content: <Login />\n    })\n  }\n})\n\n\nexposedRoutes.route('/register', {\n  name: 'register',\n  action() {\n    mount(MainLayout, {\n      content: <Register />\n    })\n  }\n})\n\n\nexposedRoutes.route('/download/:_id', {\n  name: 'download',\n  action() {\n    mount(MainLayout, {\n      content: <Download />\n    })\n  }\n})\n\nexposedRoutes.route('/download/file/(.*)',{});\n\n\nexposedRoutes.route('/inactive-account', {\n  name: 'inactive-account',\n  action(){\n    mount(MainLayout, {\n      content: <InactiveAccountWarning />\n    })\n  }\n})\n\nloggedInRoutes.route('/genes', {\n  name: 'genes',\n  action() {\n    mount(MainLayout, {\n      content: <GeneTableCard />\n    })\n  }\n})\n\nloggedInRoutes.route('/gene/:_id', {\n  name: 'gene',\n  action() {\n    mount(MainLayout, {\n      content: <Feature />\n    })\n  }\n})\n\n\nloggedInRoutes.route('/blast', {\n  name: 'blast',\n  action() {\n    mount(MainLayout, {\n      content: <SubmitBlast />\n    })\n  }\n})\n\nloggedInRoutes.route('/blast/:_id', {\n  name: 'blastResult',\n  action() {\n    mount(MainLayout, {\n      content: <BlastResult />\n    })\n  }\n})\n\n/*\nloggedInRoutes.route('/search=:_search', {\n  name: 'search',\n  action() {\n    BlazeLayout.render('appBody', { main: 'genelist' })\n  }\n})\n\n*/\n\n\nloggedInRoutes.route('/profile', {\n  name: 'userProfile',\n  action() {\n    mount(MainLayout, {\n      content: <UserProfile />\n    })\n  }\n})\n\n\nadminRoutes.route('/', {\n  name: 'admin',\n  action() {\n    FlowRouter.redirect('/admin/users')\n  }\n})\n\n//all admin routes have /admin as prefix\nadminRoutes.route('/:_id', {\n  name: 'admin',\n  action() {\n    mount(MainLayout, {\n      content: <Admin />\n    })\n  }\n})\n\nadminRoutes.route('/user/:_id', {\n  name: 'userProfileAdmin',\n  action() {\n    mount(MainLayout, {\n      content: <UserProfile />\n    })\n  }\n})\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/startup/client/routes.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "variable",
    "name": "exposedRoutes",
    "memberof": "imports/startup/client/routes.jsx",
    "static": true,
    "longname": "imports/startup/client/routes.jsx~exposedRoutes",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/startup/client/routes.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "name": "loggedInRoutes",
    "memberof": "imports/startup/client/routes.jsx",
    "static": true,
    "longname": "imports/startup/client/routes.jsx~loggedInRoutes",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/startup/client/routes.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "variable",
    "name": "adminRoutes",
    "memberof": "imports/startup/client/routes.jsx",
    "static": true,
    "longname": "imports/startup/client/routes.jsx~adminRoutes",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/startup/client/routes.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "imports/startup/server/index.js",
    "content": "// This defines a starting set of data to be loaded if the app is loaded with an empty db.\nimport './server-fixtures.js';\n\n// Set up some configuration for account creation;\nimport './useraccounts-configuration.js'; \n\n// This file configures the Accounts package to define the UI of the reset password email.\n//import '../imports/startup/server/reset-password-email.js';\n\n// Set up some rate limiting and other important security settings.\n//import '../imports/startup/server/security.js';\n\n// This defines all the collections, publications and methods that the application provides\n// as an API to the client.\nimport '/imports/api/api.js';",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/startup/server/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "imports/startup/server/server-fixtures.js",
    "content": "import { Meteor } from 'meteor/meteor';\n\nimport fs from 'fs';\n\nimport jobQueue from '/imports/api/jobqueue/jobqueue.js';\nimport { Attributes } from '/imports/api/genes/attribute_collection.js';\nimport { Tracks } from '/imports/api/genomes/track_collection.js';\n\nMeteor.startup( () => {\n  if ( Meteor.users.find().count() === 0 ) {\n    console.log('Adding default admin user');\n    const adminId = Accounts.createUser({\n      username: 'admin',\n      email: 'admin@none.com',\n      password: 'admin',\n      profile: {\n        first_name: 'admin',\n        last_name: 'admin',\n      }\n    });\n    Roles.addUsersToRoles(adminId,['admin','curator','user','registered']);\n\n    console.log('Adding default guest user')\n    const guestId = Accounts.createUser({\n        username: 'guest',\n        email: 'guest@none.com',\n        password: 'guest',\n        profile: {\n            first_name: 'guest',\n            last_name: 'guest',\n        }\n      });\n    Roles.addUsersToRoles(guestId,['user','registered'])\n  }\n  //add some default attributes to filter on\n  const permanentAttributes = [\n    {\n      name: 'Viewing',\n      query: 'viewing'\n    },\n    {\n      name: 'Editing',\n      query: 'editing'\n    },\n    {\n      name: 'Orthogroup',\n      query: 'orthogroup'\n    },\n    {\n      name: 'Protein domains',\n      query: 'subfeatures.protein_domains'\n    }]\n  permanentAttributes.forEach( attribute => {\n    console.log(`Adding default filter option: ${attribute.name}`)\n    Attributes.update({\n      name: attribute.name\n    },\n    {\n      $setOnInsert: {\n          name: attribute.name, \n          query: attribute.query, \n          show: true, \n          canEdit: false, \n          reserved: true,\n          allReferences: true \n      }\n    })\n  })\n\n  Tracks.find({ \n    blastdbs: { \n      $exists: true\n    }\n  }).fetch().filter(track => {\n    const hasNucDb = fs.existsSync(track.blastdbs.nuc)\n    const hasProtDb = fs.existsSync(track.blastdbs.prot)\n    return !hasProtDb || !hasNucDb\n  }).map(track => {\n    Tracks.update({\n      _id: track._id\n    },{\n      $unset: {\n        blastdbs: true\n      }\n    })\n  })\n\n\n  // Start the myJobs queue running\n  jobQueue.allow({\n    // Grant permission to admin only\n    admin: function (userId, method, params) {\n      return Roles.userIsInRole(userId,'admin')\n    }\n  });\n  return jobQueue.startJobServer();\n});\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/startup/server/server-fixtures.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "file",
    "name": "imports/startup/server/useraccounts-configuration.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Roles } from 'meteor/alanning:roles';\n\nimport Genes from '/imports/api/genes/gene_collection.js';\n\nAccounts.onCreateUser( (options,user) => {\n  console.log('onCreateUser')\n  user.roles = ['registered'];\n  if (typeof user.profile === 'undefined'){\n    user.profile = {\n      first_name: '',\n      last_name: ''\n    }\n  }\n  return user\n})\n\nAccounts.onLogout( (options) => {\n  console.log('logout',options)\n  Meteor.users.update({\n    _id: options.user._id,\n    'presence.status': 'online'\n  },{\n    $set: {\n      'presence.status': 'offline'\n    }\n  })\n\n  Genes.update({\n    'viewing': options.user._id\n  },{\n    $pull: {\n      'viewing': options.user._id\n    }\n  }, (err,res) => {\n    Genes.update({\n      'viewing': {\n        $exists: true,\n        $size: 0\n      }\n    },{\n      $unset: {\n        'viewing': 1\n      }\n    })\n  })\n  \n  //Since we are on the server, the following does not work. Need to design a 'loggedIn' template / high order component\n  //FlowRouter.redirect('/login')\n})\n\nMeteor.users.allow({\n  update(userId, doc, fields, modifier){\n    console.log('User update')\n    console.log(doc)\n    console.log(fields)\n    console.log(modifier)\n    if (userId && Roles.userIsInRole(userId, 'admin')){\n      return true\n    }\n  }\n})",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/startup/server/useraccounts-configuration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 168,
    "kind": "file",
    "name": "imports/ui/admin/Admin.jsx",
    "content": "import { withTracker } from 'meteor/react-meteor-data';\nimport { FlowRouter } from 'meteor/kadira:flow-router';\n\nimport React from 'react';\n\nimport AdminUsers from './AdminUsers.jsx';\nimport AdminGenomes from './AdminGenomes.jsx';\nimport AdminTracks from './tracks/AdminTracks.jsx';\nimport AdminAttributes from './AdminAttributes.jsx';\nimport AdminTranscriptomes from './transcriptomes/AdminTranscriptomes.jsx';\nimport AdminJobqueue from './AdminJobqueue';\n\nconst ADMIN_PAGES = {\n  users: <AdminUsers />,\n  genomes: <AdminGenomes />,\n  tracks: <AdminTracks />,\n  attributes: <AdminAttributes />,\n  transcriptomes: <AdminTranscriptomes />,\n  jobqueue: <AdminJobqueue />\n}\n\nconst Nav = (props) => {\n  return (\n    <div className=\"card-header\">\n      <a className=\"navbar-brand\" href=\"#\">Admin panel</a>\n      <ul className=\"nav nav-tabs card-header-tabs\">\n        {\n          props.pages.map(page => {\n            const url = page.toLowerCase().replace(' ','_')\n            const active = url === props.currentPage ? 'active' : '';\n            return (\n              <li key={ page } role=\"presentation\" className=\"nav-item\">\n                <a href={ `/admin/${url}` } className={`nav-link ${active}`} name={ url } onClick={props.changePage}> \n                  { page } \n                </a>\n              </li>\n            )\n          })\n        }\n      </ul>\n    </div>\n  )\n}\n\nclass Admin extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      currentPage: props.currentPage\n    }\n  }\n\n  changePage = (event) => {\n    this.setState({\n      currentPage: event.target.name\n    })\n  }\n\n  render(){\n    console.log(this.state)\n    const pages = ['Users','User Groups','Genomes','Tracks','Transcriptomes','Attributes','Jobqueue']\n    return (\n      <div className=\"container\">\n        <div className=\"card admin-panel\">\n          <Nav pages = { pages } currentPage = {this.state.currentPage} changePage = {this.changePage} />\n          {\n            ADMIN_PAGES[this.state.currentPage]\n          }\n        </div>\n      </div>\n      \n    )\n  }\n}\n\nexport default withTracker(props => {\n  const page = FlowRouter.getParam('_id')\n  return {\n    currentPage: page\n  }\n})(Admin)",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/admin/Admin.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 169,
    "kind": "variable",
    "name": "ADMIN_PAGES",
    "memberof": "imports/ui/admin/Admin.jsx",
    "static": true,
    "longname": "imports/ui/admin/Admin.jsx~ADMIN_PAGES",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/admin/Admin.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"users\": *, \"genomes\": *, \"tracks\": *, \"attributes\": *, \"transcriptomes\": *, \"jobqueue\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 170,
    "kind": "function",
    "name": "Nav",
    "memberof": "imports/ui/admin/Admin.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/admin/Admin.jsx~Nav",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/admin/Admin.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 171,
    "kind": "class",
    "name": "Admin",
    "memberof": "imports/ui/admin/Admin.jsx",
    "static": true,
    "longname": "imports/ui/admin/Admin.jsx~Admin",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/admin/Admin.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 172,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/admin/Admin.jsx~Admin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/Admin.jsx~Admin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true
  },
  {
    "__docId__": 173,
    "kind": "member",
    "name": "state",
    "memberof": "imports/ui/admin/Admin.jsx~Admin",
    "static": false,
    "longname": "imports/ui/admin/Admin.jsx~Admin#state",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "{\"currentPage\": *}"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "changePage",
    "memberof": "imports/ui/admin/Admin.jsx~Admin",
    "static": false,
    "longname": "imports/ui/admin/Admin.jsx~Admin#changePage",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/admin/Admin.jsx~Admin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/Admin.jsx~Admin#render",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "file",
    "name": "imports/ui/admin/AdminAttributes.jsx",
    "content": "import { withTracker } from 'meteor/react-meteor-data';\n\nimport React from 'react';\n\nimport { Attributes } from '/imports/api/genes/attribute_collection.js';\nimport { Tracks } from '/imports/api/genomes/track_collection.js';\nimport { scanGeneAttributes } from '/imports/api/genes/scan_attributes.js';\n\nclass AdminAttributes extends React.Component {\n  constructor(props){\n    super(props)\n  }\n\n  scanAttributes = (event) => {\n    event.preventDefault();\n    console.log('clicked scanAttributes')\n    this.props.tracks.forEach(track => {\n      console.log(track)\n      scanGeneAttributes.call({trackName: track.trackName})\n    })\n  }\n\n  render(){\n    return (\n      this.props.loading ? \n      <div> Loading </div> :\n      <div>\n        <hr/>\n        <button type='button' className='btn btn-warning' onClick={this.scanAttributes}>\n          <i className=\"fa fa-warning\" aria-hidden=\"true\"/> Scan all genes for attributes\n        </button>\n        <hr/>\n        <ul className='list-group'>\n        {\n          this.props.attributes.map(attribute => {\n            return (\n              <li className='list-group-item' key={attribute._id}>\n                <p>\n                  <a href={`/admin/attribute/${attribute.name}`}> {attribute.name} </a>\n                </p>\n                <ul className='list-group'>\n                  <li className='list-group-item'>\n                    <small>{`Show: ${attribute.show}`}</small>\n                  </li>\n                  <li className='list-group-item'>\n                    <small>{`Can edit: ${attribute.canEdit}`}</small>\n                  </li>\n                  {\n                    attribute.allReferences &&\n                    <li className='list-group-item'>\n                      <small>{`All references: ${attribute.allReferences}`}</small>\n                    </li>\n                  }\n                  {\n                    attribute.references &&\n                    <li className='list-group-item'>\n                      <small>{`References: ${attribute.references}`}</small>\n                    </li>\n                  }\n                </ul>\n              </li>\n            )\n          })\n        }\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default withTracker(props => {\n  const attributeSubscription = Meteor.subscribe('attributes');\n  const trackSubscription = Meteor.subscribe('tracks');\n  return {\n    attributes: Attributes.find({}).fetch(),\n    tracks: Tracks.find({}).fetch(),\n    loading: !attributeSubscription.ready() || !trackSubscription.ready()\n  }\n})(AdminAttributes)",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/admin/AdminAttributes.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 177,
    "kind": "class",
    "name": "AdminAttributes",
    "memberof": "imports/ui/admin/AdminAttributes.jsx",
    "static": true,
    "longname": "imports/ui/admin/AdminAttributes.jsx~AdminAttributes",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/admin/AdminAttributes.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 178,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/admin/AdminAttributes.jsx~AdminAttributes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/AdminAttributes.jsx~AdminAttributes#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "scanAttributes",
    "memberof": "imports/ui/admin/AdminAttributes.jsx~AdminAttributes",
    "static": false,
    "longname": "imports/ui/admin/AdminAttributes.jsx~AdminAttributes#scanAttributes",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/admin/AdminAttributes.jsx~AdminAttributes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/AdminAttributes.jsx~AdminAttributes#render",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "file",
    "name": "imports/ui/admin/AdminGenomes.jsx",
    "content": "import { withTracker } from 'meteor/react-meteor-data';\n\nimport React from 'react';\n\nimport { ReferenceInfo } from '/imports/api/genomes/reference_collection.js';\n\nclass AdminGenomes extends React.Component {\n  constructor(props){\n    super(props)\n  }\n  render(){\n    return (\n      this.props.loading ? \n      <div> Loading </div> :\n      <div>\n        <hr/>\n        <ul className='list-group'>\n        {\n          this.props.genomes.map(genome => {\n            console.log(genome)\n            return (\n              <li className='list-group-item' key={genome._id}>\n                <p>\n                  <a href={`/admin/reference/${genome.referenceName}`}> {genome.referenceName} </a>\n                  <small>{`${genome.organism} -- ${genome.description}`}</small>\n                </p>\n              </li>\n            )\n          })\n        }\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default withTracker(props => {\n  const subscription = Meteor.subscribe('referenceInfo')\n  return {\n    genomes: ReferenceInfo.find({}).fetch(),\n    loading: !subscription.ready()\n  }\n})(AdminGenomes)",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/admin/AdminGenomes.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 182,
    "kind": "class",
    "name": "AdminGenomes",
    "memberof": "imports/ui/admin/AdminGenomes.jsx",
    "static": true,
    "longname": "imports/ui/admin/AdminGenomes.jsx~AdminGenomes",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/admin/AdminGenomes.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 183,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/admin/AdminGenomes.jsx~AdminGenomes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/AdminGenomes.jsx~AdminGenomes#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/admin/AdminGenomes.jsx~AdminGenomes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/AdminGenomes.jsx~AdminGenomes#render",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "file",
    "name": "imports/ui/admin/AdminJobqueue.jsx",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { withTracker } from 'meteor/react-meteor-data';\n\nimport React from 'react';\n\nimport jobQueue from '/imports/api/jobqueue/jobqueue.js';\n\nconst Status = (props) => {\n  let labelClass = 'badge ';\n  switch(props.status){\n    case 'completed':\n      labelClass += 'badge-success'\n      break\n    case 'cancelled':\n      labelClass += 'badge-warning'\n      break\n    case 'failed':\n      labelClass += 'badge-danger'\n      break\n    case 'running':\n      labelClass += 'badge-primary'\n      break\n    default:\n      labelClass += 'badge-light'\n  }\n  return (\n    <span className={labelClass}> {props.status} </span>\n  )\n}\n\nexport const JobProgressBar = ({ job, loading }) => {\n  if (loading){\n    return null\n  }\n  //rounding can make a percentage of 100 while job is not finished, 99% looks better in that case\n  let percent = Math.round(job.progress.percent)\n  if (percent === 100){\n    percent -= 1\n  }\n  return (\n    <div className = 'progress'>\n      <div \n        className = 'progress-bar progress-bar-default'\n        role = 'progressbar'\n        aria-valuenow = {percent}\n        aria-valuemin='0'\n        aria-valuemax='100'\n        style={{width:`${percent}%`}}\n      >\n        {`${percent}%`}\n      </div>\n    </div>\n  )\n} \n\nclass AdminJobqueue extends React.Component {\n  constructor(props){\n    super(props)\n  }\n\n  reRunJob = (event) => {\n    jobId = event.target.name\n    jobQueue.getJob(jobId, (err, job) => {\n      job.rerun();\n    });\n  }\n\n  render(){\n    return (\n      this.props.loading ? \n      <div> Loading </div> :\n      <div>\n        <hr/>\n        <ul className='list-group'>\n        {\n          this.props.jobs.map(job => {\n            console.log(job)\n            return (\n              <li className='list-group-item' key={job._id}>\n                <p>\n                  <Status status={job.status} />\n                  &nbsp;{job.type}\n                  <small>\n                    &nbsp;job\n                    <a href={`/admin/job/${job._id}`}>\n                      &nbsp;{job._id}\n                    </a>\n                  </small>\n                  <button \n                    type='button' \n                    className='btn btn-default btn-sm pull-right'\n                    onClick={this.reRunJob}\n                    name={job._id}\n                  >Rerun</button>\n                </p>\n                <ul className='list-group'>\n                  <li className='list-group-item'>\n                    <small>{`Created: ${job.created}`}</small>\n                  </li>\n                  <li className='list-group-item'>\n                    <small>{`User: ${job.user}`}</small>\n                  </li>\n                  <li className='list-group-item'>\n                    <small>\n                      <JobProgressBar job = {job} />\n                    </small>\n                  </li>\n                </ul>\n              </li>\n            )\n          })\n        }\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default withTracker(props => {\n  const subscription = Meteor.subscribe('jobQueue')\n  return {\n    jobs: jobQueue.find({}).fetch(),\n    loading: !subscription.ready()\n  }\n})(AdminJobqueue)",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/admin/AdminJobqueue.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 186,
    "kind": "function",
    "name": "Status",
    "memberof": "imports/ui/admin/AdminJobqueue.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/admin/AdminJobqueue.jsx~Status",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/admin/AdminJobqueue.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 187,
    "kind": "function",
    "name": "JobProgressBar",
    "memberof": "imports/ui/admin/AdminJobqueue.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/admin/AdminJobqueue.jsx~JobProgressBar",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/admin/AdminJobqueue.jsx",
    "importStyle": "{JobProgressBar}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"job\": *, \"loading\": *}"
        ],
        "defaultRaw": {
          "job": null,
          "loading": null
        },
        "defaultValue": "{\"job\":null,\"loading\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "class",
    "name": "AdminJobqueue",
    "memberof": "imports/ui/admin/AdminJobqueue.jsx",
    "static": true,
    "longname": "imports/ui/admin/AdminJobqueue.jsx~AdminJobqueue",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/admin/AdminJobqueue.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 189,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/admin/AdminJobqueue.jsx~AdminJobqueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/AdminJobqueue.jsx~AdminJobqueue#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "reRunJob",
    "memberof": "imports/ui/admin/AdminJobqueue.jsx~AdminJobqueue",
    "static": false,
    "longname": "imports/ui/admin/AdminJobqueue.jsx~AdminJobqueue#reRunJob",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/admin/AdminJobqueue.jsx~AdminJobqueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/AdminJobqueue.jsx~AdminJobqueue#render",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "file",
    "name": "imports/ui/admin/AdminUsers.jsx",
    "content": "import { withTracker } from 'meteor/react-meteor-data';\nimport { FlowRouter } from 'meteor/kadira:flow-router';\n\nimport React from 'react';\n\nclass AdminUsers extends React.Component {\n  constructor(props){\n    super(props)\n  }\n  render(){\n    return (\n      <div>\n        <hr/>\n        <ul className='list-group'>\n        {\n          this.props.users.map(user => {\n            console.log(user)\n            return (\n              <li className='list-group-item' key={user.username}>\n                <p>\n                  <a href={`/admin/user/${user._id}`}> {user.username} </a>\n                  <small>{`${user.profile.first_name} ${user.profile.last_name}`}</small>\n                </p>\n              </li>\n            )\n          })\n        }\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default withTracker(props => {\n  Meteor.subscribe('users')\n  return {\n    users: Meteor.users.find({}).fetch()\n  }\n})(AdminUsers)",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/admin/AdminUsers.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 193,
    "kind": "class",
    "name": "AdminUsers",
    "memberof": "imports/ui/admin/AdminUsers.jsx",
    "static": true,
    "longname": "imports/ui/admin/AdminUsers.jsx~AdminUsers",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/admin/AdminUsers.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 194,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/admin/AdminUsers.jsx~AdminUsers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/AdminUsers.jsx~AdminUsers#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/admin/AdminUsers.jsx~AdminUsers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/AdminUsers.jsx~AdminUsers#render",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "imports/ui/admin/tracks/AdminTrackInfo.jsx",
    "content": "import React from 'react';\n\nimport TrackPermissionSelect from './TrackPermissionSelect.jsx';\nimport BlastDatabaseButtons from './BlastDatabaseButtons.jsx';\n\nconst AdminTrackInfo = ({ track, allRoles }) => {\n  return (\n    <li className='list-group-item'>\n      <a href={`/admin/track/${track.trackName}`}> {track.trackName} </a>\n      <small>{`Reference: ${track.reference}`}</small>\n      <BlastDatabaseButtons track={track} />\n      \n      <TrackPermissionSelect\n        name='track-permissions-select'\n        trackName={track.trackName}\n        value={track.permissions}\n        options={allRoles.map(role => { return {value: role, label: role} })}\n        multi={true}\n      />\n    </li>\n  )\n}\n\nexport default AdminTrackInfo",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/admin/tracks/AdminTrackInfo.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "function",
    "name": "AdminTrackInfo",
    "memberof": "imports/ui/admin/tracks/AdminTrackInfo.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/admin/tracks/AdminTrackInfo.jsx~AdminTrackInfo",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/admin/tracks/AdminTrackInfo.jsx",
    "importStyle": "AdminTrackInfo",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"track\": *, \"allRoles\": *}"
        ],
        "defaultRaw": {
          "track": null,
          "allRoles": null
        },
        "defaultValue": "{\"track\":null,\"allRoles\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "file",
    "name": "imports/ui/admin/tracks/AdminTracks.jsx",
    "content": "import { withTracker } from 'meteor/react-meteor-data';\n\nimport React from 'react';\n\nimport { Tracks } from '/imports/api/genomes/track_collection.js';\n\nimport AdminTrackInfo from './AdminTrackInfo.jsx';\n\nclass AdminTracks extends React.Component {\n  constructor(props){\n    super(props)\n  }\n\n  render(){\n    const { tracks, ...props } = this.props;\n    return (\n      props.loading ? \n      <div> Loading </div> :\n      <div>\n        <hr/>\n        <ul className='list-group'>\n        {\n          tracks.map(track => {\n            return <AdminTrackInfo key={track.trackName} track={track} {...props}/>\n          })\n        }\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default withTracker(props => {\n  const trackSubscription = Meteor.subscribe('tracks')\n  const userSubscription = Meteor.subscribe('users');\n  const allRoles = Meteor.users.find({}).fetch().reduce((roles, user) => {\n    return roles.concat(user.roles)\n  },[])\n  const uniqueRoles = [...new Set(allRoles)]\n  return {\n    tracks: Tracks.find({}).fetch(),\n    loading: !trackSubscription.ready() || !userSubscription.ready(),\n    allRoles: uniqueRoles\n  }\n})(AdminTracks)",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/admin/tracks/AdminTracks.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 199,
    "kind": "class",
    "name": "AdminTracks",
    "memberof": "imports/ui/admin/tracks/AdminTracks.jsx",
    "static": true,
    "longname": "imports/ui/admin/tracks/AdminTracks.jsx~AdminTracks",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/admin/tracks/AdminTracks.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 200,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/admin/tracks/AdminTracks.jsx~AdminTracks",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/tracks/AdminTracks.jsx~AdminTracks#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/admin/tracks/AdminTracks.jsx~AdminTracks",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/tracks/AdminTracks.jsx~AdminTracks#render",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "file",
    "name": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx",
    "content": "import React from 'react';\n\nimport { makeBlastDb } from '/imports/api/blast/makeblastdb.js';\nimport { removeBlastDb } from '/imports/api/blast/removeblastdb.js';\n\nimport BlastDatabaseProgressBar from './BlastDatabaseProgressBar.jsx';\n\nclass MakeDbButton extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      makeBlastDbJob: undefined\n    }\n  }\n\n  makeBlastDb = () => {\n    makeBlastDb.call({\n      trackName: this.props.track.trackName\n    },(err,res) => {\n      if(err){\n        console.log(err)\n        alert(err)\n      }\n      console.log(res)\n      this.setState({\n        makeBlastDbJob: res\n      })\n    })\n  }\n\n  render(){\n    return (\n      this.state.makeBlastDbJob ?\n      <BlastDatabaseProgressBar jobId={this.state.makeBlastDbJob} /> :\n      <button \n        type = 'button' \n        className = 'btn btn-sm btn-outline-secondary makeblastdb pull-right'\n        onClick = {this.makeBlastDb}>\n        <span className = 'glyphicon glyphicon-hdd' aria-hidden = 'true' />\n        &nbsp;Make blast DBs\n      </button>\n    )\n  }\n}\n\nclass RemoveDbButton extends React.Component {\n  constructor(props){\n    super(props)\n  }\n\n  removeBlastDb = () => {\n    removeBlastDb.call({\n      trackName: this.props.track.trackName\n    }, (err,res) => {\n      if (err){\n        console.log(err)\n        alert(err)\n      } \n      if(res){\n        console.log(res)\n      }\n    })\n  }\n\n  render(){\n    return (\n      <button \n        type = 'button' \n        className = 'btn btn-sm btn-danger makeblastdb pull-right'\n        onClick = {this.removeBlastDb}>\n        <span className = 'glyphicon glyphicon-remove' aria-hidden = 'true' />\n        &nbsp;Delete blast DBs\n      </button>\n    )\n  }\n}\n\nconst BlastDatabaseButtons = ({ track }) => {\n  return track.hasOwnProperty('blastdbs') ?\n    <RemoveDbButton track={track} /> :\n    <MakeDbButton track={track} />\n}\n\nexport default BlastDatabaseButtons\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/admin/tracks/BlastDatabaseButtons.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 203,
    "kind": "class",
    "name": "MakeDbButton",
    "memberof": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx",
    "static": true,
    "longname": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx~MakeDbButton",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/admin/tracks/BlastDatabaseButtons.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 204,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx~MakeDbButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx~MakeDbButton#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "state",
    "memberof": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx~MakeDbButton",
    "static": false,
    "longname": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx~MakeDbButton#state",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{\"makeBlastDbJob\": *}"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "makeBlastDb",
    "memberof": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx~MakeDbButton",
    "static": false,
    "longname": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx~MakeDbButton#makeBlastDb",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx~MakeDbButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx~MakeDbButton#render",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "class",
    "name": "RemoveDbButton",
    "memberof": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx",
    "static": true,
    "longname": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx~RemoveDbButton",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/admin/tracks/BlastDatabaseButtons.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 209,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx~RemoveDbButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx~RemoveDbButton#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "removeBlastDb",
    "memberof": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx~RemoveDbButton",
    "static": false,
    "longname": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx~RemoveDbButton#removeBlastDb",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx~RemoveDbButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx~RemoveDbButton#render",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "function",
    "name": "BlastDatabaseButtons",
    "memberof": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/admin/tracks/BlastDatabaseButtons.jsx~BlastDatabaseButtons",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/admin/tracks/BlastDatabaseButtons.jsx",
    "importStyle": "BlastDatabaseButtons",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"track\": *}"
        ],
        "defaultRaw": {
          "track": null
        },
        "defaultValue": "{\"track\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "imports/ui/admin/tracks/BlastDatabaseProgressBar.jsx",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { withTracker } from 'meteor/react-meteor-data';\n\nimport React from 'react';\n\nimport jobQueue from '/imports/api/jobqueue/jobqueue.js';\nimport { JobProgressBar } from '/imports/ui/admin/AdminJobqueue.jsx';\n\nconst BlastDatabaseProgressBar = withTracker(({jobId}) => {\n  const jobQueueSub = Meteor.subscribe('jobQueue');\n  const loading = !jobQueueSub.ready();\n  const job = jobQueue.findOne({_id: jobId})\n  return {\n    job,\n    loading\n  }\n})(JobProgressBar)\n\nexport default BlastDatabaseProgressBar",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/admin/tracks/BlastDatabaseProgressBar.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "variable",
    "name": "BlastDatabaseProgressBar",
    "memberof": "imports/ui/admin/tracks/BlastDatabaseProgressBar.jsx",
    "static": true,
    "longname": "imports/ui/admin/tracks/BlastDatabaseProgressBar.jsx~BlastDatabaseProgressBar",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/admin/tracks/BlastDatabaseProgressBar.jsx",
    "importStyle": "BlastDatabaseProgressBar",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "file",
    "name": "imports/ui/admin/tracks/TrackPermissionSelect.jsx",
    "content": "import React from 'react';\nimport { Creatable as Select } from 'react-select';\nimport { updateTrackPermissions } from '/imports/api/genomes/updateTrackPermissions.js';\n\n\nexport default class TrackPermissionSelect extends React.Component {\n  constructor(props){\n    super(props)\n  }\n\n  selectPermissions = permissions => {\n    updateTrackPermissions.call({\n      trackName: this.props.trackName,\n      permissions: permissions.map(permission => permission.value)\n    }, (err,res) => {\n      if (err){\n        console.log(err)\n        alert(err)\n      }\n    })\n  }\n\n  render(){\n    return (\n      <Select\n        name={this.props.name}\n        value={this.props.value}\n        options={this.props.options}\n        onChange={this.selectPermissions}\n        multi={true}\n      />\n    )\n  }\n}",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/admin/tracks/TrackPermissionSelect.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 216,
    "kind": "class",
    "name": "TrackPermissionSelect",
    "memberof": "imports/ui/admin/tracks/TrackPermissionSelect.jsx",
    "static": true,
    "longname": "imports/ui/admin/tracks/TrackPermissionSelect.jsx~TrackPermissionSelect",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/admin/tracks/TrackPermissionSelect.jsx",
    "importStyle": "TrackPermissionSelect",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 217,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/admin/tracks/TrackPermissionSelect.jsx~TrackPermissionSelect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/tracks/TrackPermissionSelect.jsx~TrackPermissionSelect#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "selectPermissions",
    "memberof": "imports/ui/admin/tracks/TrackPermissionSelect.jsx~TrackPermissionSelect",
    "static": false,
    "longname": "imports/ui/admin/tracks/TrackPermissionSelect.jsx~TrackPermissionSelect#selectPermissions",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/admin/tracks/TrackPermissionSelect.jsx~TrackPermissionSelect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/tracks/TrackPermissionSelect.jsx~TrackPermissionSelect#render",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "file",
    "name": "imports/ui/admin/transcriptomes/AdminTranscriptomes.jsx",
    "content": "import { withTracker } from 'meteor/react-meteor-data';\n\nimport React from 'react';\nimport { groupBy } from 'lodash';\nimport update from 'immutability-helper';\n\nimport { isEqual, omit } from 'lodash';\n\nimport { ExperimentInfo } from '/imports/api/transcriptomes/transcriptome_collection.js';\nimport { Tracks } from '/imports/api/genomes/track_collection.js';\n\nimport { updateSampleInfo } from '/imports/api/transcriptomes/updateSampleInfo.js';\n\nimport TrackExperiments from './TrackExperiments.jsx';\n\nimport './AdminTranscriptomes.scss';\n\nclass AdminTranscriptomes extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      expanded: []\n    }\n  }\n\n  toggleExpand = event => {\n    event.preventDefault();\n    const trackName = event.target.id;\n    const index = this.state.expanded.indexOf(trackName)\n    const operation = index < 0 ? { $push: [trackName] } : { $splice : [[index]] };\n    const newState = update(this.state, { expanded: operation })\n   \n    this.setState(newState);\n  }\n\n  render(){\n    return (\n      this.props.loading ? \n      <div> Loading </div> :\n      <div>\n        <hr/>\n        <ul className='list-group'>\n        {\n          this.props.tracks.map(track => {\n            const trackSamples = this.props.experiments.filter(experiment => {\n              return experiment.track === track.trackName;\n            })\n            const expanded = this.state.expanded.indexOf(track.trackName) >= 0;\n            return (\n              <li key={track.trackName} className='list-group-item experiment-track'>\n                <input \n                  type='submit' \n                  className='fa btn btn-sm btn-outline-dark' \n                  value={ expanded ? '\\uf068' : '\\uf067' } \n                  id={track.trackName}\n                  onClick={this.toggleExpand} />\n                <small className='text-muted'>&nbsp;Annotation track: </small>\n                {track.trackName}  \n                <span className='badge badge-dark pull-right'>{trackSamples.length} samples</span>\n                {\n                  expanded && <TrackExperiments samples={trackSamples} roles={this.props.allRoles}/>\n                }\n              </li>\n            )\n          })\n        }\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default withTracker(props => {\n  const expInfoSub = Meteor.subscribe('experimentInfo');\n  const trackSub = Meteor.subscribe('tracks');\n  const userSub = Meteor.subscribe('users');\n  const allRoles = Meteor.users.find({}).fetch().reduce((roles, user) => {\n    return roles.concat(user.roles)\n  },[])\n  const uniqueRoles = [...new Set(allRoles)]\n  return {\n    experiments: ExperimentInfo.find({}).fetch(),\n    tracks: Tracks.find({}).fetch(),\n    loading: !expInfoSub.ready() || !trackSub.ready() || !userSub.ready(),\n    allRoles: uniqueRoles\n  }\n})(AdminTranscriptomes)",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/admin/transcriptomes/AdminTranscriptomes.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 221,
    "kind": "class",
    "name": "AdminTranscriptomes",
    "memberof": "imports/ui/admin/transcriptomes/AdminTranscriptomes.jsx",
    "static": true,
    "longname": "imports/ui/admin/transcriptomes/AdminTranscriptomes.jsx~AdminTranscriptomes",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/admin/transcriptomes/AdminTranscriptomes.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 222,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/admin/transcriptomes/AdminTranscriptomes.jsx~AdminTranscriptomes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/AdminTranscriptomes.jsx~AdminTranscriptomes#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "state",
    "memberof": "imports/ui/admin/transcriptomes/AdminTranscriptomes.jsx~AdminTranscriptomes",
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/AdminTranscriptomes.jsx~AdminTranscriptomes#state",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "{\"expanded\": *}"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "toggleExpand",
    "memberof": "imports/ui/admin/transcriptomes/AdminTranscriptomes.jsx~AdminTranscriptomes",
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/AdminTranscriptomes.jsx~AdminTranscriptomes#toggleExpand",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/admin/transcriptomes/AdminTranscriptomes.jsx~AdminTranscriptomes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/AdminTranscriptomes.jsx~AdminTranscriptomes#render",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "file",
    "name": "imports/ui/admin/transcriptomes/ExperimentGroup.jsx",
    "content": "import React from 'react';\nimport { groupBy } from 'lodash';\nimport update from 'immutability-helper';\n\nimport SampleInfo from './SampleInfo.jsx';\n\nexport default class ExperimentGroup extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      expanded: []\n    }\n  }  \n\n  toggleExpand = event => {\n    const groupName = event.target.id;\n    const index = this.state.expanded.indexOf(groupName)\n    const operation = index < 0 ? { $push: [groupName] } : { $splice : [[index]] };\n    const newState = update(this.state, { expanded: operation })\n   \n    this.setState(newState);\n  }\n\n  render(){\n    const replicaGroups = groupBy(this.props.samples, 'replicaGroup');\n\n    return (\n      <ul className='list-group'>\n        {\n          Object.entries(replicaGroups).map(entry => {\n            const [groupName, groupSamples] = entry;\n            const expanded = this.state.expanded.indexOf(groupName) >= 0;\n            return (\n              <li key={groupName} className='list-group-item replica-group'>\n                <input \n                  type='submit' \n                  className='fa btn btn-sm btn-outline-dark' \n                  value={ expanded ? '\\uf068' : '\\uf067' }\n                  id={groupName}\n                  onClick={this.toggleExpand} />\n                <small className='text-muted'>&nbsp;Replica group: </small>\n                {groupName} \n                <span className='badge badge-dark pull-right'>{groupSamples.length} samples</span>\n                \n                {\n                  expanded && \n                  <ul className='list-group'>\n                    {\n                      groupSamples.map(sample => {\n                        return <SampleInfo \n                          key={sample._id} \n                          sample={sample} \n                          allSamples={this.props.allSamples}\n                          roles={this.props.roles}\n                        />\n                      })\n                    }\n                  </ul>\n                }\n              </li>\n            )\n          })\n        }\n      </ul>\n    )\n  }\n}",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/admin/transcriptomes/ExperimentGroup.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 227,
    "kind": "class",
    "name": "ExperimentGroup",
    "memberof": "imports/ui/admin/transcriptomes/ExperimentGroup.jsx",
    "static": true,
    "longname": "imports/ui/admin/transcriptomes/ExperimentGroup.jsx~ExperimentGroup",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/admin/transcriptomes/ExperimentGroup.jsx",
    "importStyle": "ExperimentGroup",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 228,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/admin/transcriptomes/ExperimentGroup.jsx~ExperimentGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/ExperimentGroup.jsx~ExperimentGroup#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 229,
    "kind": "member",
    "name": "state",
    "memberof": "imports/ui/admin/transcriptomes/ExperimentGroup.jsx~ExperimentGroup",
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/ExperimentGroup.jsx~ExperimentGroup#state",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"expanded\": *}"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "toggleExpand",
    "memberof": "imports/ui/admin/transcriptomes/ExperimentGroup.jsx~ExperimentGroup",
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/ExperimentGroup.jsx~ExperimentGroup#toggleExpand",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/admin/transcriptomes/ExperimentGroup.jsx~ExperimentGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/ExperimentGroup.jsx~ExperimentGroup#render",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "file",
    "name": "imports/ui/admin/transcriptomes/SampleInfo.jsx",
    "content": "import React from 'react';\n\nimport { Creatable as Select } from 'react-select';\n\nclass EditSample extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = this.props.sample\n  }\n\n  handleChange = event => {\n    const key = event.target.name;\n    const value = event.target.value;\n    console.log(key,value)\n    this.setState({\n      [key]: value\n    })\n  }\n\n  saveChange = event => {\n    console.log('saveChange')\n    if (isEqual(this.state, this.props.sample)){\n      this.props.toggleEdit(event)\n    } else {\n      const props = omit(this.state, ['track'])\n      updateSampleInfo.call(props,(err,res) =>{\n        if (err) console.log(err)\n        this.props.toggleEdit(event);\n      })\n    }\n  }\n\n  cancelChange = event => {\n    this.props.toggleEdit(event)\n  }\n\n  render(){\n    const allReplicaGroups = new Set(this.props.allSamples.map(sample => sample.replicaGroup))\n    const replicaGroupOptions = Array.from(allReplicaGroups).map(group => ({ value: group, label: group }) )\n    replicaGroupOptions.push({\n      value: this.state.replicaGroup,\n      label: this.state.replicaGroup\n    })\n\n    const allExperimentGroups = new Set(this.props.allSamples.map(sample => sample.experimentGroup))\n    const experimentGroupOptions = Array.from(allExperimentGroups).map(group => ({ value: group, label: group }) )\n    experimentGroupOptions.push({\n      value: this.state.experimentGroup,\n      label: this.state.experimentGroup\n    })\n\n    return (\n      <div>\n        <input \n          type='button' \n          className='fa btn btn-xs btn-success pull-right save-change' \n          value={'\\uf00c'}\n          onClick={this.saveChange} />\n        <input \n          type='button' \n          className='fa btn btn-xs btn-danger pull-right save-change' \n          value={'\\uf00d'}\n          onClick={this.cancelChange} />\n\n        <div className='form-group'>\n          <label htmlFor='sampleName'>Sample name</label>\n          <input \n            name='sampleName' \n            onChange={this.handleChange}\n            className='form-control'\n            value={this.state.sampleName} />\n        </div>\n        <div className='form-group'>\n          <label htmlFor='experimentGroup'>Experiment group</label>\n          <Select\n            name='experimentGroup'\n            value={this.state.experimentGroup}\n            options={experimentGroupOptions}\n            onChange={val => {this.handleChange({target:{name:'experimentGroup',value:val.value}})}} />\n        </div>\n        <div className='form-group'>\n          <label htmlFor='replicaGroup'>Replica group</label>\n          <Select\n            name='replicaGroup'\n            value={this.state.replicaGroup}\n            options={replicaGroupOptions}\n            onChange={val => {this.handleChange({target:{name:'replicaGroup',value:val.value}})}} />\n        </div>\n        <div className='form-group'>\n          <label htmlFor='permissions'>Permissions</label>\n          <Select\n            name='permissions'\n            value={this.state.permissions}\n            options={this.props.roles.map(role => { return { label: role, value: role } }) }\n            onChange={val => {this.handleChange({target:{name:'permissions',value:val.map(v => v.value)}})}} \n            multi={true} />\n        </div>\n        <div className='form-group'>\n          <label htmlFor='description'>Description</label>\n          <textarea \n            name='description' \n            onChange={this.handleChange}\n            className='form-control'\n            rows='2' \n            value={this.state.description} />\n        </div>\n      </div>\n    )\n  }\n}\n\nconst DisplaySample = ({ sampleName, description, toggleEdit}) => {\n  return (\n    <div>\n      <input \n        type='submit' \n        className='fa btn btn-xs btn-default pull-right' \n        value={'\\uf013'}\n        onClick={toggleEdit} />\n      <p>\n        {sampleName}<br/>\n        {description}\n      </p>\n    </div>\n  )\n}\n\nexport default class SampleInfo extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      editing: false\n    }\n  }\n\n  toggleEdit = event => {\n    event.preventDefault()\n    this.setState({\n      editing: !this.state.editing\n    })\n  }\n\n  render(){\n    return (\n      <li className='list-group-item sample-info'>\n       {\n        this.state.editing ?\n        <EditSample toggleEdit={this.toggleEdit} {...this.props} /> :\n        <DisplaySample \n          sampleName={this.props.sample.sampleName} \n          description={this.props.sample.description} \n          toggleEdit={this.toggleEdit} \n          roles={this.props.roles}/>\n      }\n      </li>\n    )\n  }\n}\n\n\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/admin/transcriptomes/SampleInfo.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "class",
    "name": "EditSample",
    "memberof": "imports/ui/admin/transcriptomes/SampleInfo.jsx",
    "static": true,
    "longname": "imports/ui/admin/transcriptomes/SampleInfo.jsx~EditSample",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/admin/transcriptomes/SampleInfo.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 234,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/admin/transcriptomes/SampleInfo.jsx~EditSample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/SampleInfo.jsx~EditSample#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "state",
    "memberof": "imports/ui/admin/transcriptomes/SampleInfo.jsx~EditSample",
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/SampleInfo.jsx~EditSample#state",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "handleChange",
    "memberof": "imports/ui/admin/transcriptomes/SampleInfo.jsx~EditSample",
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/SampleInfo.jsx~EditSample#handleChange",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "saveChange",
    "memberof": "imports/ui/admin/transcriptomes/SampleInfo.jsx~EditSample",
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/SampleInfo.jsx~EditSample#saveChange",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "cancelChange",
    "memberof": "imports/ui/admin/transcriptomes/SampleInfo.jsx~EditSample",
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/SampleInfo.jsx~EditSample#cancelChange",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/admin/transcriptomes/SampleInfo.jsx~EditSample",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/SampleInfo.jsx~EditSample#render",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "function",
    "name": "DisplaySample",
    "memberof": "imports/ui/admin/transcriptomes/SampleInfo.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/admin/transcriptomes/SampleInfo.jsx~DisplaySample",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/admin/transcriptomes/SampleInfo.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"sampleName\": *, \"description\": *, \"toggleEdit\": *}"
        ],
        "defaultRaw": {
          "sampleName": null,
          "description": null,
          "toggleEdit": null
        },
        "defaultValue": "{\"sampleName\":null,\"description\":null,\"toggleEdit\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 241,
    "kind": "class",
    "name": "SampleInfo",
    "memberof": "imports/ui/admin/transcriptomes/SampleInfo.jsx",
    "static": true,
    "longname": "imports/ui/admin/transcriptomes/SampleInfo.jsx~SampleInfo",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/admin/transcriptomes/SampleInfo.jsx",
    "importStyle": "SampleInfo",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 242,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/admin/transcriptomes/SampleInfo.jsx~SampleInfo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/SampleInfo.jsx~SampleInfo#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 129,
    "undocument": true
  },
  {
    "__docId__": 243,
    "kind": "member",
    "name": "state",
    "memberof": "imports/ui/admin/transcriptomes/SampleInfo.jsx~SampleInfo",
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/SampleInfo.jsx~SampleInfo#state",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "type": {
      "types": [
        "{\"editing\": *}"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "member",
    "name": "toggleEdit",
    "memberof": "imports/ui/admin/transcriptomes/SampleInfo.jsx~SampleInfo",
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/SampleInfo.jsx~SampleInfo#toggleEdit",
    "access": "public",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/admin/transcriptomes/SampleInfo.jsx~SampleInfo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/SampleInfo.jsx~SampleInfo#render",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "file",
    "name": "imports/ui/admin/transcriptomes/TrackExperiments.jsx",
    "content": "import React from 'react';\nimport { groupBy } from 'lodash';\nimport update from 'immutability-helper';\n\nimport ExperimentGroup from './ExperimentGroup.jsx';\n\nexport default class TrackExperiments extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      expanded: []\n    }\n  }\n\n  toggleExpand = event => {\n    const groupName = event.target.id;\n    const index = this.state.expanded.indexOf(groupName)\n    const operation = index < 0 ? { $push: [groupName] } : { $splice : [[index]] };\n    const newState = update(this.state, { expanded: operation })\n   \n    this.setState(newState);\n  }\n\n  render(){\n    const experimentGroups = groupBy(this.props.samples, 'experimentGroup');\n\n    return (\n      <ul className='list-group'>\n        {\n          Object.entries(experimentGroups).map(entry => {\n            const [groupName, groupSamples] = entry;\n            const expanded = this.state.expanded.indexOf(groupName) >= 0;\n            return (\n              <li key={groupName} className='list-group-item experiment-group'>\n                <input \n                  type='submit' \n                  className='fa btn btn-sm btn-outline-dark' \n                  value={ expanded ? '\\uf068' : '\\uf067' }\n                  id={groupName}\n                  onClick={this.toggleExpand} />\n                <small className='text-muted'>&nbsp;Experiment group: </small>\n                {groupName} \n                <span className='badge badge-dark pull-right'>{groupSamples.length} samples</span>\n                {\n                  expanded && \n                  <ExperimentGroup \n                    samples={groupSamples} \n                    allSamples={this.props.samples}\n                    roles={this.props.roles}\n                    />\n                }\n              </li>\n            )\n          })\n        }\n      </ul>\n    )\n  }\n}",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/admin/transcriptomes/TrackExperiments.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 247,
    "kind": "class",
    "name": "TrackExperiments",
    "memberof": "imports/ui/admin/transcriptomes/TrackExperiments.jsx",
    "static": true,
    "longname": "imports/ui/admin/transcriptomes/TrackExperiments.jsx~TrackExperiments",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/admin/transcriptomes/TrackExperiments.jsx",
    "importStyle": "TrackExperiments",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 248,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/admin/transcriptomes/TrackExperiments.jsx~TrackExperiments",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/TrackExperiments.jsx~TrackExperiments#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "state",
    "memberof": "imports/ui/admin/transcriptomes/TrackExperiments.jsx~TrackExperiments",
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/TrackExperiments.jsx~TrackExperiments#state",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"expanded\": *}"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "member",
    "name": "toggleExpand",
    "memberof": "imports/ui/admin/transcriptomes/TrackExperiments.jsx~TrackExperiments",
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/TrackExperiments.jsx~TrackExperiments#toggleExpand",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/admin/transcriptomes/TrackExperiments.jsx~TrackExperiments",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/admin/transcriptomes/TrackExperiments.jsx~TrackExperiments#render",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "file",
    "name": "imports/ui/blast/BlastResult.jsx",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { withTracker } from 'meteor/react-meteor-data';\nimport { FlowRouter } from 'meteor/kadira:flow-router';\n\nimport React from 'react';\nimport { compose } from 'recompose';\n\nimport jobQueue from '/imports/api/jobqueue/jobqueue.js';\nimport { withEither } from '/imports/ui/util/uiUtil.jsx';\n\nimport BlastResultPlot from './BlastResultPlot.jsx';\nimport BlastResultList from './BlastResultList.jsx';\n\nimport './blastResult.scss';\n\n\nconst Loading = () => {\n  return (\n    <div> \n      <p> Loading job info...</p>\n    </div>\n  )\n}\n\nconst Waiting = () => {\n  return (\n    <div>\n      <p> Waiting for job to start...</p>\n    </div>\n  )\n}\n\nconst Running = () => {\n  return (\n    <div>\n      <p> Job is running... </p>\n    </div>\n  )\n}\n\nconst notFound = () => {\n  return <div>\n    <p> Job not found </p>\n  </div>\n}\n\nconst isLoading = props => {\n  console.log(`check isLoading: ${props.loading}`)\n  return props.loading;\n}\n\nconst isExistingJob = props => {\n  return !(typeof props.job !== 'undefined');\n}\n\nconst isWaiting = props => {\n  const waitingStates = ['waiting','ready']\n  const isWaiting = waitingStates.indexOf(props.job.status) > 0;//props.job.status === 'waiting';\n  console.log(`check isWaiting ${isWaiting}`);\n  return isWaiting;\n}\n\nconst isRunning = props => {\n  const isRunning = props.job.status === 'running';\n  console.log(`check isRunning: ${isRunning}`);\n  return isRunning;\n}\n\nconst isFinished = props => {\n  const isFinished = props.job.status === 'completed';\n  console.log(`check isFinished: ${isFinished}`);\n  return isFinished;\n}\n\n/**\n * Meteor reactive data tracker to fetch blast job results based on url\n * @function blastDataTracker\n * @param  {Object} props input props passed to React component\n * @return {Object}       Modified props based on Meteor reactive data\n */\nconst blastDataTracker = props => {\n  const subscription = Meteor.subscribe('jobQueue');\n  const jobId = FlowRouter.getParam('_id')\n  return {\n    loading: !subscription.ready(),\n    job: jobQueue.findOne({_id: jobId})\n  }\n}\n\nconst withConditionalRendering = compose(\n  withTracker(blastDataTracker),\n  withEither(isExistingJob, notFound),\n  withEither(isLoading, Loading),\n  withEither(isWaiting, Waiting),\n  withEither(isRunning, Running)\n)\n\n/**\n * @module ui\n * @submodule blast\n * @class BlastResult\n * @constructor\n * @extends { React.Component }\n */\nclass BlastResult extends React.Component {\n  constructor(props){\n    super(props)\n  }\n\n  render(){\n    console.log(this.props)\n    return (\n      <div className=\"container\">\n        <div className='card'>\n          <div className='card-header'>\n            <b>Blast results</b> <small> Job ID: {this.props.job._id}</small>\n          </div>\n          <BlastResultPlot blastResult = {this.props.job.result} queryLength = {this.props.job.data.input.length}/>\n          <BlastResultList blastResult = {this.props.job.result} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withConditionalRendering(BlastResult)",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/blast/BlastResult.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 253,
    "kind": "function",
    "name": "Loading",
    "memberof": "imports/ui/blast/BlastResult.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/BlastResult.jsx~Loading",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/BlastResult.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 254,
    "kind": "function",
    "name": "Waiting",
    "memberof": "imports/ui/blast/BlastResult.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/BlastResult.jsx~Waiting",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/BlastResult.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 255,
    "kind": "function",
    "name": "Running",
    "memberof": "imports/ui/blast/BlastResult.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/BlastResult.jsx~Running",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/BlastResult.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 256,
    "kind": "function",
    "name": "notFound",
    "memberof": "imports/ui/blast/BlastResult.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/BlastResult.jsx~notFound",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/BlastResult.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 257,
    "kind": "function",
    "name": "isLoading",
    "memberof": "imports/ui/blast/BlastResult.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/BlastResult.jsx~isLoading",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/BlastResult.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 258,
    "kind": "function",
    "name": "isExistingJob",
    "memberof": "imports/ui/blast/BlastResult.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/BlastResult.jsx~isExistingJob",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/BlastResult.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 259,
    "kind": "function",
    "name": "isWaiting",
    "memberof": "imports/ui/blast/BlastResult.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/BlastResult.jsx~isWaiting",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/BlastResult.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 260,
    "kind": "function",
    "name": "isRunning",
    "memberof": "imports/ui/blast/BlastResult.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/BlastResult.jsx~isRunning",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/BlastResult.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 261,
    "kind": "function",
    "name": "isFinished",
    "memberof": "imports/ui/blast/BlastResult.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/BlastResult.jsx~isFinished",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/BlastResult.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 262,
    "kind": "function",
    "name": "blastDataTracker",
    "memberof": "imports/ui/blast/BlastResult.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/BlastResult.jsx~blastDataTracker",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/BlastResult.jsx",
    "importStyle": null,
    "description": "Meteor reactive data tracker to fetch blast job results based on url",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "blastDataTracker"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "input props passed to React component"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Modified props based on Meteor reactive data"
    },
    "ignore": true
  },
  {
    "__docId__": 263,
    "kind": "variable",
    "name": "withConditionalRendering",
    "memberof": "imports/ui/blast/BlastResult.jsx",
    "static": true,
    "longname": "imports/ui/blast/BlastResult.jsx~withConditionalRendering",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/BlastResult.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 264,
    "kind": "class",
    "name": "BlastResult",
    "memberof": "imports/ui/blast/BlastResult.jsx",
    "static": true,
    "longname": "imports/ui/blast/BlastResult.jsx~BlastResult",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/BlastResult.jsx",
    "importStyle": null,
    "description": "",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "ui"
      },
      {
        "tagName": "@submodule",
        "tagValue": "blast"
      },
      {
        "tagName": "@class",
        "tagValue": "BlastResult"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      " React.Component "
    ],
    "ignore": true
  },
  {
    "__docId__": 265,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/blast/BlastResult.jsx~BlastResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/blast/BlastResult.jsx~BlastResult#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/blast/BlastResult.jsx~BlastResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/blast/BlastResult.jsx~BlastResult#render",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "file",
    "name": "imports/ui/blast/BlastResultList.jsx",
    "content": "import React from 'react';\n\nconst AlignmentText = (props) => {\n  const hsp = props.hsp;\n  const queryStart = hsp['Hsp_query-from'][0];\n  const hspStart = hsp['Hsp_hit-from'][0];\n\n  const queryPaddingSize = queryStart.length >= hspStart.length ? 0 : hspStart.length - queryStart.length;\n  const midLinePaddingSize = Math.max(queryStart.length,hspStart.length);\n  const subjectPaddingSize = hspStart.length >= queryStart.length ? 0 : queryStart.length - hspStart.length;\n\n  const queryPadding = ' '.repeat(queryPaddingSize + 3);\n  const midLinePadding = ' '.repeat(midLinePaddingSize + 8);\n  const subjectPadding = ' '.repeat(subjectPaddingSize + 1);\n\n  const queryTag = 'Query' + queryPadding + queryStart;\n  const subjectTag = 'Subject' + subjectPadding + hspStart;\n\n  const querySeq = hsp['Hsp_qseq'][0]\n  const midLineSeq = hsp['Hsp_midline'][0]\n  const subjectSeq = hsp['Hsp_hseq'][0]\n  return (\n    <pre className='alignment-text'>\n      {queryTag} {querySeq} <br/>\n      {midLinePadding} {midLineSeq} <br/>\n      {subjectTag} {subjectSeq}\n    </pre>\n  )\n}\n\nconst HitLine = (props) => {\n  const hit = props.hit;\n  const [gene, transcript] = hit.Hit_def[0].split(' ')\n  return (\n    <div>\n      <a href={`/gene/${gene}`}> {transcript} </a>\n      <small>\n        <b>E-value:</b> {hit.Hit_hsps[0].Hsp[0].Hsp_evalue[0]}\n      </small>\n      <ul className='list-group'>\n        {\n          hit.Hit_hsps.map(_hsp => {\n            const hsp = _hsp.Hsp[0]\n            return (\n              <li className='list-group-item' key={hsp.Hsp_evalue[0]}>\n                <AlignmentText hsp={hsp} />\n              </li>\n            )\n          })\n        }\n      </ul>\n    </div>\n  )\n}\n\nexport default class BlastResultList extends React.Component {\n  constructor(props){\n    super(props)\n  }\n  render(){\n    const hits = this.props.blastResult.BlastOutput.BlastOutput_iterations[0].Iteration[0].Iteration_hits[0].Hit;\n    return (\n      <ul className='list-group'>\n      {\n        hits.map(hit => {\n          return (\n            <li className='list-group-item' key={hit.Hit_id[0]}>\n              <HitLine hit={hit} />\n            </li>\n          )\n        })\n      }\n      </ul>\n    )\n  }\n}",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/blast/BlastResultList.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 268,
    "kind": "function",
    "name": "AlignmentText",
    "memberof": "imports/ui/blast/BlastResultList.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/BlastResultList.jsx~AlignmentText",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/BlastResultList.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 269,
    "kind": "function",
    "name": "HitLine",
    "memberof": "imports/ui/blast/BlastResultList.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/BlastResultList.jsx~HitLine",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/BlastResultList.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 270,
    "kind": "class",
    "name": "BlastResultList",
    "memberof": "imports/ui/blast/BlastResultList.jsx",
    "static": true,
    "longname": "imports/ui/blast/BlastResultList.jsx~BlastResultList",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/blast/BlastResultList.jsx",
    "importStyle": "BlastResultList",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 271,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/blast/BlastResultList.jsx~BlastResultList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/blast/BlastResultList.jsx~BlastResultList#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/blast/BlastResultList.jsx~BlastResultList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/blast/BlastResultList.jsx~BlastResultList#render",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "file",
    "name": "imports/ui/blast/BlastResultPlot.jsx",
    "content": "import React from 'react';\nimport ContainerDimensions from 'react-container-dimensions'\nimport { Popover, OverlayTrigger } from 'react-bootstrap';\nimport { scaleLinear } from 'd3-scale';\nimport { interpolateGreys } from 'd3-scale-chromatic';\n\nconst PopoverHover = (props) => {\n  return (\n    <Popover id='blast-plot-popover' title={props.geneID}>\n      <p>\n        <small>\n          <b>E-value</b>: {props.evalue}\n          <br/>\n          <b>Bitscore</b>: {props.bitScore}\n          <br/>\n          <b>Alignment length</b>: {props.alignmentLength}\n          <br/>\n          <b>Gaps</b>: {props.gaps} \n        </small>\n      </p>\n    </Popover>\n  )\n}\n\nconst XAxis = (props) => {\n  const range = props.scale.range();\n  const width = range[1];\n\n  const domain = props.scale.domain();\n  const queryLength = domain[1];\n\n  const stepSize = Math.round(queryLength / props.numTicks)\n\n  const ticks = [];\n\n  for (let i = 1; i < props.numTicks; i++) {\n     ticks.push(i * stepSize);\n  }\n\n  return (\n    <g className = 'x-axis' transform='translate(0,15)'>\n      <line x1='0' x2={width} y1='5' y2='5' stroke='black'/>\n      <g>\n        <line x1='0' x2='0' y1='0' y2='5' stroke='black'/>\n        <text x='0' y='-10' dx='5' dy='5' textAnchor='middle'>0</text>\n      </g>\n      {\n        ticks.map(tick => {\n          const pos = props.scale(tick)\n          return (\n            <g key={tick}>\n              <line x1={pos} x2={pos} y1='0' y2='5' stroke='black' />\n              <text x={pos} y='-10' dx='5' dy='5' textAnchor='middle'>{ tick }</text>\n            </g>\n          )\n        })\n      }\n      <g>\n        <line x1 = {width} x2 = {width} y1 = '0' y2 = '5' stroke='black'/>\n        <text x={width} y='-10' dx='5' dy='5' textAnchor='end'>{queryLength}</text>\n      </g>\n    </g>\n  )\n}\n\nconst HitPlotLine = (props) => {\n  const hsps = props.hit.Hit_hsps;\n  const geneID = props.hit.Hit_def[0].split(' ')[1]\n  return (\n    <g transform={`translate(0,${props.index * props.height})`}>\n      {\n        hsps.map((_hsp, index) => {\n          const hsp = _hsp.Hsp[0];\n          const x = hsp['Hsp_query-from']\n          const width = hsp['Hsp_query-to'] - x;\n          const bitScore = hsp['Hsp_bit-score'];\n          const alignmentLength = hsp['Hsp_align-len'];\n          const gaps = hsp['Hsp_gaps'];\n          const evalue = hsp['Hsp_evalue'];\n          return (\n            <OverlayTrigger \n              key={index} \n              trigger={['hover','focus']} \n              placement='top' \n              overlay={PopoverHover({geneID, bitScore, alignmentLength, gaps, evalue})}>\n              <rect \n                 \n                x={props.xScale(x)} \n                y='0' \n                width={props.xScale(width)} \n                height={props.height / 2}\n                style={{\n                  fill: interpolateGreys(bitScore / props.maxBitScore)\n                }} />\n            </OverlayTrigger>\n          )\n        })\n      }\n    </g>\n  )\n}\n\nconst HitPlot = (props) => {\n  console.log(props.width)\n  const padding = {\n    top: 10,\n    bottom: 10,\n    left: 20,\n    right: 20\n  }\n  const width = props.width - padding.left - padding.right\n  const xScale = scaleLinear().domain([0, props.queryLength]).range([0, width])\n  const maxBitScore = props.hits[0].Hit_hsps[0].Hsp[0]['Hsp_bit-score'][0];\n  const lineHeight = 12;\n\n  const height = ( lineHeight * props.hits.length ) + padding.top + padding.bottom + 30;\n\n  return (\n    <svg width = {props.width} height = {height}>\n      <g className = 'blast-hit-plot' transform={`translate(${padding.left},${padding.top})`}>\n        <XAxis scale = {xScale} numTicks = {10}/>\n        <g className = 'hits' transform = 'translate(0,30)'>\n          {\n            props.hits.map((hit,index) => {\n              return (\n                <HitPlotLine \n                  key={index} \n                  hit={hit} \n                  index={index} \n                  xScale={xScale}\n                  height = {lineHeight}\n                  maxBitScore={maxBitScore} />\n              )\n            })\n          }\n        </g>\n      </g>\n    </svg>\n  )\n}\n\nexport default class BlastResultPlot extends React.Component {\n  constructor(props){\n    super(props)\n  }\n  render(){\n    const hits = this.props.blastResult.BlastOutput.BlastOutput_iterations[0].Iteration[0].Iteration_hits[0].Hit;\n    const queryLength = this.props.queryLength;\n    return (\n      <div className='blast-result-plot'>\n        <ContainerDimensions>\n          {\n            ({width, height}) => {\n              return <HitPlot width = {width} hits = {hits} queryLength = {queryLength}/>\n            }\n          }\n        </ContainerDimensions>\n      </div>\n    )\n  }\n}",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/blast/BlastResultPlot.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 274,
    "kind": "function",
    "name": "PopoverHover",
    "memberof": "imports/ui/blast/BlastResultPlot.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/BlastResultPlot.jsx~PopoverHover",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/BlastResultPlot.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 275,
    "kind": "function",
    "name": "XAxis",
    "memberof": "imports/ui/blast/BlastResultPlot.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/BlastResultPlot.jsx~XAxis",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/BlastResultPlot.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 276,
    "kind": "function",
    "name": "HitPlotLine",
    "memberof": "imports/ui/blast/BlastResultPlot.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/BlastResultPlot.jsx~HitPlotLine",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/BlastResultPlot.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 277,
    "kind": "function",
    "name": "HitPlot",
    "memberof": "imports/ui/blast/BlastResultPlot.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/BlastResultPlot.jsx~HitPlot",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/BlastResultPlot.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 278,
    "kind": "class",
    "name": "BlastResultPlot",
    "memberof": "imports/ui/blast/BlastResultPlot.jsx",
    "static": true,
    "longname": "imports/ui/blast/BlastResultPlot.jsx~BlastResultPlot",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/blast/BlastResultPlot.jsx",
    "importStyle": "BlastResultPlot",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 279,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/blast/BlastResultPlot.jsx~BlastResultPlot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/blast/BlastResultPlot.jsx~BlastResultPlot#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/blast/BlastResultPlot.jsx~BlastResultPlot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/blast/BlastResultPlot.jsx~BlastResultPlot#render",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "file",
    "name": "imports/ui/blast/SubmitBlast.jsx",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { withTracker } from 'meteor/react-meteor-data';\nimport { FlowRouter } from 'meteor/kadira:flow-router';\n\nimport React from 'react';\nimport Select from 'react-select';\nimport update from 'immutability-helper';\n\nimport { submitBlastJob } from '/imports/api/blast/submitblastjob.js';\nimport { Tracks } from '/imports/api/genomes/track_collection.js';\n\nimport './submitblast.scss';\n\n\n/**\n * Function to determine whether a given sequence string is DNA or protein\n * @param  {String} seq Input sequence, unknown if DNA or protein\n * @return {String}     Either 'Nucleotide' or 'Protein'\n */\nfunction determineSeqType(seq){\n  const dna = 'cgatCGAT'\n  let fractionDna = 0\n  let i = dna.length\n  while (i--){\n    let nuc = dna[i]\n    fractionDna += (seq.split(nuc).length - 1) / seq.length\n  }\n  const seqType = fractionDna >= 0.9 ? 'Nucleotide' : 'Protein'\n  return seqType\n}\n\n/**\n * Textarea input field to input sequences for blasting\n * @param  {Object} props [description]\n * @return {SequenceInput}       [description]\n */\nconst SequenceInput = (props) => {\n  return (\n    <div>\n      <textarea \n        className=\"form-control\" \n        rows=\"10\" \n        id=\"blast_seq\" \n        type=\"text\" \n        placeholder=\"Enter sequence\" \n        value={props.value}\n        onChange={props.enterSequence}\n      />\n      {\n        props.value &&\n        <div className=\"btn-group pull-right\">\n          <button type=\"button\" className=\"btn btn-outline-secondary btn-sm disabled\">This is a</button>\n          <button type=\"button\" className=\"btn btn-secondary btn-sm dropdown-toggle\" data-toggle=\"dropdown\">\n            <strong>{props.seqType}</strong> sequence\n            <span className=\"caret\"></span>\n          </button>\n          <div className=\"dropdown-menu\">\n            <a className=\"dropdown-item\" id=\"Protein\" onClick={props.selectSeqType} href=\"#\">\n              Protein sequence\n            </a>\n            <a className=\"dropdown-item\" id=\"Nucleotide\" onClick={props.selectSeqType} href=\"#\">\n              Nucleotide sequence\n            </a>\n          </div> \n        </div>\n      }\n    </div>\n  )\n}\n\nconst TrackSelect = (props) => {\n  return (\n    <div>\n      <label> Select tracks: </label>\n        {\n          props.tracks.map(track => {\n            console.log(props.selectedTracks,track.trackName,props.selectedTracks.indexOf(track.trackName))\n            return (\n              <div className=\"form-check\" key={track.trackName}>\n                <input \n                  type=\"checkbox\" \n                  className=\"form-check-input\" \n                  id={ track.trackName } \n                  checked={props.selectedTracks.indexOf(track.trackName) >= 0}\n                  onChange={props.toggleTrackSelect} \n                />\n                <label className=\"form-check-label\" htmlFor={ track.trackName }>{ track.trackName }</label>\n              </div>\n            )\n          })\n        }\n    </div>\n  )\n}\n\nconst SubmitButtons = (props) => {\n  return (\n    <div className='btn-group'>\n      <div className=\"btn-group\">\n        <button type=\"button\" className=\"btn btn-outline-primary dropdown-toggle\" data-toggle=\"dropdown\">\n          <strong>{props.selectedDbType}</strong> database <span className=\"caret\"></span>\n        </button>\n        <div className=\"dropdown-menu\">\n        {\n          props.dbTypes.map(dbType => {\n            return (\n                <a key={dbType} className=\"dropdown-item db-select\" id={dbType} onClick={props.selectDbType}>\n                  {dbType} database\n                </a>\n            )\n          })\n        }\n        </div>\n      </div>\n      <div className='btn-group'>\n        <button \n          type=\"button\" \n          className=\"btn btn-primary\" \n          id=\"submit-blast\"\n          onClick={props.submit}>\n          <span className=\"glyphicon glyphicon-search\" /> {props.blastType.toUpperCase()}\n        </button>\n      </div>\n    </div>\n  )\n}\n\nclass SubmitBlast extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      input: undefined,\n      seqType: 'Nucleotide',\n      dbType: 'Protein',\n      selectedTracks: []\n    }\n  }\n\n  /**\n  * Hard coded map of sequence types to blast database types to select the appropriate blast program\n  * @type {Object}\n  */\n   BLASTTYPES = {\n    'Nucleotide': {\n        'Nucleotide': 'blastn',\n        'Protein': 'blastx',\n        'Translated nucleotide': 'tblastx'\n      },\n    'Protein': {\n      'Protein': 'blastp',\n      'Translated nucleotide': 'tblastn'\n    }\n  };\n\n  enterSequence = event => {\n    event.preventDefault();\n    const input = event.target.value;\n    const seqType = input ? determineSeqType(input): undefined;\n    this.setState({\n      input: input,\n      seqType: seqType\n    })\n  }\n\n  selectSeqType = event => {\n    event.preventDefault();\n    const seqType = event.target.id;\n    const dbType = Object.keys(this.BLASTTYPES[seqType])[0]\n    this.setState({\n      seqType: seqType,\n      dbType: dbType\n    })\n  }\n\n  selectDbType = event => {\n    event.preventDefault();\n    const dbType = event.target.id;\n    console.log('selectDbType',dbType)\n    this.setState({\n      dbType: dbType\n    })\n  }\n\n  toggleTrackSelect = event => {\n    const trackName = event.target.id;\n    const index = this.state.selectedTracks.indexOf(trackName);\n    const operation = index < 0 ? { $push: [trackName] } : { $splice: [[index]] };\n    const newState = update(this.state, { selectedTracks: operation });\n\n    /*\n    let newState;\n    if (index < 0){\n      newState = update(this.state, {\n        selectedTracks: {\n          $push: [trackName]\n        }\n      })\n    } else {\n      newState = update(this.state, {\n        selectedTracks: {\n          $splice: [[index]]\n        }\n      })\n    }\n    */\n    this.setState(newState)\n  }\n\n  submit = event => {\n    event.preventDefault();\n    const blastType = this.BLASTTYPES[this.state.seqType][this.state.dbType];\n    submitBlastJob.call({\n      blastType: blastType,\n      input: this.state.input,\n      trackNames: this.state.selectedTracks\n    }, (err,res) => {\n      console.log(err)\n      FlowRouter.redirect(`/blast/${res}`)\n    })\n  }\n\n  render(){\n    return (\n      this.props.loading ? \n      <div>LOADING</div> :\n      <form className=\"container form-group\" role=\"form\" id=\"blast\">\n        <div className=\"card\">\n          <div className=\"card-header\">Blast search</div>\n          <div className=\"card-body\">\n            <SequenceInput \n              value = {this.state.input}\n              seqType = {this.state.seqType}\n              enterSequence = {this.enterSequence}\n              selectSeqType = {this.selectSeqType}\n            />\n          </div>\n            <ul className=\"list-group list-group-flush\">\n              <li className=\"list-group-item\">\n                <TrackSelect \n                  tracks = {this.props.tracks}\n                  selectedTracks = {this.state.selectedTracks}\n                  toggleTrackSelect={this.toggleTrackSelect}\n                />\n              </li>\n              <li className=\"list-group-item\">\n                Advanced options ...\n              </li>\n            </ul>\n          <div className=\"card-footer\">\n            <div className=\"row\">\n              <label className=\"col-md-4\">Search a ...</label>\n              <div className=\"col-md-6\">\n                {\n                  !this.state.input &&\n                  <button type=\"button\" className=\"btn btn-outline-secondary disabled\">\n                    <span className=\"fa fa-question-circle-o\"></span> Enter sequence\n                  </button>\n                }\n                {\n                  this.state.input && this.state.selectedTracks.length == 0 &&\n                  <button type=\"button\" className=\"btn btn-outline-secondary disabled\">\n                    <span className=\"fa fa-question-circle-o\"></span> Select track\n                  </button>\n                }\n                {\n                  this.state.input && this.state.selectedTracks.length > 0 && \n                  <SubmitButtons \n                    selectedDbType = {this.state.dbType}\n                    dbTypes = {Object.keys(this.BLASTTYPES[this.state.seqType])}\n                    selectDbType = {this.selectDbType}\n                    blastType = {this.BLASTTYPES[this.state.seqType][this.state.dbType]}\n                    submit = {this.submit}\n                  />\n                }\n              </div>\n            </div>\n          </div>\n        </div>\n      </form>\n    )\n  }\n}\n\nexport default withTracker(props => {\n  const subscription = Meteor.subscribe('tracks');\n  const loading = !subscription.ready();\n  const tracks = Tracks.find({\n    blastdbs: {\n      $exists: 1\n    }\n  }).fetch()\n  return {\n    loading,\n    tracks\n  }\n})(SubmitBlast)",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/blast/SubmitBlast.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 282,
    "kind": "function",
    "name": "determineSeqType",
    "memberof": "imports/ui/blast/SubmitBlast.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/SubmitBlast.jsx~determineSeqType",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/SubmitBlast.jsx",
    "importStyle": null,
    "description": "Function to determine whether a given sequence string is DNA or protein",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "seq",
        "description": "Input sequence, unknown if DNA or protein"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Either 'Nucleotide' or 'Protein'"
    },
    "ignore": true
  },
  {
    "__docId__": 283,
    "kind": "function",
    "name": "SequenceInput",
    "memberof": "imports/ui/blast/SubmitBlast.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/SubmitBlast.jsx~SequenceInput",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/SubmitBlast.jsx",
    "importStyle": null,
    "description": "Textarea input field to input sequences for blasting",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SequenceInput"
      ],
      "spread": false,
      "description": "[description]"
    },
    "ignore": true
  },
  {
    "__docId__": 284,
    "kind": "function",
    "name": "TrackSelect",
    "memberof": "imports/ui/blast/SubmitBlast.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/SubmitBlast.jsx~TrackSelect",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/SubmitBlast.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 285,
    "kind": "function",
    "name": "SubmitButtons",
    "memberof": "imports/ui/blast/SubmitBlast.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/blast/SubmitBlast.jsx~SubmitButtons",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/SubmitBlast.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 286,
    "kind": "class",
    "name": "SubmitBlast",
    "memberof": "imports/ui/blast/SubmitBlast.jsx",
    "static": true,
    "longname": "imports/ui/blast/SubmitBlast.jsx~SubmitBlast",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/blast/SubmitBlast.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 287,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/blast/SubmitBlast.jsx~SubmitBlast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/blast/SubmitBlast.jsx~SubmitBlast#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 129,
    "undocument": true
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "state",
    "memberof": "imports/ui/blast/SubmitBlast.jsx~SubmitBlast",
    "static": false,
    "longname": "imports/ui/blast/SubmitBlast.jsx~SubmitBlast#state",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "type": {
      "types": [
        "{\"input\": *, \"seqType\": string, \"dbType\": string, \"selectedTracks\": *}"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "BLASTTYPES",
    "memberof": "imports/ui/blast/SubmitBlast.jsx~SubmitBlast",
    "static": false,
    "longname": "imports/ui/blast/SubmitBlast.jsx~SubmitBlast#BLASTTYPES",
    "access": "public",
    "description": "Hard coded map of sequence types to blast database types to select the appropriate blast program",
    "lineNumber": 143,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "enterSequence",
    "memberof": "imports/ui/blast/SubmitBlast.jsx~SubmitBlast",
    "static": false,
    "longname": "imports/ui/blast/SubmitBlast.jsx~SubmitBlast#enterSequence",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "selectSeqType",
    "memberof": "imports/ui/blast/SubmitBlast.jsx~SubmitBlast",
    "static": false,
    "longname": "imports/ui/blast/SubmitBlast.jsx~SubmitBlast#selectSeqType",
    "access": "public",
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "selectDbType",
    "memberof": "imports/ui/blast/SubmitBlast.jsx~SubmitBlast",
    "static": false,
    "longname": "imports/ui/blast/SubmitBlast.jsx~SubmitBlast#selectDbType",
    "access": "public",
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "toggleTrackSelect",
    "memberof": "imports/ui/blast/SubmitBlast.jsx~SubmitBlast",
    "static": false,
    "longname": "imports/ui/blast/SubmitBlast.jsx~SubmitBlast#toggleTrackSelect",
    "access": "public",
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "submit",
    "memberof": "imports/ui/blast/SubmitBlast.jsx~SubmitBlast",
    "static": false,
    "longname": "imports/ui/blast/SubmitBlast.jsx~SubmitBlast#submit",
    "access": "public",
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/blast/SubmitBlast.jsx~SubmitBlast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/blast/SubmitBlast.jsx~SubmitBlast#render",
    "access": "public",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "file",
    "name": "imports/ui/browser/browser.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { Session } from 'meteor/session';\nimport { Template } from 'meteor/template';\nimport { Tracker } from 'meteor/tracker';\n\nimport './browser.html';\nimport './browser.scss';\n\n\nSession.setDefault('seqid','PanWU01x14_asm01_scf00001');\nSession.setDefault('start',409500);\nSession.setDefault('end',413500);\nSession.setDefault('track','PanWU01x14_asm01_ann01')\nTracker.autorun(function(){\n\tvar track = Session.get('track')\n\tvar seqid = Session.get('seqid');\n\tvar start = Session.get('start');\n\tvar end = Session.get('end');\n\tvar zoom = (end - start) / 4;\n  Meteor.subscribe('browser',track,seqid,start-zoom,end+zoom);\n})\n\nTemplate.browser.helpers({\n\tgenes : function(){\n\t},\n\tstart: function(){\n\t\treturn Session.get('start')\n\t},\n\tend: function(){\n\t\treturn Session.get('end')\n\t},\n\tseqid: function(){\n\t\treturn Session.get('seqid')\n\t},\n\ttrack: function(){\n\t\treturn Session.get('track')\n\t}\n});\n\nTemplate.browser.events({\n\t\"submit .new-seqid\": function(event){\n\t\tevent.preventDefault();\n\t\tvar seqid = event.target.seqid.value;\n\t\tSession.set('seqid',seqid);\n\t},\n\t\"submit .new-start\": function(event){\n\t\tevent.preventDefault();\n\t\tvar start = parseInt(event.target.start.value);\n\t\tSession.set('start',start);\n\t},\n\t\"submit .new-end\": function(event){\n\t\tevent.preventDefault();\n\t\tvar end = parseInt(event.target.end.value);\n\t\tSession.set('end',end);\n\t},\n\t\"click .nav#min\": function(){\n\t\tconsole.log('min');\n\t\tvar curStart = Session.get('start');\n\t\tvar curEnd = Session.get('end');\n\t\tvar zoom = Math.floor((curEnd - curStart) / 4)\n\t\tvar newStart = curStart - zoom > 0 ? curStart - zoom : 0;\n\t\tvar newEnd = curEnd + zoom;\n\t\tSession.set('start',newStart);\n\t\tSession.set('end',newEnd);\n\t},\n\t\"click .nav#plus\": function(){\n\t\tconsole.log('plus');\n\t\tvar curStart = Session.get('start');\n\t\tvar curEnd = Session.get('end');\n\t\tvar zoom = Math.floor((curEnd - curStart) / 8)\n\t\tvar newStart = curStart + zoom > 0 ? curStart + zoom : 0;\n\t\tvar newEnd = curEnd - zoom;\n\t\tSession.set('start',newStart);\n\t\tSession.set('end',newEnd);\n\t},\n\t\"click .nav#left\": function(){\n\t\tconsole.log('left');\n\t\tvar curStart = Session.get('start');\n\t\tvar curEnd = Session.get('end');\n\t\tvar zoom =Math.floor((curEnd - curStart) / 4)\n\t\tvar newStart = curStart - zoom > 0 ? curStart - zoom : 0;\n\t\tvar newEnd = curStart - zoom > 0 ? curEnd - zoom : zoom * 2;\n\t\tSession.set('start',newStart);\n\t\tSession.set('end',newEnd);\n\t},\n\t\"click .nav#right\": function(){\n\t\tconsole.log('right');\n\t\tvar curStart = Session.get('start');\n\t\tvar curEnd = Session.get('end');\n\t\tvar zoom = Math.floor((curEnd - curStart) / 4)\n\t\tvar newStart = curStart + zoom;\n\t\tvar newEnd = curEnd + zoom;\n\t\tSession.set('start',newStart);\n\t\tSession.set('end',newEnd);\n\t}\n});\n\nTemplate.browser.onRendered(function(){\n    function isOverlapping(x1,x2,y1,y2){\n    \tif (x1 >= y1 && x1 <= y2){\n    \t\tconsole.log('this')\n    \t\treturn true\n    \t} else if (y1 >= x1 && y1 <= x2){\n    \t\tconsole.log('that')\n    \t\treturn true\n    \t} else {\n    \t\treturn false\n    \t}\n    \t//return (x2 >= y1 && x1 <= y2)\n    \t//return Math.max(x1,y1) <= Math.min(y1,y2)\n    }\n    function setVerticalPosition(genes,subsMap){\n    \tvar processed = [];\n    \tfor (var i = 0;i < genes.length;i++){\n    \t\tif (_.contains(processed,i)){\n    \t\t\tconsole.log('contains')\n    \t\t\tcontinue\n    \t\t};\n    \t\t//if (!_.has(genes[i],'placement')){\n    \t\t\tgenes[i].placement = 1\n    \t\t//};\n    \t\tfor (var j = 0;j < genes.length;j++){\n    \t\t\tif (i >= j) { \n    \t\t\t\tcontinue \n    \t\t\t};\n    \t\t\tvar gene1 = genes[i]\n    \t\t\tvar gene2 = genes[j]\n    \t\t\tvar overlap = isOverlapping(gene1.start,gene1.end,gene2.start,gene2.end)\n    \t\t\tconsole.log(i,j)\n    \t\t\tconsole.log(overlap,gene1.ID,gene2.ID)\n    \t\t\tif (overlap){\n    \t\t\t\tprocessed.push(j)\n    \t\t\t\tvar placement = genes[i].placement + 1\n    \t\t\t\tgenes[j].placement = placement\n    \t\t\t\tfor (sub in genes[j].children){\n    \t\t\t\t\tsubId = genes[j].children[sub]\n    \t\t\t\t\t//console.log(subId)\n    \t\t\t\t\tif (Object.keys(subsMap).indexOf(subId) > 0){\n    \t\t\t\t\t\tsubsMap[subId].placement = placement\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t\tconsole.log('overlap',gene1.ID,gene2.ID)\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n    function getSubsMap(subs){\n    \tvar subsMap = {}\n    \tfor (var sub in subs){\n    \t\tvar subId = subs[sub].ID\n    \t\tsubsMap[subId] = subs[sub]\n    \t}\n    \t//for (var i = 0;i < subs.length;i++){\n    \t//\tvar sub = subs[i]\n    \t//\tsubsMap[sub.ID] = sub\n    \t//}\n    \treturn subsMap\n    }\n    /*\n    var tip = d3.tip()\n\t\t\t.attr('class', 'd3-tip')\n\t\t\t.offset([140, 0])\n\t\t\t.html(function(d) {\n\t\t\t\tvar text = \"<p><strong>ID:</strong> <span>\" + d.ID + \"</span></p>\";\n\t\t\t\ttext += \"<p><strong>pos:</strong> <span>\" + d.placement + \"</span></p>\";\n\t\t\t\treturn text;\n\t\t\t})\n\t*/\n\t//select container and make svg element\n\t//select the div to plot in, set min max and margins\n\tvar vis = this.find('.browser');\n\tvar margin = {top: 5, right: 25, bottom: 0, left: 10};\n    var width = $('.browser').width() - margin.left - margin.right;\n    var height = 200 - margin.top - margin.bottom;\n\n    var container = d3.select(vis).append('svg')\n\t\t.attr('height',height + margin.top + margin.bottom)\n\t\t.attr('width',width + margin.left + margin.right)\n\t\t.attr('transform','translate('+margin.left+','+margin.top+')')\n\t\n\t//container.call(tip);\n\n\tTracker.autorun(function(){\n\t\tvar track = Session.get('track')\n\t\tvar seqid = Session.get('seqid');\n\t\tvar start = Session.get('start');\n\t\tvar end = Session.get('end');\n\t\tvar zoom = (end - start) / 2;\n\t\tvar maxZoom = 100000;\n\t\tvar subs = Genes.find({'type':'CDS','track':track,'seqid':seqid,'end':{$gte:start - zoom},'start':{$lte:end + zoom}}).fetch();\n\t\tvar genes = Genes.find({'type':'mRNA','track':track,'seqid':seqid,'end':{$gte:start - zoom},'start':{$lte:end + zoom}}).fetch();\n\t\tvar subsMap = getSubsMap(subs);\n\t\tsetVerticalPosition(genes,subsMap);\n\t\tvar _genes = genes.map(function(x){ return [x.ID,x.placement] } )\n\t\t//console.log(_genes);\n\t\t//setup x scale \n\t\tvar xScale = d3.scale.linear()\n\t\t\t.domain([start,end])\n\t\t\t.range([0,width])\n\n\t\tvar track = container.append('g')\n\t\t\t.attr('class','track')\n\t\t\t.attr('transform','translate(0,40)')\n\n\t\t//plot backbone line\n\t\tvar lines = container.select('g.track')\n\t\t\t.selectAll('line')\n\t\t\t.data(function(){\n\t\t\t\tif (zoom <= maxZoom){\n\t\t\t\t\treturn genes\n\t\t\t\t} else {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t})\n\n\t\tlines.enter()\n\t\t\t.append('line')\n\t\t\t.style('stroke','black')\n\t\t\t.attr('y1',function(d){ return (d.placement * 10) - 5})\n\t\t\t.attr('y2',function(d){ return (d.placement * 10) - 5})\n\t\tlines.transition()\n\t\t\t.duration(2000)\n\t\t\t.attr('x1',function(d){ \n\t\t\t//console.log(d.placement)\n\t\t\treturn xScale(d.start) \n\t\t})\n\t\t\t.attr('x2',function(d){ return xScale(d.end) })\n\t\t//plot exon rectangles\n\t    var exons = container.select('g.track')\n\t    \t.selectAll('rect')\n\t    \t.data(function(){\n\t    \t\tif (zoom <= maxZoom){\n\t    \t\t\treturn subs\n\t    \t\t} else {\n\t    \t\t\treturn genes\n\t    \t\t}\n\t    \t})\n\t    exons.transition()\n\t\t\t.duration(200)\n\t\t\t.attr('x',function(d){ return xScale(d.start) })\n\t\t\t.attr('y',function(d){\n\t\t\t\tif (d.placement === undefined){\n\t\t\t\t\treturn 0\n\t\t\t\t} else {\n\t\t\t\t\treturn (d.placement) * 10\n\t\t\t\t}\n\t\t\t})\n\t\t\t.attr('width',function(d){ return xScale(d.end) - xScale(d.start) })\n\n\t    exons.enter()\n\t\t\t.append('rect')\n\t\t\n\t\texons.exit().remove()\n\t\texons.attr('x',function(d){ return xScale(d.start) })\n\t\t\t.attr('y',function(d){\n\t\t\t\tif (d.placement === undefined){\n\t\t\t\t\treturn 0\n\t\t\t\t} else {\n\t\t\t\t\treturn (d.placement) * 10\n\t\t\t\t}\n\t\t\t})\n\t\t\t.attr('width',function(d){ return xScale(d.end) - xScale(d.start) })\n\t\t\t.attr('height',10)\n\t\t\t.style('fill',function(d){\n\t\t\t\tif (d.strand === '+'){\n\t\t\t\t\treturn 'red';\n\t\t\t\t} else {\n\t\t\t\t\treturn 'blue';\n\t\t\t\t}\n\t\t\t})\n\n\t    var xAxis = d3.svg.axis()\n\t\t\t.tickFormat(d3.format('d'))\n\t\t\t.orient('top')\n\t\t\t.scale(xScale);\n\n\t    var xAxisGroup = container.append('g')\n\t\t\t.attr('class','x axis')\n\t\t\t//.attr('transform','translate(0,'+height+')')\n\t\t\t.attr('transform','translate(0,20)')\n\t\t\t.selectAll('text')\n\t\t\t.style('text-anchor','start')\n\t\t\t.transition()\n\t\t\n\t\tcontainer.select('g.x.axis').call(xAxis)\n\t\t\t\n    })\n});",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/browser/browser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 297,
    "kind": "file",
    "name": "imports/ui/download/Download.jsx",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { withTracker } from 'meteor/react-meteor-data';\nimport { FlowRouter } from 'meteor/kadira:flow-router';\n\nimport React from 'react';\nimport { compose } from 'recompose';\n\nimport jobQueue from '/imports/api/jobqueue/jobqueue.js';\n\nimport { withEither, isLoading, Loading } from '/imports/ui/util/uiUtil.jsx';\n\nconst Waiting = () => {\n  return (\n    <div>\n      <p> Waiting...</p>\n    </div>\n  )\n}\n\nconst Running = () => {\n  return (\n    <div>\n      <p> Running... </p>\n    </div>\n  )\n}\n\nconst isWaiting = (props) => {\n  const waitingStates = ['waiting','ready']\n  const isWaiting = waitingStates.indexOf(props.job.status) > 0;//props.job.status === 'waiting';\n  console.log(`check isWaiting ${isWaiting}`);\n  return isWaiting;\n}\n\nconst isRunning = (props) => {\n  const isRunning = props.job.status === 'running';\n  console.log(`check isRunning: ${isRunning}`);\n  return isRunning;\n}\n\nconst isFinished = (props) => {\n  const isFinished = props.job.status === 'completed';\n  console.log(`check isFinished: ${isFinished}`);\n  return isFinished;\n}\n\nconst withConditionalRendering = compose(\n  withEither(isLoading, Loading),\n  withEither(isWaiting, Waiting),\n  withEither(isRunning, Running)\n)\n\nclass Download extends React.Component {\n  constructor(props){\n    super(props)\n    console.log(props)\n  }\n\n  render(){\n    const downloadUrl = Meteor.absoluteUrl(this.props.job.result.value)\n    console.log(downloadUrl)\n    window.open(downloadUrl, '', '', true)\n    return (\n      <div>Job is ready, should begin download</div>\n    )\n  }\n}\n\nexport default withTracker(props => {\n  const queryHash = FlowRouter.getParam('_id');\n  //const downloadSub = Meteor.subscribe('downloads', downloadId)\n  console.log(jobQueue.findOne({ 'data.queryHash': queryHash }))\n  const jobSub = Meteor.subscribe('jobQueue');\n  return {\n    loading: !jobSub.ready(),\n    job: jobQueue.findOne({ 'data.queryHash': queryHash })\n  }\n})(withConditionalRendering(Download));",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/download/Download.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 298,
    "kind": "function",
    "name": "Waiting",
    "memberof": "imports/ui/download/Download.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/download/Download.jsx~Waiting",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/download/Download.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 299,
    "kind": "function",
    "name": "Running",
    "memberof": "imports/ui/download/Download.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/download/Download.jsx~Running",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/download/Download.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 300,
    "kind": "function",
    "name": "isWaiting",
    "memberof": "imports/ui/download/Download.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/download/Download.jsx~isWaiting",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/download/Download.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 301,
    "kind": "function",
    "name": "isRunning",
    "memberof": "imports/ui/download/Download.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/download/Download.jsx~isRunning",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/download/Download.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 302,
    "kind": "function",
    "name": "isFinished",
    "memberof": "imports/ui/download/Download.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/download/Download.jsx~isFinished",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/download/Download.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 303,
    "kind": "variable",
    "name": "withConditionalRendering",
    "memberof": "imports/ui/download/Download.jsx",
    "static": true,
    "longname": "imports/ui/download/Download.jsx~withConditionalRendering",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/download/Download.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 304,
    "kind": "class",
    "name": "Download",
    "memberof": "imports/ui/download/Download.jsx",
    "static": true,
    "longname": "imports/ui/download/Download.jsx~Download",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/download/Download.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 305,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/download/Download.jsx~Download",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/download/Download.jsx~Download#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/download/Download.jsx~Download",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/download/Download.jsx~Download#render",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "file",
    "name": "imports/ui/feature/ExpressionPlot.jsx",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { Template } from 'meteor/templating';\nimport { withTracker } from 'meteor/react-meteor-data';\n\nimport React from 'react';\nimport { mean, sum, groupBy } from 'lodash';\n\nimport ContainerDimensions from 'react-container-dimensions';\nimport { Popover, OverlayTrigger } from 'react-bootstrap';\nimport { scaleLinear } from 'd3-scale';\n\n\nimport { ExperimentInfo, Transcriptomes } from '/imports/api/transcriptomes/transcriptome_collection.js';\n\nimport './expressionplot.scss';\n\n/**\n * https://stackoverflow.com/a/46854785/6573438\n * @param  {Number} x Number to be rounded\n * @param  {Number} n Floating point precision\n * @return {Number}   Rounded Number\n */\nconst round = (x, n) => {\n  return parseFloat(Math.round(x * Math.pow(10, n)) / Math.pow(10, n)).toFixed(n)\n};\n\nconst YAxis = ({ scale, numTicks }) => {\n  const range = scale.range();\n  const [start, end] = scale.domain();\n  const precision = end > 10 ? 0 : end > 1 ? 1 : 2;\n\n  const stepSize = (end - start) / numTicks;\n  const ticks = [];\n\n  for (let i = 1; i < numTicks; i++) {\n     ticks.push(start + (i * stepSize));\n  }\n\n  return (\n    <g className='y-axis'>\n      <line x1='0' x2='0' y1={range[0]} y2={range[1]} stroke='black'/>\n      <g>\n        <line x1='-5' x2='0' y1={range[0]} y2={range[0]} stroke='black'/>\n        <text x='-10' y={range[0]} textAnchor='end' fontSize='10'>{round(start, precision)}</text>\n      </g>\n      {\n        ticks.map(tick => {\n          const pos = scale(tick)\n          return (\n            <g key={tick}>\n              <line x1='-5' x2='0' y1={pos} y2={pos} stroke='black' />\n              <text x='-10' y={pos} textAnchor='end' fontSize='10'>{ round(tick, precision) }</text>\n            </g>\n          )\n        })\n      }\n      <g>\n        <line x1='-5' x2='0' y1={range[1]} y2={range[1]} stroke='black'/>\n        <text x='-10' y={range[1]} textAnchor='end' fontSize='10'>{round(end, precision)}</text>\n      </g>\n    </g>\n  )\n}\n\nconst DotPlot = ({ samples, yScale }) => {\n  return (\n    <g className='dotplot'>\n    {\n      samples.map(sample => {\n        return (\n          <circle \n            key={sample._id}\n            cx='0' \n            cy={ yScale(sample.tpm) }\n            r='3'\n            stroke='black'\n            strokeWidth='1.5'\n            fill='white' />\n        )\n      })\n    }\n    </g>\n  )\n}\n\nconst BarPlot = ({ samples, yScale }) => {\n  const tpm = samples.map( sample => sample.tpm );\n  const meanVal = mean(tpm);\n  const width = 15;\n\n  const stdDev = Math.sqrt(\n    sum(\n      samples.map( sample => {\n        return Math.pow(sample.tpm - meanVal, 2)\n      })\n    )\n  )\n\n  const stdErr = stdDev / Math.sqrt(samples.length);\n\n\n  return (\n    <g className = 'barplot'>\n      <rect \n        x = { -.5 * width }\n        width = { width }\n        y = { yScale(meanVal) }\n        height = { yScale.range()[0] - yScale(meanVal) }\n        stroke = 'black'\n        fill = '#4eb3d3'  />\n      <line\n        x1 = '0'\n        x2 = '0'\n        y1 = { yScale(meanVal - stdErr) }\n        y2 = { yScale(meanVal + stdErr) }\n        stroke = 'black' />\n      <line\n        x1 = { -.25 * width }\n        x2 = { .25 * width }\n        y1 = { yScale(meanVal - stdErr) }\n        y2 = { yScale(meanVal - stdErr) }\n        stroke = 'black' />\n      <line\n        x1 = { -.25 * width }\n        x2 = { .25 * width }\n        y1 = { yScale(meanVal + stdErr) }\n        y2 = { yScale(meanVal + stdErr) }\n        stroke = 'black' />\n    </g>\n  )\n}\n\nconst GroupedSamplePlot = ({ samples, yScale, transform }) => {\n  const groupName = samples.map(sample => sample.replicaGroup)[0]\n  const range = yScale.range()\n  return (\n    <g transform={transform}>\n      <BarPlot samples={samples} yScale={yScale} />\n      <DotPlot samples={samples} yScale={yScale} />\n      <g transform={`translate(0,${range[0]})`}>\n        <line x1='-20' x2='20' y1='0' y2='0' stroke='black'/>\n        <line x1='0' x2='0' y1='0' y2='10' stroke='black'/>\n        <text x='5' y='25' textAnchor='left' transform='rotate(30)' fontSize='10'>{groupName}</text>\n      </g>\n    </g>\n  )\n}\n\nconst GroupedSamples = ({ groups, yScale, transform }) => {\n  return (\n    <g transform={transform}>\n      {\n        Object.entries(groups).map((group, index) => {\n          const [expGroup, groupSamples] = group;\n          return (\n            <GroupedSamplePlot \n              key={expGroup} \n              samples={groupSamples} \n              yScale={yScale} \n              transform={`translate(${index * 40},0)`} />\n            )\n        })\n      }\n    </g>\n  )\n}\n\nclass ExpressionPlot extends React.Component {\n  constructor(props){\n    super(props)\n  }\n\n  render(){\n    const tpm = this.props.values.map(value => value.tpm)\n    tpm.push(1)\n    const maxTpm = Math.max(...tpm)\n    const precision = maxTpm > 10 ? 0 : maxTpm > 1 ? 1 : 2;\n    const yMax = round(maxTpm + .1 * maxTpm, precision);\n\n    const replicaGroups = groupBy(this.props.values, 'replicaGroup')\n    const padding = {\n      top: 40,\n      bottom: 10,\n      left: 50,\n      right: 10\n    }\n    return (\n      <div className='card expression-plot'>\n        <ContainerDimensions>\n        {\n          ({width, height}) => {\n            const yScale = scaleLinear()\n              .domain([0,yMax])\n              .range([250 - padding.top - padding.bottom ,0])\n\n            return (\n              <svg width={width} height='350'>\n                <g transform={`translate(${padding.left},${padding.top})`}>\n                  <YAxis scale={yScale} numTicks='4' />\n                  <GroupedSamples groups={replicaGroups} yScale={yScale} transform='translate(20,0)'/>\n                </g>\n              </svg>\n            )\n          }\n        }\n        </ContainerDimensions>\n      </div>\n    )\n  }\n}\n\nexport default withTracker(({ gene, samples, ...props }) => {\n  const sampleInfo = groupBy(samples, '_id')\n  const sampleIds = samples.map(sample => sample._id)\n  \n  const transcriptomeSub = Meteor.subscribe('geneExpression', gene.ID);\n\n  \n  const values = Transcriptomes.find({\n    geneId: gene.ID,\n    experimentId: {\n      $in: sampleIds\n    }\n  }).fetch()\n\n  values.forEach(value => {\n    console.log(value)\n    console.log(sampleInfo[value.experimentId])\n    Object.assign(value, sampleInfo[value.experimentId][0])\n  })\n\n  return {\n    gene: gene,\n    values: values,\n    loading: !transcriptomeSub.ready()\n  }\n})(ExpressionPlot)",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/feature/ExpressionPlot.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 308,
    "kind": "function",
    "name": "round",
    "memberof": "imports/ui/feature/ExpressionPlot.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/ExpressionPlot.jsx~round",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/ExpressionPlot.jsx",
    "importStyle": null,
    "description": "https://stackoverflow.com/a/46854785/6573438",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Number to be rounded"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "Floating point precision"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Rounded Number"
    },
    "ignore": true
  },
  {
    "__docId__": 309,
    "kind": "function",
    "name": "YAxis",
    "memberof": "imports/ui/feature/ExpressionPlot.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/ExpressionPlot.jsx~YAxis",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/ExpressionPlot.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"scale\": *, \"numTicks\": *}"
        ],
        "defaultRaw": {
          "scale": null,
          "numTicks": null
        },
        "defaultValue": "{\"scale\":null,\"numTicks\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 310,
    "kind": "function",
    "name": "DotPlot",
    "memberof": "imports/ui/feature/ExpressionPlot.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/ExpressionPlot.jsx~DotPlot",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/ExpressionPlot.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"samples\": *, \"yScale\": *}"
        ],
        "defaultRaw": {
          "samples": null,
          "yScale": null
        },
        "defaultValue": "{\"samples\":null,\"yScale\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 311,
    "kind": "function",
    "name": "BarPlot",
    "memberof": "imports/ui/feature/ExpressionPlot.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/ExpressionPlot.jsx~BarPlot",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/ExpressionPlot.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"samples\": *, \"yScale\": *}"
        ],
        "defaultRaw": {
          "samples": null,
          "yScale": null
        },
        "defaultValue": "{\"samples\":null,\"yScale\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 312,
    "kind": "function",
    "name": "GroupedSamplePlot",
    "memberof": "imports/ui/feature/ExpressionPlot.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/ExpressionPlot.jsx~GroupedSamplePlot",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/ExpressionPlot.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"samples\": *, \"yScale\": *, \"transform\": *}"
        ],
        "defaultRaw": {
          "samples": null,
          "yScale": null,
          "transform": null
        },
        "defaultValue": "{\"samples\":null,\"yScale\":null,\"transform\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 313,
    "kind": "function",
    "name": "GroupedSamples",
    "memberof": "imports/ui/feature/ExpressionPlot.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/ExpressionPlot.jsx~GroupedSamples",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/ExpressionPlot.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"groups\": *, \"yScale\": *, \"transform\": *}"
        ],
        "defaultRaw": {
          "groups": null,
          "yScale": null,
          "transform": null
        },
        "defaultValue": "{\"groups\":null,\"yScale\":null,\"transform\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 314,
    "kind": "class",
    "name": "ExpressionPlot",
    "memberof": "imports/ui/feature/ExpressionPlot.jsx",
    "static": true,
    "longname": "imports/ui/feature/ExpressionPlot.jsx~ExpressionPlot",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/ExpressionPlot.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 315,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/feature/ExpressionPlot.jsx~ExpressionPlot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/feature/ExpressionPlot.jsx~ExpressionPlot#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 169,
    "undocument": true
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/feature/ExpressionPlot.jsx~ExpressionPlot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/feature/ExpressionPlot.jsx~ExpressionPlot#render",
    "access": "public",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "file",
    "name": "imports/ui/feature/Feature.jsx",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { withTracker } from 'meteor/react-meteor-data';\nimport { Job } from 'meteor/vsivsi:job-collection';\n\nimport React from 'react';\nimport { compose } from 'recompose';\n\nimport jobQueue from '/imports/api/jobqueue/jobqueue.js';\nimport { Genes } from '/imports/api/genes/gene_collection.js'; \n\nimport { withEither } from '/imports/ui/util/uiUtil.jsx';\n\nimport NotFound from '/imports/ui/main/NotFound.jsx';\n\nimport Info from './Info.jsx';\nimport GenemodelContainer from './Genemodel.jsx';\nimport SeqContainer from './Seq.jsx';\nimport ProteinDomains from './ProteinDomains.jsx'; \nimport Orthogroup from './Orthogroup.jsx';\n\nimport SampleSelection from './SampleSelection.jsx'; \nimport ExpressionPlot from './ExpressionPlot.jsx';\n\nconst Loading = props => {\n  return (\n    <div>\n      Loading...\n    </div>\n  )\n}\n\nconst isLoading = props => {\n  return props.loading\n}\n\nconst isNotFound = props => {\n  console.log(props)\n  return typeof props.gene === 'undefined'\n}\n\nconst dataTracker = props => {\n  const geneId = FlowRouter.getParam('_id');\n  const geneSub = Meteor.subscribe('singleGene', geneId);\n  return {\n    loading: !geneSub.ready(),\n    gene: Genes.findOne({ID: geneId})\n  }\n}\n\nconst withConditionalRendering = compose(\n  withTracker(dataTracker),\n  withEither(isLoading, Loading),\n  withEither(isNotFound, NotFound)\n)\n\nclass Feature extends React.Component {\n  constructor(props){\n    super(props)\n  }\n\n  runInterproscan = event => {\n    console.log(`submitting ${this.props.gene.ID} to interpro`)\n    const jobOptions = { geneId: this.props.gene.ID }\n\n    const job = new Job(jobQueue, 'interproscan', jobOptions)\n\n    job.priority('normal').save()\n  }\n\n  render(){\n    return (\n      <div className=\"container\">\n        <div className=\"card genebook-feature\">\n          <div className=\"card-header\">\n            <a className=\"navbar-brand\" href=\"#\">{this.props.gene.ID}</a>\n            <button \n              type=\"button\" \n              className=\"btn btn-sm btn-danger pull-right\" \n              onClick={this.runInterproscan}\n              >Interproscan</button>\n            <ul className=\"nav nav-tabs card-header-tabs\">\n              <li className=\"nav-item\">\n                <a className=\"nav-link active\" href=\"#info\">Info</a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"#gene-model\">Gene model</a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"#sequence\">Sequence</a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"#protein-domains\">Protein domains</a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"#expression\">Expression</a>\n              </li>\n            </ul>\n          </div>\n          <div className=\"card-body\">\n            <Info gene={this.props.gene} />\n            <section id='genemodel'>\n              <hr/>\n              <h3>Genemodel</h3>\n              <GenemodelContainer gene={this.props.gene} />\n            </section>\n            <SeqContainer gene={this.props.gene} />\n            <ProteinDomains gene={this.props.gene} />\n            {\n              this.props.gene.orthogroup &&\n              <Orthogroup gene={this.props.gene} />\n            }\n            <section id='expression'>\n              <hr />\n              <h3>Expression</h3>\n              <SampleSelection gene={this.props.gene}>\n                <ExpressionPlot gene={this.props.gene} />\n              </SampleSelection>\n            </section>\n          </div>\n          <div className=\"card-footer text-muted\">\n            Gene info\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withConditionalRendering(Feature)",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/feature/Feature.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 318,
    "kind": "function",
    "name": "Loading",
    "memberof": "imports/ui/feature/Feature.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/Feature.jsx~Loading",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Feature.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 319,
    "kind": "function",
    "name": "isLoading",
    "memberof": "imports/ui/feature/Feature.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/Feature.jsx~isLoading",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Feature.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 320,
    "kind": "function",
    "name": "isNotFound",
    "memberof": "imports/ui/feature/Feature.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/Feature.jsx~isNotFound",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Feature.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 321,
    "kind": "function",
    "name": "dataTracker",
    "memberof": "imports/ui/feature/Feature.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/Feature.jsx~dataTracker",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Feature.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"loading\": *, \"gene\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 322,
    "kind": "variable",
    "name": "withConditionalRendering",
    "memberof": "imports/ui/feature/Feature.jsx",
    "static": true,
    "longname": "imports/ui/feature/Feature.jsx~withConditionalRendering",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Feature.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 323,
    "kind": "class",
    "name": "Feature",
    "memberof": "imports/ui/feature/Feature.jsx",
    "static": true,
    "longname": "imports/ui/feature/Feature.jsx~Feature",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Feature.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 324,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/feature/Feature.jsx~Feature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/feature/Feature.jsx~Feature#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "runInterproscan",
    "memberof": "imports/ui/feature/Feature.jsx~Feature",
    "static": false,
    "longname": "imports/ui/feature/Feature.jsx~Feature#runInterproscan",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/feature/Feature.jsx~Feature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/feature/Feature.jsx~Feature#render",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "file",
    "name": "imports/ui/feature/GeneLink.jsx",
    "content": "import { withTracker } from 'meteor/react-meteor-data';\nimport { Meteor } from 'meteor/meteor';\n\nimport React from 'react';\nimport { compose } from 'recompose';\n\nimport { Genes } from '/imports/api/genes/gene_collection.js';\n\nconst withEither = (conditionalRenderingFn, EitherComponent) => (Component) => (props) =>\n  conditionalRenderingFn(props)\n    ? <EitherComponent { ...props }/>\n    : <Component { ...props } />\n\nconst Loading = (props) => {\n  return <span style={{fontSize: 10}}>...{props.transcriptId}</span>\n}\n\nconst NotFound = (props) => {\n  return <span style={{fontSize: 10}}>{props.transcriptId}</span>\n}\n\nconst GeneLink = props => {\n  return (\n    <a href={`/gene/${props.geneId}`} style={{fontSize: 10}}>\n      {props.transcriptId} {props.gene.attributes.Name}\n    </a>\n  )\n}\n\nconst isLoading = props => {\n  return props.loading;\n}\n\nconst isNotFound = props => {\n  return typeof props.gene === 'undefined';\n}\n\nconst withConditionalRendering = compose(\n  withEither(isLoading, Loading),\n  withEither(isNotFound, NotFound)\n)\n\nexport default withTracker(({geneId, transcripId }) => {\n  const geneSub = Meteor.subscribe('singleGene', geneId);\n  const loading = !geneSub.ready();\n  const gene = Genes.findOne({ID: geneId});\n  return {\n    loading,\n    geneId,\n    transcripId,\n    gene\n  }\n})(withConditionalRendering(GeneLink));\n\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/feature/GeneLink.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 328,
    "kind": "function",
    "name": "withEither",
    "memberof": "imports/ui/feature/GeneLink.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/GeneLink.jsx~withEither",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/GeneLink.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "conditionalRenderingFn",
        "types": [
          "*"
        ]
      },
      {
        "name": "EitherComponent",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 329,
    "kind": "function",
    "name": "Loading",
    "memberof": "imports/ui/feature/GeneLink.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/GeneLink.jsx~Loading",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/GeneLink.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 330,
    "kind": "function",
    "name": "NotFound",
    "memberof": "imports/ui/feature/GeneLink.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/GeneLink.jsx~NotFound",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/GeneLink.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 331,
    "kind": "function",
    "name": "GeneLink",
    "memberof": "imports/ui/feature/GeneLink.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/GeneLink.jsx~GeneLink",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/GeneLink.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 332,
    "kind": "function",
    "name": "isLoading",
    "memberof": "imports/ui/feature/GeneLink.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/GeneLink.jsx~isLoading",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/GeneLink.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 333,
    "kind": "function",
    "name": "isNotFound",
    "memberof": "imports/ui/feature/GeneLink.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/GeneLink.jsx~isNotFound",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/GeneLink.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 334,
    "kind": "variable",
    "name": "withConditionalRendering",
    "memberof": "imports/ui/feature/GeneLink.jsx",
    "static": true,
    "longname": "imports/ui/feature/GeneLink.jsx~withConditionalRendering",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/GeneLink.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 335,
    "kind": "file",
    "name": "imports/ui/feature/Genemodel.jsx",
    "content": "//import { Template } from 'meteor/templating';\nimport { withTracker } from 'meteor/react-meteor-data';\n\nimport React from 'react';\n\nimport ContainerDimensions from 'react-container-dimensions'\nimport { Popover, OverlayTrigger } from 'react-bootstrap';\nimport { scaleLinear } from 'd3-scale';\n\nimport './genemodel.scss'\n\n\nconst XAxis = ({ scale, numTicks, transform, seqid }) => {\n  const range = scale.range();\n\n  const [start, end] = scale.domain();\n\n  const stepSize = Math.round((end - start) / numTicks);\n\n  const ticks = [];\n\n  for (let i = 1; i < numTicks; i++) {\n     ticks.push(start + (i * stepSize));\n  }\n\n  return (\n    <g className = 'x-axis' transform={transform}>\n      <line x1={range[0]} x2={range[1]} y1='5' y2='5' stroke='black'/>\n      <g>\n        <line x1={range[0]} x2={range[0]} y1='0' y2='5' stroke='black'/>\n        <text x={range[0]} y='-10' dy='5' textAnchor='left' fontSize='10'>{start}</text>\n      </g>\n      {\n        ticks.map(tick => {\n          const pos = scale(tick)\n          return (\n            <g key={tick}>\n              <line x1={pos} x2={pos} y1='0' y2='5' stroke='black' />\n              <text x={pos} y='-10' dy='5' textAnchor='middle' fontSize='10'>{ tick }</text>\n            </g>\n          )\n        })\n      }\n      <g>\n        <line x1 = {range[1]} x2 = {range[1]} y1 = '0' y2 = '5' stroke='black'/>\n        <text x={range[1]} y='-10' dy='5' textAnchor='end' fontSize='10'>{end}</text>\n      </g>\n      <text x={range[0]} y='15' dy='5' textAnchor='left' fontSize='11'>{seqid}</text>\n    </g>\n  )\n}\n\n\nconst Transcript = ({transcript, exons, scale, strand}) => {\n  //put CDS exons last so they get drawn last and are placed on top\n  exons.sort((exon1,exon2) => {\n    return exon1.type === 'CDS' ? 1 : -1\n  })\n\n  //flip start and end coordinates based on strand so that marker end is always drawn correctly\n  const x1 = strand === '+' ? transcript.start : transcript.end;\n  const x2 = strand === '+' ? transcript.end : transcript.start;\n  \n  return (\n    <g>\n      <line \n        x1={scale(x1)} \n        x2={scale(x2)} \n        y1='5' \n        y2='5' \n        stroke='black'\n        markerEnd='url(#arrowEnd)'\n      />\n      {\n        exons.map(exon => {\n          return (\n            <rect \n              key={exon.ID} \n              x={scale(exon.start)} \n              width={scale(exon.end) - scale(exon.start)} \n              y={exon.type === 'CDS' ? 0 : 2.5} \n              height={exon.type === 'CDS' ? 10 : 5}\n              fill={exon.type === 'CDS' ? 'darkorange' : 'brown'}/>\n          )\n        })\n      }\n    </g>\n  )\n}\n\nconst Genemodel = ({gene, transcripts, width, scale}) => {\n  return (\n    <g className='genemodel'>\n      {\n        transcripts.map((transcript,index) => {\n          const exons = gene.subfeatures.filter(subfeature => subfeature.parents.indexOf(transcript.ID) >= 0)\n          return (\n            <g key={index} className='transcript' transform={`translate(0,${index * 12})`} >\n              <Transcript exons={exons} transcript={transcript} scale={scale} strand={gene.strand}/>\n            </g>\n          )\n        })\n      }\n    </g>\n  )\n}\n\n\nclass GenemodelContainer extends React.Component {\n  constructor(props){\n    super(props)\n  }\n  render(){\n    const gene = this.props.gene;\n    const geneLength = gene.end - gene.start;\n    const padding = Math.round(.1 * geneLength);\n    const start = Math.max(0, gene.start - padding)\n    const end = gene.end + padding;\n\n    const transcripts = gene.subfeatures.filter(subfeature => subfeature.type === 'mRNA');\n    return (\n      <div className='card genemodel'>\n        <ContainerDimensions>\n          {\n            ({width,height}) => {\n              const scale = scaleLinear().domain([start,end]).range([.05 * width, .90 * width])\n              return (\n                <svg width={width} height={12 * transcripts.length + 40} className='genemodel-container'>\n                  <Genemodel gene={gene} transcripts={transcripts} width={width} scale={scale}/>\n                  <XAxis \n                    scale={scale} \n                    numTicks='4' \n                    transform={`translate(0,${ 12 * transcripts.length + 15})`}\n                    seqid={gene.seqid}/>\n                  <defs>\n                    <marker id='arrowEnd' markerWidth='15' markerHeight='10' refX='0' refY='5' orient='auto'>\n                      <path d='M0,5 L15,5 L10,10 M10,0 L15,5' fill='none' stroke='black' strokeWidth='1'/>\n                    </marker>\n                  </defs>\n                </svg>\n              )\n            }\n          }\n        </ContainerDimensions>\n      </div>\n    )\n  }\n}\n\nexport default withTracker(props => {\n  return {\n    gene:props.gene\n  }\n})(GenemodelContainer)",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/feature/Genemodel.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 336,
    "kind": "function",
    "name": "XAxis",
    "memberof": "imports/ui/feature/Genemodel.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/Genemodel.jsx~XAxis",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Genemodel.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"scale\": *, \"numTicks\": *, \"transform\": *, \"seqid\": *}"
        ],
        "defaultRaw": {
          "scale": null,
          "numTicks": null,
          "transform": null,
          "seqid": null
        },
        "defaultValue": "{\"scale\":null,\"numTicks\":null,\"transform\":null,\"seqid\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 337,
    "kind": "function",
    "name": "Transcript",
    "memberof": "imports/ui/feature/Genemodel.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/Genemodel.jsx~Transcript",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Genemodel.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"transcript\": *, \"exons\": *, \"scale\": *, \"strand\": *}"
        ],
        "defaultRaw": {
          "transcript": null,
          "exons": null,
          "scale": null,
          "strand": null
        },
        "defaultValue": "{\"transcript\":null,\"exons\":null,\"scale\":null,\"strand\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 338,
    "kind": "function",
    "name": "Genemodel",
    "memberof": "imports/ui/feature/Genemodel.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/Genemodel.jsx~Genemodel",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Genemodel.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"gene\": *, \"transcripts\": *, \"width\": *, \"scale\": *}"
        ],
        "defaultRaw": {
          "gene": null,
          "transcripts": null,
          "width": null,
          "scale": null
        },
        "defaultValue": "{\"gene\":null,\"transcripts\":null,\"width\":null,\"scale\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 339,
    "kind": "class",
    "name": "GenemodelContainer",
    "memberof": "imports/ui/feature/Genemodel.jsx",
    "static": true,
    "longname": "imports/ui/feature/Genemodel.jsx~GenemodelContainer",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Genemodel.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 340,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/feature/Genemodel.jsx~GenemodelContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/feature/Genemodel.jsx~GenemodelContainer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/feature/Genemodel.jsx~GenemodelContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/feature/Genemodel.jsx~GenemodelContainer#render",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "file",
    "name": "imports/ui/feature/Info.jsx",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { Template } from 'meteor/templating';\nimport { withTracker } from 'meteor/react-meteor-data';\n\nimport React from 'react';\nimport find from 'lodash/find';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { diff, apply } from 'rus-diff'; \n\nimport { EditHistory } from '/imports/api/genes/edithistory_collection.js';\nimport { Attributes } from '/imports/api/genes/attribute_collection.js';\n\nimport './info.scss';\n\nconst canEdit = () => {\n  return true\n}\n\nconst Controls = (props) => {\n  return (\n    <div>\n      {\n        props.showHistory &&\n        <button type=\"button\" className=\"btn btn-outline-secondary btn-sm pull-right viewingHistory\" onClick={props.toggleHistory}>\n          <i className=\"fa fa-history\" aria-hidden=\"true\"></i> Hide history\n        </button>\n      }\n      {\n        props.totalVersionNumber > 0 && !props.isEditing && !props.showHistory &&\n        <button type=\"button\" className=\"btn btn-outline-secondary btn-sm pull-right viewingHistory\" onClick={props.toggleHistory}>\n          <i className=\"fa fa-history\" aria-hidden=\"true\"></i> \n          &nbsp;Show history&nbsp;\n          <span className=\"badge badge-secondary\">{ props.totalVersionNumber }</span>\n        </button>\n      }\n      {\n        canEdit() && !props.isEditing && !props.showHistory &&\n        <button type=\"button\" className=\"btn btn-outline-secondary btn-sm pull-right edit\" onClick={props.startEdit}>\n          <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i> Edit\n        </button>\n      }\n      {\n        canEdit() && props.isEditing && !props.showHistory &&\n        <div className=\"btn-group pull-right\">\n          <button type=\"button\" className=\"btn btn-outline-success btn-sm save\" onClick={props.saveEdit}>\n            <i className=\"fa fa-floppy-o\" aria-hidden=\"true\"></i> Save\n          </button>\n          <button type=\"button\" className=\"btn btn-danger btn-sm cancel\" onClick={props.cancelEdit}>\n            <i className=\"fa fa-times\" aria-hidden=\"true\"></i> Cancel\n          </button>\n        </div>\n      }\n    </div>\n  )\n}\n\nconst VersionHistory = (props) => {\n  const hasNextVersion = props.currentVersionNumber < props.totalVersionNumber;\n  const hasPreviousVersion = props.currentVersionNumber != 0;\n  return (\n    <div>\n      <div className=\"alert alert-danger\" role=\"alert\">\n        <i className=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n        You are watching version <b>{ props.currentVersionNumber } / { props.totalVersionNumber } </b> \n        of this gene by { props.editBy } at { props.editAt }.\n        { \n          Roles.userIsInRole(Meteor.userId(),'admin') &&\n          <a href=\"#\" className=\"alert-link\" onClick = {props.restoreVersion}>Click here to revert to this version.</a>\n        }\n      </div>\n      <div className=\"pager\">\n        <button className=\"btn btn-sm btn-dark\" name=\"previous\" onClick={ props.selectVersion } disabled={!hasPreviousVersion}>\n          <i className={`fa ${hasPreviousVersion ? 'fa-arrow-left' : 'fa-ban'}`} aria-hidden=\"true\"></i> Older\n        </button>\n        <button className=\"btn btn-sm btn-dark pull-right\" name=\"next\" onClick={ props.selectVersion } disabled={!hasNextVersion}>\n          Newer <i className={`fa ${hasNextVersion ? 'fa-arrow-right' : 'fa-ban'}`} aria-hidden=\"true\"></i>\n        </button>\n      </div>\n    </div>\n  )\n}\n\nconst AttributeInput = (props) => {\n  return (\n    <div className=\"input-group\">\n      <input \n        type = \"text\" \n        className = \"form-control\" \n        onChange = { props.onChange } \n        name = { props.name } \n        value = { props.value } />\n      <div className=\"input-group-append\">\n        <button \n          type=\"button\"\n          className=\"btn btn-danger\"\n          name={props.name}\n          onClick = {props.deleteAttribute.bind(this,props.name)}>\n          <span className=\"fa fa-trash-o\"/>\n        </button>\n      </div>\n    </div>\n  )\n}\n\nclass Info extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      reversions: 0,\n      attributes: this.props.gene.attributes,\n      newAttributes: undefined,\n      isEditing: false,\n      addingNewAttribute: false,\n      showHistory: false,\n      newAttributeKey: undefined,\n      newAttributeValue: undefined\n    }\n  }\n\n  selectVersion = (version) => {\n    this.setState({reversions: version})\n  }\n\n  startEdit = () => {\n    console.log('start editing')\n    //implement logic to lock gene from being edited by others\n    this.setState({ isEditing: true })\n  }\n\n  saveEdit = () => {\n    console.log('save edit')\n    console.log(this.state)\n    \n    const oldGene = this.props.gene;\n    oldGene.attributes = this.state.attributes;\n    \n    const newGene = cloneDeep(this.props.gene);\n    if (this.state.newAttributes){\n      newGene.attributes = this.state.newAttributes\n    }\n    newGene.changed = true;\n    if (this.state.newAttributeKey || this.state.newAttributeValue){\n      if (!(this.state.newAttributeKey && this.state.newAttributeValue)){\n        if (!this.state.newAttributeKey){\n          alert('New attribute key required')\n        } else {\n          alert('New attribute value required!')\n        }\n        throw new Meteor.Error('Incorrect new attribute')\n      } else {\n        if (!newGene.attributes){\n          newGene.attributes = {}\n        }\n        newGene.attributes[this.state.newAttributeKey] = this.state.newAttributeValue;\n      }\n    }\n\n    const update = diff(oldGene, newGene)\n    const revert = diff(newGene, oldGene)\n    const geneId = this.props.gene.ID;\n\n    Meteor.call('updateGeneInfo',geneId,update,revert,(err,res) => {\n      if (err) {\n        console.error(err)\n      }\n      if (res) {\n        console.log(res)\n      }\n    })\n    //save changes and unlock gene so it can be edited by others again\n    this.setState({ \n      isEditing: false,\n      newAttributes: undefined,\n      attributes: this.state.newAttributes,\n      addingNewAttribute: false\n    })\n  }\n\n  cancelEdit = () => {\n    console.log('cancel edit')\n    //unlock gene so it can be edited by others again\n    this.setState({ \n      isEditing: false,\n      newAttributes: undefined,\n      addingNewAttribute: false \n    })\n  }\n\n  restoreVersion = () => {\n    console.log('restoreVersion')\n  }\n\n  deleteAttribute = (key) => {\n    let attributes = this.state.newAttributes ? cloneDeep(this.state.newAttributes) : cloneDeep(this.state.attributes);\n    delete attributes[key];\n    this.setState({\n      newAttributes: attributes\n    })\n  }\n\n  changeAttributeValue = (event) => {\n    event.preventDefault();\n    const value = event.target.value;\n    const key = event.target.name;\n    let attributes = this.state.newAttributes ? this.state.newAttributes : cloneDeep(this.state.attributes);\n    attributes[key] = value;\n    this.setState({\n      newAttributes: attributes\n    })\n  }\n\n  startAddingAttribute = () => {\n    this.setState({\n      addingNewAttribute: true\n    })\n  }\n\n  addNewAttributeKey = (event) => {\n    const newAttributeKey = event.target.value;\n    this.setState({\n      newAttributeKey: newAttributeKey\n    })\n  }\n\n  addNewAttributeValue = (event) => {\n    const addNewAttributeValue = event.target.value;\n    this.setState({\n      newAttributeValue: addNewAttributeValue\n    })\n  }\n\n  toggleHistory = () => {\n    this.setState({\n      reversions: 0,\n      showHistory: !this.state.showHistory,\n      newAttributes: undefined,\n      attributes: this.props.gene.attributes\n    })\n  }\n\n  selectVersion = (event) => {\n    const increment = event.target.name === 'previous' ? 1 : -1\n    const reversions = this.state.reversions + increment;\n    if (0 <= reversions && reversions <= this.props.editHistory.length){\n      const gene = this.props.editHistory.slice(0, reversions).reduce( (gene,reversion) => {\n        apply(gene,JSON.parse(reversion.revert))\n        return gene\n      },cloneDeep(this.props.gene))\n\n      const attributes = gene.attributes;\n      this.setState({\n        reversions: reversions,\n        attributes: attributes\n      })\n    }\n  }\n\n  render(){\n    const gene = this.props.gene;\n    const attributes = this.state.newAttributes ? this.state.newAttributes : this.state.attributes;\n\n    const currentVersion = this.props.editHistory[0]\n\n    const interproDomains = gene.subfeatures.filter(sub => {\n      return sub.type === 'mRNA' && typeof sub.protein_domains !== 'undefined'\n    }).map(sub => {\n      return sub.protein_domains.filter(domain => {\n        return typeof domain.dbxref !== 'undefined'\n      }).map(domain => {\n        return domain.dbxref.filter(dbxref => /^InterPro.*/.test(dbxref))\n      })\n    })\n\n    //console.log(interproDomains)\n\n    return (\n      <div id=\"info\">\n        <Controls\n          showHistory = { this.state.showHistory }\n          toggleHistory = { this.toggleHistory }\n          totalVersionNumber = { this.props.editHistory.length }\n          currentVersionNumber = { this.props.editHistory.length - this.state.reversions }\n          isEditing = { this.state.isEditing }\n          startEdit = { this.startEdit }\n          saveEdit = { this.saveEdit }\n          cancelEdit = { this.cancelEdit }\n        />\n        <h3>General information</h3>\n        {\n          this.state.showHistory &&\n          <VersionHistory \n            currentVersionNumber = { this.props.editHistory.length - this.state.reversions }\n            totalVersionNumber = { this.props.editHistory.length }\n            selectVersion = { this.selectVersion }\n            restoreVersion = { this.restoreVersion }\n            editBy = { currentVersion.user }\n            editAt = { currentVersion.date.toDateString() } />\n        }\n        <div className=\"table-responive\">\n          <table className=\"table table-hover\">\n            <tbody>\n              <tr>\n                <td>Reference</td>\n                <td>{ gene.reference }</td>\n              </tr>\n              <tr>\n                <td>Genome coordinates</td>\n                <td>{ gene.seqid } { gene.start }..{gene.end} { gene.strand }</td>\n              </tr>\n              <tr>\n                <td>Source</td>\n                <td>{ gene.source }</td>\n              </tr>\n              {\n                gene.orthogroup &&\n                <tr>\n                  <td>Orthogroup</td>\n                  <td>{ gene.orthogroup }</td>\n                </tr>\n              }\n              { attributes &&\n                Object.keys(attributes).map(key => {\n                  const value = attributes[key];\n                  return (\n                    <tr key = { key }>\n                      <td>\n                        { key }\n                      </td>\n                      <td>\n                        {\n                          this.state.isEditing ?\n                          <AttributeInput \n                            name = {key} \n                            value = {value} \n                            onChange = {this.changeAttributeValue}\n                            deleteAttribute = {this.deleteAttribute} /> :\n                          value\n                        }\n                      </td>\n                    </tr>\n                  )\n                })\n              }\n              {\n                this.state.isEditing && this.state.addingNewAttribute &&\n                <tr>\n                  <td>\n                    <div className=\"input-group\">\n                      <span className=\"input-group-addon\">Key</span>\n                      <input\n                        list = 'attributes'\n                        type = 'text'\n                        className = 'form-control'\n                        onChange = { this.addNewAttributeKey } />\n                      <datalist id='attributes'>\n                        {\n                          this.props.attributeNames.map(attributeName => {\n                            return (\n                              <option value={attributeName} key={attributeName} />\n                            )\n                          })\n                        }\n                      </datalist>\n                    </div>\n                  </td>\n                  <td>\n                    <div className='input-group'>\n                      <span className=\"input-group-addon\">Value</span>\n                      <input\n                        type = 'text'\n                        className = 'form-control'\n                        onChange = { this.addNewAttributeValue } />\n                    </div>\n                  </td>\n                </tr>\n              }\n            </tbody>\n          </table>\n          {\n            this.state.isEditing && !this.state.addingNewAttribute &&\n            <div className = 'text-center'>\n              <button \n                type = 'button'\n                className = 'btn btn-success'\n                onClick = {this.startAddingAttribute}>\n                Add new attribute\n              </button>\n            </div>\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withTracker( props => {\n  Meteor.subscribe('editHistory');\n  Meteor.subscribe('attributes');\n  //Meteor.subscribe('singleGene',props.gene.ID)\n\n  const editHistory = EditHistory.find({\n      ID: props.gene.ID\n    },{\n      sort: {\n        date: -1\n      }\n    }).fetch();\n\n  const attributeNames = Attributes.find({\n    reserved: false\n  },{\n    field: name\n  }).map( attribute => attribute.name)\n\n  return {\n    gene: props.gene,\n    editHistory: editHistory,\n    attributeNames: attributeNames\n  }\n})(Info);",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/feature/Info.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 343,
    "kind": "function",
    "name": "canEdit",
    "memberof": "imports/ui/feature/Info.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/Info.jsx~canEdit",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Info.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 344,
    "kind": "function",
    "name": "Controls",
    "memberof": "imports/ui/feature/Info.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/Info.jsx~Controls",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Info.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 345,
    "kind": "function",
    "name": "VersionHistory",
    "memberof": "imports/ui/feature/Info.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/Info.jsx~VersionHistory",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Info.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 346,
    "kind": "function",
    "name": "AttributeInput",
    "memberof": "imports/ui/feature/Info.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/Info.jsx~AttributeInput",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Info.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 347,
    "kind": "class",
    "name": "Info",
    "memberof": "imports/ui/feature/Info.jsx",
    "static": true,
    "longname": "imports/ui/feature/Info.jsx~Info",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Info.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 348,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/feature/Info.jsx~Info",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/feature/Info.jsx~Info#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true
  },
  {
    "__docId__": 349,
    "kind": "member",
    "name": "state",
    "memberof": "imports/ui/feature/Info.jsx~Info",
    "static": false,
    "longname": "imports/ui/feature/Info.jsx~Info#state",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "{\"reversions\": *, \"attributes\": *, \"newAttributes\": *, \"isEditing\": *, \"addingNewAttribute\": *, \"showHistory\": *, \"newAttributeKey\": *, \"newAttributeValue\": *}"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "member",
    "name": "selectVersion",
    "memberof": "imports/ui/feature/Info.jsx~Info",
    "static": false,
    "longname": "imports/ui/feature/Info.jsx~Info#selectVersion",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 351,
    "kind": "member",
    "name": "startEdit",
    "memberof": "imports/ui/feature/Info.jsx~Info",
    "static": false,
    "longname": "imports/ui/feature/Info.jsx~Info#startEdit",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 352,
    "kind": "member",
    "name": "saveEdit",
    "memberof": "imports/ui/feature/Info.jsx~Info",
    "static": false,
    "longname": "imports/ui/feature/Info.jsx~Info#saveEdit",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "member",
    "name": "cancelEdit",
    "memberof": "imports/ui/feature/Info.jsx~Info",
    "static": false,
    "longname": "imports/ui/feature/Info.jsx~Info#cancelEdit",
    "access": "public",
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "member",
    "name": "restoreVersion",
    "memberof": "imports/ui/feature/Info.jsx~Info",
    "static": false,
    "longname": "imports/ui/feature/Info.jsx~Info#restoreVersion",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "member",
    "name": "deleteAttribute",
    "memberof": "imports/ui/feature/Info.jsx~Info",
    "static": false,
    "longname": "imports/ui/feature/Info.jsx~Info#deleteAttribute",
    "access": "public",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 356,
    "kind": "member",
    "name": "changeAttributeValue",
    "memberof": "imports/ui/feature/Info.jsx~Info",
    "static": false,
    "longname": "imports/ui/feature/Info.jsx~Info#changeAttributeValue",
    "access": "public",
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "member",
    "name": "startAddingAttribute",
    "memberof": "imports/ui/feature/Info.jsx~Info",
    "static": false,
    "longname": "imports/ui/feature/Info.jsx~Info#startAddingAttribute",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "member",
    "name": "addNewAttributeKey",
    "memberof": "imports/ui/feature/Info.jsx~Info",
    "static": false,
    "longname": "imports/ui/feature/Info.jsx~Info#addNewAttributeKey",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 359,
    "kind": "member",
    "name": "addNewAttributeValue",
    "memberof": "imports/ui/feature/Info.jsx~Info",
    "static": false,
    "longname": "imports/ui/feature/Info.jsx~Info#addNewAttributeValue",
    "access": "public",
    "description": null,
    "lineNumber": 225,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 360,
    "kind": "member",
    "name": "toggleHistory",
    "memberof": "imports/ui/feature/Info.jsx~Info",
    "static": false,
    "longname": "imports/ui/feature/Info.jsx~Info#toggleHistory",
    "access": "public",
    "description": null,
    "lineNumber": 232,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/feature/Info.jsx~Info",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/feature/Info.jsx~Info#render",
    "access": "public",
    "description": null,
    "lineNumber": 258,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "file",
    "name": "imports/ui/feature/Orthogroup.jsx",
    "content": "import { withTracker } from 'meteor/react-meteor-data';\nimport { Meteor } from 'meteor/meteor';\n\nimport React from 'react';\nimport ContainerDimensions from 'react-container-dimensions';\nimport { cluster, tree, hierarchy } from 'd3';\n\nimport { Orthogroups } from '/imports/api/genes/orthogroup_collection.js';\n\nimport GeneLink from './GeneLink.jsx';\n\nconst Loading = props => {\n  return (\n    <div className='card tree'>\n    </div>\n  )\n}\n\nconst TreeBranches = ({nodes}) => {\n  return nodes.map(node => {\n    const d = `\n      M${node.parent.y},${node.parent.x} \n      L${node.parent.y},${node.x} \n      L${node.y},${node.x}`;\n    return <path key={d} d={d} style={{fill: 'none', stroke: 'black', strokeWidth: 1}}/>\n  })\n}\n\nconst TreeNodes = ({nodes}) => {\n  const tipNodes = nodes.filter(node => node.data.name.length > 0);\n  return tipNodes.map(node => {\n    const transcriptId = node.data.name\n    const geneId = transcriptId.split('.').slice(0,-1).join('.');\n    return (\n      <g key={transcriptId}>\n        <circle cy={node.x} cx={node.y} r='3' />\n        <foreignObject width='300' height='10' x={node.y + 10} y={node.x - 15}>\n          <GeneLink transcriptId={transcriptId} geneId={geneId} />\n        </foreignObject>\n      </g>\n    )\n  })\n}\n\nconst Tree = ({orthogroup}) => {\n  return (\n    <div className='card tree'>\n      <ContainerDimensions>\n        {\n          ({width, height}) =>{\n            const svgHeight = orthogroup.size * 20;\n            const treeMap = cluster()\n              .size([svgHeight, width - 300])\n              .separation((node1,node2) => { return 1})\n            const treeRoot = hierarchy(orthogroup.tree, node => node.branchset);\n\n            const treeData = treeMap(treeRoot).sum(node => node.branchLength);\n            const nodes = treeData.descendants().filter(node => node.parent);\n            \n\n            return (\n              <svg width={width - 10} height={svgHeight}>\n                <g transform={`translate(10,0)`}>\n                  <TreeBranches nodes={nodes} />\n                  <TreeNodes nodes={nodes} />\n                </g>\n              </svg>\n            )\n          }\n        }\n      </ContainerDimensions>\n    </div>\n  )\n}\n\nclass Orthogroup extends React.Component {\n  constructor(props){\n    super(props)\n  }\n  render(){\n    return (\n      <div id=\"orthogroup\">\n        <hr />\n        <h3>Orthogroup</h3>\n        {\n          this.props.loading ?\n          <Loading /> :\n          <Tree orthogroup={this.props.orthogroup}/>\n        }\n      </div>\n    )\n  }\n}\n\nexport default withTracker(props => {\n  const orthoSub = Meteor.subscribe('orthogroups', props.gene.orthogroup);\n  const orthogroup = Orthogroups.findOne({ID: props.gene.orthogroup});\n  return {\n    loading: !orthoSub.ready(),\n    gene: props.gene,\n    orthogroup: orthogroup\n  }\n})(Orthogroup);",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/feature/Orthogroup.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 364,
    "kind": "function",
    "name": "Loading",
    "memberof": "imports/ui/feature/Orthogroup.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/Orthogroup.jsx~Loading",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Orthogroup.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 365,
    "kind": "function",
    "name": "TreeBranches",
    "memberof": "imports/ui/feature/Orthogroup.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/Orthogroup.jsx~TreeBranches",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Orthogroup.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"nodes\": *}"
        ],
        "defaultRaw": {
          "nodes": null
        },
        "defaultValue": "{\"nodes\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 366,
    "kind": "function",
    "name": "TreeNodes",
    "memberof": "imports/ui/feature/Orthogroup.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/Orthogroup.jsx~TreeNodes",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Orthogroup.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"nodes\": *}"
        ],
        "defaultRaw": {
          "nodes": null
        },
        "defaultValue": "{\"nodes\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 367,
    "kind": "function",
    "name": "Tree",
    "memberof": "imports/ui/feature/Orthogroup.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/Orthogroup.jsx~Tree",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Orthogroup.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"orthogroup\": *}"
        ],
        "defaultRaw": {
          "orthogroup": null
        },
        "defaultValue": "{\"orthogroup\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 368,
    "kind": "class",
    "name": "Orthogroup",
    "memberof": "imports/ui/feature/Orthogroup.jsx",
    "static": true,
    "longname": "imports/ui/feature/Orthogroup.jsx~Orthogroup",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Orthogroup.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 369,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/feature/Orthogroup.jsx~Orthogroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/feature/Orthogroup.jsx~Orthogroup#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/feature/Orthogroup.jsx~Orthogroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/feature/Orthogroup.jsx~Orthogroup#render",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "file",
    "name": "imports/ui/feature/ProteinDomains.jsx",
    "content": "import React from 'react';\nimport { scaleLinear } from 'd3-scale';\nimport ContainerDimensions from 'react-container-dimensions';\nimport { groupBy } from 'lodash';\n\nimport { getGeneSequences } from '/imports/api/util/util.js';\n/*\nMedtr1g004960\nMedtr1g004980\nMedtr1g004990\nMedtr1g006490\nMedtr1g006590\nMedtr1g006600\nMedtr1g006605\nMedtr1g006660\nMedtr1g006690\n */\n\nconst XAxis = ({ scale, numTicks, transform, seqid }) => {\n  const range = scale.range();\n\n  const [start, end] = scale.domain();\n\n  const stepSize = Math.round((end - start) / numTicks);\n\n  const ticks = [start];\n\n  for (let i = 1; i < numTicks; i++) {\n     ticks.push(start + (i * stepSize));\n  }\n  ticks.push(end)\n  return (\n    <g className = 'x-axis' transform={transform}>\n      <text className='axis-label' x={range[0]} y='0' dy='5' textAnchor='left' fontSize='11'>{seqid}</text>\n      <line className='backbone' x1={range[0]} x2={range[1]} y1='25' y2='25' stroke='black'/>\n      {\n        ticks.map((tick, tickIndex) => {\n          const pos = scale(tick)\n          let textAnchor;\n          if (tickIndex === 0){\n            textAnchor = 'start';\n          } else if (tickIndex === ticks.length - 1){\n            textAnchor = 'end';\n          } else {\n            textAnchor = 'middle';\n          }\n          return (\n            <g className='tick' key={tick}>\n              <line x1={pos} x2={pos} y1='20' y2='25' stroke='black' />\n              <text x={pos} y='10' dy='5' textAnchor={textAnchor} fontSize='10'>{ tick }</text>\n            </g>\n          )\n        })\n      }\n    </g>\n  )\n}\n\nconst SourceGroup = ({source, domains, transform, scale}) => {\n  return (\n    <g transform={transform}>\n      {\n        domains.map((domain, domainIndex) => {\n          return <rect \n            x={scale(domain.start)}\n            width={scale(domain.end) - scale(domain.start)}\n            y='0'\n            height='8'\n            rx='4'\n            ry='4'\n            key={`${domain.name}${domainIndex}`} \n            style={{\n              fill: 'white',\n              stroke:'black',\n              strokeWidth: 1,\n              fillOpacity: .5\n            }}/>\n        })\n      }\n    </g>\n  )\n}\n\nconst InterproGroup = ({interproId, sourceGroups, transform, scale}) => {\n  const label = typeof interproId !== 'undefined' ? interproId : 'Unintegrated signature';\n  return (\n    <g transform={transform}>\n      <foreignObject width='400' height='30' x='0' y='-30'>\n        <a href=\"#\" className=\"badge badge-dark\">{label}</a>\n      </foreignObject>\n      {\n        Object.entries(sourceGroups).map((domainGroup, sourceIndex) => {\n          const [source, domains] = domainGroup;\n          return <SourceGroup \n            key={source}\n            source={source}\n            domains={domains}\n            transform={`translate(0,${sourceIndex * 10})`}\n            index={sourceIndex}\n            scale={scale} />\n        })\n      }\n    </g>\n  )\n}\n\nexport default class ProteinDomains extends React.Component {\n  constructor(props){\n    super(props)\n  }\n  render(){\n    const sequences = getGeneSequences(this.props.gene);\n    const transcripts = this.props.gene.subfeatures.filter(sub =>  sub.type == 'mRNA');\n    const transcript = transcripts.filter(transcript => transcript.ID.endsWith('1'))[0];\n    const transcriptSequence = sequences.filter(seq => seq.ID === transcript.ID)[0]\n    const transcriptSize = transcriptSequence.pep.length;\n    \n\n    \n    const interproGroups = Object.entries(groupBy(transcript.protein_domains, 'interpro'));\n    const totalGroups = interproGroups.length;\n    let totalDomains = 0;\n    const sortedDomains = interproGroups.map(domainGroup => {\n      const [ interproId, domains ] = domainGroup;\n      const sourceGroups = Object.entries(groupBy(domains, 'name'));\n      totalDomains += sourceGroups.length;\n      return sourceGroups\n    })\n\n\n\n    const margin = {\n      top: 10,\n      bottom: 10,\n      left: 20,\n      right: 20\n    }\n    \n    return (\n      <div id=\"protein-domains\">\n        <hr />\n        <h3>Protein domains</h3>\n        <div className=\"card protein-domains-container\">\n          <ContainerDimensions>\n          {\n            ({width, height}) => {\n              const svgWidth = width - margin.left - margin.right;\n              const svgHeight = (totalGroups * 30) + ( totalDomains * 10 ) + margin.top + margin.bottom + 40;\n              const scale = scaleLinear().domain([0, transcriptSize]).range([0, svgWidth])\n              let domainCount = 0;\n              return (\n                <svg \n                  width={svgWidth} \n                  height={svgHeight}\n                  style={{\n                    marginLeft: margin.left,\n                    marginTop: margin.top\n                  }} >\n                  <XAxis scale={scale} numTicks={5} transform='translate(0,10)' seqid={transcript.ID}/>\n                  <g className='domains' transform='translate(0,40)'>\n                  {\n                    interproGroups.map((domainGroup, index) => {\n                      const [interproId, domains] = domainGroup;\n                      const sourceGroups = groupBy(domains, 'name');\n                      const yTransform = ((index + 1) * 30) + (domainCount * 10);\n                      const transform = `translate(0,${yTransform})`;\n                      domainCount += Object.entries(sourceGroups).length;\n                      return <InterproGroup \n                        key={interproId} \n                        interproId={interproId} \n                        sourceGroups={sourceGroups} \n                        transform={transform}\n                        scale={scale} />\n                    })\n                  }\n                  </g>\n                </svg>\n              )\n            }\n          }\n          </ContainerDimensions>\n        </div>\n      </div>\n    )\n  }\n}",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/feature/ProteinDomains.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 372,
    "kind": "function",
    "name": "XAxis",
    "memberof": "imports/ui/feature/ProteinDomains.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/ProteinDomains.jsx~XAxis",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/ProteinDomains.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"scale\": *, \"numTicks\": *, \"transform\": *, \"seqid\": *}"
        ],
        "defaultRaw": {
          "scale": null,
          "numTicks": null,
          "transform": null,
          "seqid": null
        },
        "defaultValue": "{\"scale\":null,\"numTicks\":null,\"transform\":null,\"seqid\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 373,
    "kind": "function",
    "name": "SourceGroup",
    "memberof": "imports/ui/feature/ProteinDomains.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/ProteinDomains.jsx~SourceGroup",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/ProteinDomains.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"source\": *, \"domains\": *, \"transform\": *, \"scale\": *}"
        ],
        "defaultRaw": {
          "source": null,
          "domains": null,
          "transform": null,
          "scale": null
        },
        "defaultValue": "{\"source\":null,\"domains\":null,\"transform\":null,\"scale\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 374,
    "kind": "function",
    "name": "InterproGroup",
    "memberof": "imports/ui/feature/ProteinDomains.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/ProteinDomains.jsx~InterproGroup",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/ProteinDomains.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"interproId\": *, \"sourceGroups\": *, \"transform\": *, \"scale\": *}"
        ],
        "defaultRaw": {
          "interproId": null,
          "sourceGroups": null,
          "transform": null,
          "scale": null
        },
        "defaultValue": "{\"interproId\":null,\"sourceGroups\":null,\"transform\":null,\"scale\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 375,
    "kind": "class",
    "name": "ProteinDomains",
    "memberof": "imports/ui/feature/ProteinDomains.jsx",
    "static": true,
    "longname": "imports/ui/feature/ProteinDomains.jsx~ProteinDomains",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/feature/ProteinDomains.jsx",
    "importStyle": "ProteinDomains",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 376,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/feature/ProteinDomains.jsx~ProteinDomains",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/feature/ProteinDomains.jsx~ProteinDomains#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/feature/ProteinDomains.jsx~ProteinDomains",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/feature/ProteinDomains.jsx~ProteinDomains#render",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 378,
    "kind": "file",
    "name": "imports/ui/feature/SampleSelection.jsx",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { withTracker } from 'meteor/react-meteor-data';\n\nimport React from 'react';\nimport Select from 'react-select';\nimport { groupBy } from 'lodash';\nimport update from 'immutability-helper';\n\nimport { ExperimentInfo } from '/imports/api/transcriptomes/transcriptome_collection.js';\n\nclass SampleSelection extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      options: [],\n      selection: []\n    }\n  }\n  componentWillReceiveProps = nextProps => {\n    console.log(nextProps)\n    const options = Object.keys(nextProps.replicaGroups).map(replicaGroup => {\n      return {\n        value: replicaGroup,\n        label: replicaGroup\n      }\n    })\n    const selection = options.map(option => option.value)\n    this.setState({\n      options,\n      selection\n    })\n  }\n\n  updateSelection = newSelection => {\n    const newState = update(this.state, {\n      selection: {\n        $set: newSelection.map( selection => selection.value)\n      }\n    })\n    this.setState(newState)\n  }\n\n  renderChildren = () => {\n    const samples = this.state.selection.map(replicaGroupId => {\n      return this.props.replicaGroups[replicaGroupId].map(sample => {\n        return sample\n      })\n    })\n\n\n    return React.Children.map(this.props.children, child => {\n      return React.cloneElement(child, {\n        samples: [].concat(...samples)\n      })\n    })\n  }\n\n  render(){\n    return (\n      <div>\n        <Select \n          multi={true}\n          value={this.state.selection}\n          options={this.state.options}\n          onChange={this.updateSelection} \n        />\n        {\n          this.renderChildren()\n        }\n      </div>\n    )\n  }\n}\n\nexport default withTracker(props => {\n  const experimentSub = Meteor.subscribe('experimentInfo');\n  const experiments = ExperimentInfo.find({\n    track: props.gene.track\n  }).fetch();\n  const replicaGroups = groupBy(experiments, 'replicaGroup');\n  return {\n    loading: !experimentSub.ready(),\n    experiments: experiments,\n    children: props.children,\n    replicaGroups: replicaGroups\n  }\n})(SampleSelection);",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/feature/SampleSelection.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 379,
    "kind": "class",
    "name": "SampleSelection",
    "memberof": "imports/ui/feature/SampleSelection.jsx",
    "static": true,
    "longname": "imports/ui/feature/SampleSelection.jsx~SampleSelection",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/SampleSelection.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 380,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/feature/SampleSelection.jsx~SampleSelection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/feature/SampleSelection.jsx~SampleSelection#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 381,
    "kind": "member",
    "name": "state",
    "memberof": "imports/ui/feature/SampleSelection.jsx~SampleSelection",
    "static": false,
    "longname": "imports/ui/feature/SampleSelection.jsx~SampleSelection#state",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{\"options\": *, \"selection\": *}"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "member",
    "name": "componentWillReceiveProps",
    "memberof": "imports/ui/feature/SampleSelection.jsx~SampleSelection",
    "static": false,
    "longname": "imports/ui/feature/SampleSelection.jsx~SampleSelection#componentWillReceiveProps",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "member",
    "name": "updateSelection",
    "memberof": "imports/ui/feature/SampleSelection.jsx~SampleSelection",
    "static": false,
    "longname": "imports/ui/feature/SampleSelection.jsx~SampleSelection#updateSelection",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "member",
    "name": "renderChildren",
    "memberof": "imports/ui/feature/SampleSelection.jsx~SampleSelection",
    "static": false,
    "longname": "imports/ui/feature/SampleSelection.jsx~SampleSelection#renderChildren",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/feature/SampleSelection.jsx~SampleSelection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/feature/SampleSelection.jsx~SampleSelection#render",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 386,
    "kind": "file",
    "name": "imports/ui/feature/Seq.jsx",
    "content": "import { Template } from 'meteor/templating';\n\nimport React from 'react';\nimport find from 'lodash/find';\n\nimport { getGeneSequences } from '/imports/api/util/util.js';\n\nimport './seq.scss';\n\nconst Controls = (props) => {\n  let seqTypes = ['seq','pep']\n  return (\n    <div>\n      <div className=\"btn-group btn-group-sm sequence-toggle pull-right\" role=\"group\">\n        {\n          seqTypes.map(seqType => {\n            return (\n              <button\n                key={seqType}\n                type=\"button\"\n                className={`btn btn-outline-secondary ${seqType === props.seqType ? 'active' : ''}`}\n                onClick={props.selectSeqType.bind(this,seqType)}\n              >\n                {seqType === 'pep' ? 'Protein' : 'Nucleotide'}\n              </button>\n            )\n          })\n        }\n      </div>\n\n      <div className=\"btn-group btn-group-sm pull-right\">\n        <button type=\"button\" className=\"btn btn-outline-secondary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n          { props.selectedTranscript } <span className=\"caret\"></span>\n        </button>\n        <ul className=\"dropdown-menu\">\n          {\n            props.transcripts.map( transcript => {\n              return (\n                <li key={transcript}>\n                  <a \n                    href=\"#\" \n                    className=\"select-transcript-seq\" \n                    onClick={props.selectTranscript.bind(this,transcript)} >\n                    { transcript }\n                  </a>\n                </li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default class SeqContainer extends React.Component {\n  constructor(props){\n    super(props)\n    const transcripts = this.props.gene.subfeatures.filter(sub => {\n      return sub.type === 'mRNA'\n    }).map(transcript => {\n      return transcript.ID\n    }).sort()\n\n    this.state = {\n      selectedTranscript: transcripts[0],\n      transcripts: transcripts,\n      seqType: 'seq'\n    }\n  }\n\n  selectTranscript = (transcriptId) => {\n    this.setState({selectedTranscript: transcriptId})\n  }\n\n  selectSeqType = (seqType) => {\n    this.setState({seqType: seqType})\n  }\n\n  render(){\n    const sequences = getGeneSequences(this.props.gene)\n    const sequence = find(sequences, { ID: this.state.selectedTranscript })\n\n    return (\n      <div id=\"sequence\">\n        <hr />\n        <Controls \n          selectedTranscript = { this.state.selectedTranscript } \n          selectTranscript = { this.selectTranscript }\n          transcripts = { this.state.transcripts }\n          seqType = { this.state.seqType }\n          selectSeqType = { this.selectSeqType }\n        />\n        <h3>Sequence</h3>\n        <div className=\"card seq-container\">\n          <p className=\"seq\"> \n            >{ this.state.selectedTranscript } <br/> \n            { sequence[this.state.seqType] }\n          </p>\n        </div>\n      </div>\n    )\n  }\n}\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/feature/Seq.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 387,
    "kind": "function",
    "name": "Controls",
    "memberof": "imports/ui/feature/Seq.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/Seq.jsx~Controls",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/Seq.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 388,
    "kind": "class",
    "name": "SeqContainer",
    "memberof": "imports/ui/feature/Seq.jsx",
    "static": true,
    "longname": "imports/ui/feature/Seq.jsx~SeqContainer",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/feature/Seq.jsx",
    "importStyle": "SeqContainer",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 389,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/feature/Seq.jsx~SeqContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/feature/Seq.jsx~SeqContainer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true
  },
  {
    "__docId__": 390,
    "kind": "member",
    "name": "state",
    "memberof": "imports/ui/feature/Seq.jsx~SeqContainer",
    "static": false,
    "longname": "imports/ui/feature/Seq.jsx~SeqContainer#state",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "{\"selectedTranscript\": *, \"transcripts\": *, \"seqType\": string}"
      ]
    }
  },
  {
    "__docId__": 391,
    "kind": "member",
    "name": "selectTranscript",
    "memberof": "imports/ui/feature/Seq.jsx~SeqContainer",
    "static": false,
    "longname": "imports/ui/feature/Seq.jsx~SeqContainer#selectTranscript",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 392,
    "kind": "member",
    "name": "selectSeqType",
    "memberof": "imports/ui/feature/Seq.jsx~SeqContainer",
    "static": false,
    "longname": "imports/ui/feature/Seq.jsx~SeqContainer#selectSeqType",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/feature/Seq.jsx~SeqContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/feature/Seq.jsx~SeqContainer#render",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "file",
    "name": "imports/ui/feature/interproscan.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { Template } from 'meteor/templating';\n\nimport d3 from 'd3';\nimport lodash from 'lodash';\nimport { schemeSet3 } from 'd3-scale-chromatic';\n\nimport { InterPro } from '/imports/api/genes/interpro_collection.js';\n\nimport './interproscan.html';\nimport './interproscan.js';\n\n_ = lodash;\n\nMeteor.subscribe('interpro');\n\nfunction getInterproId(d){\n\tlet interpro;\n    let found = false;\n\tdbxref = d.dbxref.split(',');\n\tfor (let dbString of dbxref){\n        let db = dbString.split(':')\n\t\tif (db[0] === 'InterPro') {\n\t\t\tinterpro = db[1]\n            found = true\n\t\t}\n\t}\n    if (!found){\n        interpro = 'Unintegrated'\n    }\n\treturn interpro\n}\n\nfunction getInterproMetaData(groupedData){\n    const interproIds = Object.keys(groupedData)\n    const unintegrated = interproIds.indexOf('Unintegrated');\n    if (unintegrated > 0){\n        interproIds.splice(unintegrated,1)\n    }\n    if (interproIds.length !== 0){\n        const ipr = Interpro.find().fetch();\n        const groupedIpr = _.groupBy(ipr,function(i){ return i.ID })\n        const flattenedIpr = _.mapValues(groupedIpr,function(val){ return val[0] })\n        return flattenedIpr\n    } \n}\n\n\nTemplate.interproscan.helpers({\n    transcripts : function(){\n        return this.subfeatures.filter(function(x){return x.type === 'mRNA'})\n    },\n    domains:function(){\n        return Interpro.find({'ID':{$in:this.domains.InterPro}})\n    }\n})\n\nTemplate.interproscan.rendered = function(){\n    const transcript = this.data.subfeatures.filter(function(x){return x.type === 'mRNA'})[0];\n    const id = transcript.ID;\n    const data = _.values(transcript.interproscan).sort(function(a,b){return a.start-b.start});\n    const groupedData = _.groupBy(data,function(d){return getInterproId(d)})\n    const interproMetaData = getInterproMetaData(groupedData)\n    const DataArray = _.values(groupedData)\n\n    const groupedDataArray = DataArray.map(function(domain){\n        let domainObj = _.groupBy(domain,function(d){return d.source})\n        let domainList = _.values(domainObj)\n        return domainList\n    })\n\n    const lineHeight = 10;\n    const nameSpacing = 140\n\n    var margin = {top: 10, right: 10, bottom: 10, left: 10};\n    var width = $('.interproscan').width() - margin.left - margin.right;\n    var height = (lineHeight * data.length) - margin.top\n\n    //set min and max values\n    var start = 0;\n    var end = transcript.seq.length;\n\n    //setup x scale \n    var xScale = d3.scaleLinear()\n            .domain([0,end])\n            .range([nameSpacing,width])\n\n    //setup svg\n    var svg = d3.select('.interproscan').append('svg')\n            .attr('width',width + margin.left + margin.right)\n            .attr('height',height + margin.top + margin.bottom + 20)\n        .append('g')\n            .attr('class','container')\n            .attr('transform','translate(' + margin.left + ',' + margin.top + ')')\n\n    //draw axis first, so it sits nicely in the back\n    var xAxis = d3.axisBottom(xScale)\n            .ticks(10)\n            .tickPadding(-height - margin.top - margin.bottom - 20)\n            .tickSize(height + margin.top + margin.bottom)\n\n    svg.append('g')\n            .attr('class','x axis')\n            .attr('transform','translate(0,10)')\n            .call(xAxis)\n        .selectAll('text')\n            .attr('transform','rotate(0)')\n            .style('text-anchor','start')\n\n    //make domain groups\n    let domainCounter = 0\n    var domains = svg.selectAll('.domain')\n            .data(groupedDataArray)\n        .enter().append('g')\n            .attr('class','domain')\n            .attr('transform',function(d,i){\n                domainCounter += d.length\n                return 'translate(0,' + (((domainCounter - d.length) * (lineHeight + 10)) + 15) + ')'\n            })\n\n    var sources = domains.selectAll('.source')\n            .data(function(source){\n                return source\n            })\n        .enter().append('g')\n            .attr('class','source')\n            .attr('transform',function(d,i){\n                return 'translate(0,' + i * lineHeight + ')'\n            })\n    //draw domains\n    var rect = sources.selectAll('rect')\n            .data(function(domain){\n                return domain\n            })\n        .enter().append('rect')\n            .attr('x',function(d){\n                return xScale(d.start * 3)\n            })\n            .attr('width',function(d){\n                return xScale(d.end * 3) - xScale(d.start * 3)\n            })\n            .attr('y',function(d,i){\n                return 0//i * 15\n            })\n            .attr('height',7)\n            .attr('rx',2)\n            .attr('ry',2)\n            .each(function(d,i){\n                //initialize bootstrap popover for every rect, bootstrap popup dismissal is automatically taken care of by code in client/main/app-body.js\n                $(this).popover({\n                    title:d.name,\n                    html:true,\n                    content:function(){\n                        let content = 'Source: ' + d.source + '<br>'\n                        if (d.signature_desc) {\n                            content += 'Description: ' + d.signature_desc\n                        }\n                        return content\n                    },\n                    container:$('#interproscan'),\n                    placement:'top'\n                })\n            })\n            .style('fill',function(d){\n                let interpro = getInterproId(d)\n                if (interpro !== 'Unintegrated'){\n                    return interproMetaData[interpro].color\n                } else {\n                    return 'grey'\n                }\n            })\n            .style('opacity',1)\n            .style('stroke','black')\n            .style('stroke-width',0.5)\n    //add domain names\n    var domainIds = domains.selectAll('foreignObject')\n            .data(function(domain){\n                return [domain[0][0]]\n            })\n        .enter().append('foreignObject')\n            .attr('x',0)\n            .attr('y',0)\n            .html(function(d){\n                let ipr = getInterproId(d)\n                return '<button type=\"button\" class=\"btn btn-default btn-xs\">' + ipr + '</button>'\n            })\n    /*\n    var names = domains.selectAll('text')\n            .data(function(domain){\n                console.log(domain)\n                return [domain[0][0]]\n            })\n        .enter().append('text')\n            .attr('x',0)\n            .attr('y',10)\n            .text(function(d){ \n                let ipr = getInterproId(d)\n                if (ipr === 'Unintegrated'){\n                    return 'Unintegrated'\n                } else {\n                    return ipr + ' ' + interproMetaData[ipr].description\n                }\n            })\n    */\n\n    \n    function update(){\n        width = $('.interproscan').width() - margin.left - margin.right;\n        xScale.range([nameSpacing,width])\n        svg.attr('width',width)\n        rect.attr('x',function(d){ \n            return xScale(d.start * 3)\n        })\n        .attr('width',function(d){\n            return xScale(d.end * 3) - xScale(d.start * 3)\n        })\n\n        xAxis.scale(xScale)\n        svg.select('g.x.axis').call(xAxis)\n    }\n\n    $(window).resize(function() {\n        update()\n    }).trigger(\"resize\");\n}\n\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/feature/interproscan.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 395,
    "kind": "function",
    "name": "getInterproId",
    "memberof": "imports/ui/feature/interproscan.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/interproscan.js~getInterproId",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/interproscan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "d",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 396,
    "kind": "function",
    "name": "getInterproMetaData",
    "memberof": "imports/ui/feature/interproscan.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/interproscan.js~getInterproMetaData",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/interproscan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "groupedData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 397,
    "kind": "function",
    "name": "rendered",
    "memberof": "imports/ui/feature/interproscan.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/interproscan.js~rendered",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/interproscan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 398,
    "kind": "file",
    "name": "imports/ui/feature/orthogroup.js",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { Template } from 'meteor/templating';\n\nimport d3 from 'd3';\nimport { schemeSet3 } from 'd3-scale-chromatic';\n\nimport { Orthogroups } from '/imports/api/genes/orthogroup_collection.js';\n\nimport './orthogroup.html';\nimport './orthogroup.scss';\n\nMeteor.subscribe('orthogroups');\n\nfunction parseNewick(a){\n\t//Copyright 2011 Jason Davies https://github.com/jasondavies/newick.js\n\tfor(var e=[],r={},s=a.split(/\\s*(;|\\(|\\)|,|:)\\s*/),t=0;t<s.length;t++){\n\t\tvar n=s[t];switch(n){case\"(\":var c={};r.children=[c],e.push(r),r=c;break;case\",\":var c={};e[e.length-1].children.push(c),r=c;break;case\")\":r=e.pop();break;case\":\":break;default:var h=s[t-1];\")\"==h||\"(\"==h||\",\"==h?r.name=n:\":\"==h&&(r.value=parseFloat(n))}}\n\t\treturn r\n\t}\n\nTemplate.orthogroup.helpers({\n\torthogroup:function(){\n\t\treturn Orthogroups.findOne({'ID':this.orthogroup})\n\t},\n\talignment: function(orthogroup){\n\t\tconst alignment = orthogroup.alignment\n\t\tconst headers = alignment.map(function(x){ \n\t\t\tlet header = x.header.split('&#46;').join('.')\n\t\t\treturn header\n\t\t})\n\t\tconst longestHeader = Math.max(...headers.map(function(header){return header.length}))\n\t\tconst paddedHeaders = headers.map(function(header){\n\t\t\tlet paddingLength = (longestHeader - header.length) + 1;\n\t\t\tlet padding = '\\xA0'.repeat(paddingLength);\n\t\t\treturn header + padding\n\t\t})\n\t\tconst sequences = alignment.map(function(x){return x.sequence})\n\t\tconst zipped = _.zip(paddedHeaders,sequences)\n\t\tconst merged = zipped.map(function(x){return x[0] + x[1] })\n\n\t\treturn merged\n\t},\n\ttree: function(orthogroup){\n\t\tconst treeString = orthogroup.phylogenetic_tree;\n\t\tconst tree = parseNewick(treeString);\n\t\treturn tree;\n\t},\n\talignmentScore: function(orthogroup){\n\t\tconst alignment = orthogroup.alignment\n\t\t//only take the sequences\n\t\tconst sequences = alignment.map(function(x){return x.sequence})\n\n\t\t//alignment is square, so length is equal to length of first sequence\n\t\tconst alignmentLength = sequences[0].length\n\t\t\n\t\t//arbitrary cutoff\n\t\tconst cutoff = 0.5;\n\n\t\t//all nucleotides\n\t\tlet allNucleotides = 0\n\t\t\n\t\t//informative nucleotides\n\t\tlet infoNucleotides = 0\n\n\t\t//loop over column index, characters\n\t\tfor (var charIndex = 0;charIndex < alignmentLength;charIndex++){\n\t\t\t//get current character/column for every sequence\n\t\t\tlet chars = sequences.map(function(seq){return seq[charIndex]})\n\t\t\t\n\t\t\t//get non gap characters\n\t\t\tlet nonGapChars = chars.filter(function(c){ if (c !== '-') return c })\n\n\t\t\tallNucleotides += nonGapChars.length\n\n\t\t\tif ((nonGapChars.length / chars.length) > cutoff) {\n\t\t\t\tinfoNucleotides += nonGapChars.length\n\t\t\t}\n\t\t}\n\t\treturn (infoNucleotides / allNucleotides).toFixed(3)\n\t}\n})\n\nTemplate.orthogroup.rendered = function(){\n\tconst ID = this.data.ID + '.1';\n\tconst og = Orthogroups.findOne({'ID':this.data.orthogroup});\n\tconst treeData = parseNewick(og.phylogenetic_tree);\n\tconst hierarchy = d3.hierarchy(treeData)\n\t\t.sum(function(d){ return d.value })\n\t\t.sort(function(a, b){ return b.height - a.height || b.value - a.value; });\n\n\tlet margin = {top: 10, right: 10, bottom: 10, left: 20};\n    let width = $('.experiments').width() - margin.left - margin.right;\n    let height = (og.alignment.length * 20) - margin.bottom - margin.top;\n\n\n\tconst cluster = d3.cluster()\n\t\t.size([height,width - 200])\n\t\t.separation(function(a, b){ return 1 })\n\n\tconst nodes = cluster(hierarchy).descendants();\n\tconst links = cluster(hierarchy).links();\n\n\tlet svg = d3.select('.tree').append('svg')\n\t\t.attr('height', height + margin.bottom + margin.top)\n\t\t.attr('width', width + margin.left + margin.right)\n\n\tlet chart = svg.append('g')\n\n\tlet link = chart.append('g')\n\t\t\t.attr('class','links')\n\t\t.selectAll('path')\n\t\t\t.data(links)\n\t\t.enter().append('path')\n\t\t\t//.each(function(d){ d.target.linkNode = this; })\n\t\t\t.attr('d',function(d){ return  step(d.source.x, d.target.x, d.source.y, d.target.y) })\n\t\t\t.style('stroke','black')\n\t\t\t.style('fill','none')\n\t\t\t.attr('transform','translate(5,0)')\n\n\tchart.append('g')\n\t\t\t.attr('class','labels')\n\t\t.selectAll('text')\n\t\t\t.data(nodes.filter(function(d){ return !d.children }))\n\t\t.enter().append('text')\n\t\t\t//.attr('dy','.10em')\n\t\t\t.attr('class', function(d) {\n\t\t\t\tif (d.data.name === ID){\n\t\t\t\t\treturn 'label current'\n\t\t\t\t} else {\n\t\t\t\t\treturn 'label'\n\t\t\t\t}\n\t\t\t})\n\t\t\t.style('text-anchor','start')\n\t\t\t.attr('transform',function(d){ return 'translate(' + ( d.y + 10 ) + ',' + ( d.x + 3 ) +')' })\n\t\t\t.text(function(d){ return d.data.name })\n\n}\n\nfunction step(startX,endX,startY,endY){\n\treturn 'M' + startY + ',' + startX + ' L' + startY + ',' + endX + ' ' + endY + ',' + endX;\n}\n\n\n\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/feature/orthogroup.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 399,
    "kind": "function",
    "name": "parseNewick",
    "memberof": "imports/ui/feature/orthogroup.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/orthogroup.js~parseNewick",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/orthogroup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 400,
    "kind": "function",
    "name": "rendered",
    "memberof": "imports/ui/feature/orthogroup.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/orthogroup.js~rendered",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/orthogroup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 401,
    "kind": "function",
    "name": "step",
    "memberof": "imports/ui/feature/orthogroup.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/feature/orthogroup.js~step",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/feature/orthogroup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [
      {
        "name": "startX",
        "types": [
          "*"
        ]
      },
      {
        "name": "endX",
        "types": [
          "*"
        ]
      },
      {
        "name": "startY",
        "types": [
          "*"
        ]
      },
      {
        "name": "endY",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 402,
    "kind": "file",
    "name": "imports/ui/genelist/GeneTable.jsx",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { withTracker } from 'meteor/react-meteor-data';\n\nimport React from 'react';\nimport { compose } from 'recompose';\n\nimport { Genes } from '/imports/api/genes/gene_collection.js';\n\nimport { withEither, isLoading, Loading } from '/imports/ui/util/uiUtil.jsx';\n\nimport GeneTableHeader from './GeneTableHeader.jsx';\n\nimport GenemodelContainer from '../feature/Genemodel.jsx';\nimport ExpressionPlot from '../feature/ExpressionPlot.jsx';\nimport SampleSelection from '../feature/SampleSelection.jsx';\n\n/**\n * Reactive Meteor tracker for GeneTable component\n * @param  {Object} options.query           [description]\n * @param  {Number} options.scrollLimit     [description]\n * @param  {Set} options.selectedGenes   [description]\n * @param  {Function} options.updateSelection [description]\n * @param  {Boolean} options.selectedAll     [description]\n * @return {Object}                         [description]\n */\nconst dataTracker = ({ query, scrollLimit, selectedGenes, updateSelection, selectedAll }) => {\n  const geneSub = Meteor.subscribe('genes', {\n    limit: scrollLimit, \n    search: undefined, \n    query: query\n  })\n  const loading = !geneSub.ready();\n  const genes = Genes.find(query).fetch();\n  \n  return { genes, loading, selectedGenes, updateSelection, selectedAll }\n}\n\nconst hasNoResults = props => {\n  return props.genes.length === 0\n}\n\n\nconst NoResults = props => {\n  return (\n    <div>\n      No results\n    </div>\n  )\n}\n\nconst withConditionalRendering = compose(\n  withTracker(dataTracker),\n  withEither(isLoading, Loading),\n  withEither(hasNoResults, NoResults)\n)\n\nconst GeneTableRow = ({gene, selectedColumns, selectedAllGenes, selectedGenes, updateSelection }) => {\n  const selected = selectedAllGenes || selectedGenes.has(gene.ID)\n  const active = selected ? ' active' : '';\n  return (\n    <tr>\n      <td>\n        <a className='genelink' href={`/gene/${gene.ID}`}>\n          {gene.ID}\n        </a>\n      </td>\n      {\n        Array.from(selectedColumns).map(columnName => {\n          return (\n            <td key={columnName}>\n              {gene.attributes[columnName]}\n            </td>\n          )\n        })\n      }\n      {/*<td>\n      \n        <SampleSelection gene={gene}>\n          <ExpressionPlot gene={gene} />\n        </SampleSelection>\n      \n      </td>\n      */}\n      <td>\n        <button \n          type=\"button\" \n          className={ \"btn btn-sm btn-outline-secondary pull-right\" + active }\n          id={gene.ID}\n          onClick={updateSelection.bind(this)} >\n          <span id={gene.ID} className=\"fa fa-check\" aria-hidden=\"true\" />\n        </button>\n      </td>\n    </tr>\n  )\n}\n\n\n\n\n/**\n * \n */\nclass GeneTable extends React.Component {\n  constructor(props){\n    super(props)\n  }\n\n  render(){\n    const { genes, ...props } = this.props;\n    return (\n      <div className=\"table-responsive\">\n        <table className=\"genelist table table-hover table-sm\">\n          <GeneTableHeader {...props}/>\n          <tbody>\n          {\n            this.props.genes.map(gene => {\n              return <GeneTableRow key={gene.ID} gene={gene} {...props} />\n            })\n          }\n          </tbody>\n       </table>\n      </div>\n    )\n  }\n}\n\nexport default withConditionalRendering(GeneTable)\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/genelist/GeneTable.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 403,
    "kind": "function",
    "name": "dataTracker",
    "memberof": "imports/ui/genelist/GeneTable.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/genelist/GeneTable.jsx~dataTracker",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/GeneTable.jsx",
    "importStyle": null,
    "description": "Reactive Meteor tracker for GeneTable component",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.query",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.scrollLimit",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "options.selectedGenes",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.updateSelection",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.selectedAll",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "[description]"
    },
    "ignore": true
  },
  {
    "__docId__": 404,
    "kind": "function",
    "name": "hasNoResults",
    "memberof": "imports/ui/genelist/GeneTable.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/genelist/GeneTable.jsx~hasNoResults",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/GeneTable.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 405,
    "kind": "function",
    "name": "NoResults",
    "memberof": "imports/ui/genelist/GeneTable.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/genelist/GeneTable.jsx~NoResults",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/GeneTable.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 406,
    "kind": "variable",
    "name": "withConditionalRendering",
    "memberof": "imports/ui/genelist/GeneTable.jsx",
    "static": true,
    "longname": "imports/ui/genelist/GeneTable.jsx~withConditionalRendering",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/GeneTable.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 407,
    "kind": "function",
    "name": "GeneTableRow",
    "memberof": "imports/ui/genelist/GeneTable.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/genelist/GeneTable.jsx~GeneTableRow",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/GeneTable.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"gene\": *, \"selectedColumns\": *, \"selectedAllGenes\": *, \"selectedGenes\": *, \"updateSelection\": *}"
        ],
        "defaultRaw": {
          "gene": null,
          "selectedColumns": null,
          "selectedAllGenes": null,
          "selectedGenes": null,
          "updateSelection": null
        },
        "defaultValue": "{\"gene\":null,\"selectedColumns\":null,\"selectedAllGenes\":null,\"selectedGenes\":null,\"updateSelection\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 408,
    "kind": "class",
    "name": "GeneTable",
    "memberof": "imports/ui/genelist/GeneTable.jsx",
    "static": true,
    "longname": "imports/ui/genelist/GeneTable.jsx~GeneTable",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/GeneTable.jsx",
    "importStyle": null,
    "description": "",
    "lineNumber": 103,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 409,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/genelist/GeneTable.jsx~GeneTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/genelist/GeneTable.jsx~GeneTable#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/genelist/GeneTable.jsx~GeneTable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/genelist/GeneTable.jsx~GeneTable#render",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "file",
    "name": "imports/ui/genelist/GeneTableCard.jsx",
    "content": "import React from 'react';\nimport { cloneDeep } from 'lodash';\n\n//import GeneListSidePanel from './GeneListSidePanel.jsx';\nimport GeneTableOptions from './GeneTableOptions.jsx';\nimport GeneTable from './GeneTable.jsx';\nimport DownloadDialogModal from './downloads/DownloadDialog.jsx';\n\nexport default class GeneTableCard extends React.Component {\n  constructor(props){\n    super(props)\n  }\n\n  render(){\n    return (\n      <div className=\"container\">\n        <GeneTableOptions >\n          <GeneTable />\n          <DownloadDialogModal />\n        </GeneTableOptions>\n      </div>\n    )\n  }\n}\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/genelist/GeneTableCard.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 412,
    "kind": "class",
    "name": "GeneTableCard",
    "memberof": "imports/ui/genelist/GeneTableCard.jsx",
    "static": true,
    "longname": "imports/ui/genelist/GeneTableCard.jsx~GeneTableCard",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/genelist/GeneTableCard.jsx",
    "importStyle": "GeneTableCard",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 413,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/genelist/GeneTableCard.jsx~GeneTableCard",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/genelist/GeneTableCard.jsx~GeneTableCard#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/genelist/GeneTableCard.jsx~GeneTableCard",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/genelist/GeneTableCard.jsx~GeneTableCard#render",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 415,
    "kind": "file",
    "name": "imports/ui/genelist/GeneTableHeader.jsx",
    "content": "import React from 'react';\n\nimport Select from 'react-select';\n\nconst SELECT_OPTIONS = [\n  {label: 'Equals', value: 'equals'},\n  {label: 'Does not equal', value: 'notEquals'},\n  {label: 'Contains', value: 'contains'},\n  {label: 'Does not contain', value: 'notContains'}\n]\n\nconst HeaderElementDropDown = ({...props}) => {\n  return (\n    <div className=\"dropdown-menu px-2\">\n      <h6 className=\"dropdown-header\">Select query</h6>\n      <div className=\"btn-group\" role=\"group\">\n        <button type=\"button\" className=\"btn btn-sm btn-outline-success\">Present</button>\n        <button type=\"button\" className=\"btn btn-sm btn-outline-danger\">Not present</button>\n        <button type=\"button\" className=\"btn btn-sm btn-outline-dark\">Either</button>\n      </div>\n      <div className=\"dropdown-divider\" />\n      <Select \n      value='equals'\n      options={SELECT_OPTIONS} />\n      <textarea className=\"form-control\" />\n      <div className=\"dropdown-divider\" />\n      <button type=\"button\" className=\"btn btn-sm btn-outline-dark pull-right\">\n        <span className=\"fa fa-times-circle\" /> Remove column\n      </button>\n    </div>\n  )\n}\n\nconst HeaderElement = ({label, ...props}) => {\n  return (\n    <th scope=\"col\">\n      <div className='btn-group'>\n        <button className=\"btn btn-outline-dark btn-sm\" type=\"button\" disabled>\n          <strong>{label}</strong>\n        </button>\n        <button className=\"btn btn-sm btn-outline-dark dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" />\n        {/*<div className=\"dropdown-menu\" >\n          <a className=\"dropdown-item\" href=\"#\">Gene ID select</a>\n        </div>*/}\n        \n        <HeaderElementDropDown />\n        \n      </div>\n    </th>\n  )\n}\n\nconst GeneTableHeader = ({ selectedColumns, ...props }) => {\n  return (\n    <thead>\n      <tr>\n        <HeaderElement label='Gene ID' />\n        {/*<th scope=\"col\">Gene ID <span className=\"fa fa-sort\" /></th>*/}\n        {\n          Array.from(selectedColumns).map(column => {\n            return (\n              <HeaderElement key={column} label={column} />\n            )\n          })\n        }\n        {/*\n        <th scope=\"col\">Name</th>\n        <th scope=\"col\">Product</th>\n        <th scope=\"col\">Expression</th>\n        */}\n        <th scope=\"col\"><div className=\"pull-right\">Select</div></th>\n      </tr>\n    </thead>\n  )\n}\n\nexport default GeneTableHeader;",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/genelist/GeneTableHeader.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 416,
    "kind": "variable",
    "name": "SELECT_OPTIONS",
    "memberof": "imports/ui/genelist/GeneTableHeader.jsx",
    "static": true,
    "longname": "imports/ui/genelist/GeneTableHeader.jsx~SELECT_OPTIONS",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/GeneTableHeader.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 417,
    "kind": "function",
    "name": "HeaderElementDropDown",
    "memberof": "imports/ui/genelist/GeneTableHeader.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/genelist/GeneTableHeader.jsx~HeaderElementDropDown",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/GeneTableHeader.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{...props: Object}"
        ],
        "defaultRaw": {
          "props": {}
        },
        "defaultValue": "{\"props\":{}}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 418,
    "kind": "function",
    "name": "HeaderElement",
    "memberof": "imports/ui/genelist/GeneTableHeader.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/genelist/GeneTableHeader.jsx~HeaderElement",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/GeneTableHeader.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"label\": *, ...props: Object}"
        ],
        "defaultRaw": {
          "label": null,
          "props": {}
        },
        "defaultValue": "{\"label\":null,\"props\":{}}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 419,
    "kind": "function",
    "name": "GeneTableHeader",
    "memberof": "imports/ui/genelist/GeneTableHeader.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/genelist/GeneTableHeader.jsx~GeneTableHeader",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/genelist/GeneTableHeader.jsx",
    "importStyle": "GeneTableHeader",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"selectedColumns\": *, ...props: Object}"
        ],
        "defaultRaw": {
          "selectedColumns": null,
          "props": {}
        },
        "defaultValue": "{\"selectedColumns\":null,\"props\":{}}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 420,
    "kind": "file",
    "name": "imports/ui/genelist/GeneTableOptions.jsx",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { withTracker } from 'meteor/react-meteor-data';\n\nimport React from 'react';\nimport { compose } from 'recompose';\nimport { cloneDeep } from 'lodash';\n\nimport { Attributes } from '/imports/api/genes/attribute_collection.js';\n\nimport { withEither, isLoading, Loading } from '/imports/ui/util/uiUtil.jsx';\n\nimport FilterOptions from './filteroptions/FilterOptions.jsx';\nimport QueryCount from './QueryCount.jsx';\nimport SelectionOptions from './SelectionOptions.jsx';\n\nconst tableColumnDataTracker = props => {\n  const attributeSub = Meteor.subscribe('attributes');\n  const loading = !attributeSub.ready();\n  const attributes = Attributes.find().fetch();\n  return {\n    loading, \n    attributes\n  }\n}\n\nconst withConditionalRendering = compose(\n  withTracker(tableColumnDataTracker),\n  withEither(isLoading, Loading)\n)\n\nclass GeneTableOptions extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      scrollLimit: 100,\n      query: {},\n      selectedGenes: new Set(),\n      selectedAllGenes: false,\n      selectedColumns: new Set(['Name', 'Note']),\n      showDownloadDialog: false\n    }\n  }\n\n  updateSelection = event => {\n    const geneId = event.target.id;\n    const selectedGenes = cloneDeep(this.state.selectedGenes);\n    if (!selectedGenes.has(geneId)){\n      selectedGenes.add(geneId)\n    } else {\n      selectedGenes.delete(geneId)\n    }\n    this.setState({\n      selectedGenes: selectedGenes\n    })\n  }\n\n  renderChildren = props => {\n    return React.Children.map(this.props.children, child => {\n      return React.cloneElement(child, {\n        updateSelection: this.updateSelection,\n        toggleDownloadDialog: this.toggleDownloadDialog,\n        ...this.state\n      })\n    })\n  }\n\n  toggleDownloadDialog = () => {\n    console.log('toggleDownloadDialog')\n    this.setState({\n      showDownloadDialog: !this.state.showDownloadDialog\n    })\n  }\n\n  toggleSelectAllGenes = () => {\n    //Set selectedAllGenes to false if a selection is made, \n    //otherwise toggle current selectAllGenes state\n    const selectedAllGenes = this.state.selectedGenes.size > 0 ? false : !this.state.selectedAllGenes;\n    this.setState({\n      selectedGenes: new Set(),\n      selectedAllGenes: selectedAllGenes\n    })\n  }\n\n  toggleColumnSelect = event => {\n    const column = event.target.id;\n    const selectedColumns = cloneDeep(this.state.selectedColumns);\n    if (selectedColumns.has(column)){\n      selectedColumns.delete(column)\n    } else {\n      selectedColumns.add(column)\n    }\n    this.setState({\n      selectedColumns\n    })\n  }\n\n  toggleTrackSelect = event => {\n    const track = event.target.id;\n    console.log(track)\n  }\n\n  render(){\n    return (\n      <div className=\"card\">\n        <div className=\"card-header d-flex justify-content-between\">\n          <FilterOptions \n            toggleColumnSelect={this.toggleColumnSelect}\n            toggleTrackSelect={this.toggleTrackSelect} \n            {...this.props} {...this.state} />\n          <QueryCount />\n          <SelectionOptions \n            toggleSelectAllGenes={this.toggleSelectAllGenes} \n            toggleDownloadDialog={this.toggleDownloadDialog}\n            {...this.props} {...this.state} />\n        </div>\n        {\n          this.renderChildren()\n        }\n      </div>\n    )\n  }\n}\n\nexport default withConditionalRendering(GeneTableOptions);\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/genelist/GeneTableOptions.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 421,
    "kind": "function",
    "name": "tableColumnDataTracker",
    "memberof": "imports/ui/genelist/GeneTableOptions.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/genelist/GeneTableOptions.jsx~tableColumnDataTracker",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/GeneTableOptions.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"loading\": *, \"attributes\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 422,
    "kind": "variable",
    "name": "withConditionalRendering",
    "memberof": "imports/ui/genelist/GeneTableOptions.jsx",
    "static": true,
    "longname": "imports/ui/genelist/GeneTableOptions.jsx~withConditionalRendering",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/GeneTableOptions.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 423,
    "kind": "class",
    "name": "GeneTableOptions",
    "memberof": "imports/ui/genelist/GeneTableOptions.jsx",
    "static": true,
    "longname": "imports/ui/genelist/GeneTableOptions.jsx~GeneTableOptions",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/GeneTableOptions.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 424,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/genelist/GeneTableOptions.jsx~GeneTableOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/genelist/GeneTableOptions.jsx~GeneTableOptions#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true
  },
  {
    "__docId__": 425,
    "kind": "member",
    "name": "state",
    "memberof": "imports/ui/genelist/GeneTableOptions.jsx~GeneTableOptions",
    "static": false,
    "longname": "imports/ui/genelist/GeneTableOptions.jsx~GeneTableOptions#state",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "{\"scrollLimit\": number, \"query\": *, \"selectedGenes\": *, \"selectedAllGenes\": *, \"selectedColumns\": *, \"showDownloadDialog\": *}"
      ]
    }
  },
  {
    "__docId__": 426,
    "kind": "member",
    "name": "updateSelection",
    "memberof": "imports/ui/genelist/GeneTableOptions.jsx~GeneTableOptions",
    "static": false,
    "longname": "imports/ui/genelist/GeneTableOptions.jsx~GeneTableOptions#updateSelection",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 427,
    "kind": "member",
    "name": "renderChildren",
    "memberof": "imports/ui/genelist/GeneTableOptions.jsx~GeneTableOptions",
    "static": false,
    "longname": "imports/ui/genelist/GeneTableOptions.jsx~GeneTableOptions#renderChildren",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 428,
    "kind": "member",
    "name": "toggleDownloadDialog",
    "memberof": "imports/ui/genelist/GeneTableOptions.jsx~GeneTableOptions",
    "static": false,
    "longname": "imports/ui/genelist/GeneTableOptions.jsx~GeneTableOptions#toggleDownloadDialog",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "member",
    "name": "toggleSelectAllGenes",
    "memberof": "imports/ui/genelist/GeneTableOptions.jsx~GeneTableOptions",
    "static": false,
    "longname": "imports/ui/genelist/GeneTableOptions.jsx~GeneTableOptions#toggleSelectAllGenes",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 430,
    "kind": "member",
    "name": "toggleColumnSelect",
    "memberof": "imports/ui/genelist/GeneTableOptions.jsx~GeneTableOptions",
    "static": false,
    "longname": "imports/ui/genelist/GeneTableOptions.jsx~GeneTableOptions#toggleColumnSelect",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 431,
    "kind": "member",
    "name": "toggleTrackSelect",
    "memberof": "imports/ui/genelist/GeneTableOptions.jsx~GeneTableOptions",
    "static": false,
    "longname": "imports/ui/genelist/GeneTableOptions.jsx~GeneTableOptions#toggleTrackSelect",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/genelist/GeneTableOptions.jsx~GeneTableOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/genelist/GeneTableOptions.jsx~GeneTableOptions#render",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 433,
    "kind": "file",
    "name": "imports/ui/genelist/QueryCount.jsx",
    "content": "import React from 'react';\n\nexport default class QueryCount extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      queryCount: '...'\n    }\n  }\n  componentWillReceiveProps = nextProps => {\n    //queryCount.call(nextprops.query, (err, res) => {\n    //  this.setState({\n    //    queryCount: res\n    //  })\n    //})\n  }\n  render(){\n    return (\n      <button type='button' className='btn btn-sm btn-warning' disabled>\n        <span className='badge badge-dark'>{this.state.queryCount}</span> query results\n      </button>\n    )\n  }\n}",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/genelist/QueryCount.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 434,
    "kind": "class",
    "name": "QueryCount",
    "memberof": "imports/ui/genelist/QueryCount.jsx",
    "static": true,
    "longname": "imports/ui/genelist/QueryCount.jsx~QueryCount",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/genelist/QueryCount.jsx",
    "importStyle": "QueryCount",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 435,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/genelist/QueryCount.jsx~QueryCount",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/genelist/QueryCount.jsx~QueryCount#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 436,
    "kind": "member",
    "name": "state",
    "memberof": "imports/ui/genelist/QueryCount.jsx~QueryCount",
    "static": false,
    "longname": "imports/ui/genelist/QueryCount.jsx~QueryCount#state",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "{\"queryCount\": string}"
      ]
    }
  },
  {
    "__docId__": 437,
    "kind": "member",
    "name": "componentWillReceiveProps",
    "memberof": "imports/ui/genelist/QueryCount.jsx~QueryCount",
    "static": false,
    "longname": "imports/ui/genelist/QueryCount.jsx~QueryCount#componentWillReceiveProps",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/genelist/QueryCount.jsx~QueryCount",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/genelist/QueryCount.jsx~QueryCount#render",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 439,
    "kind": "file",
    "name": "imports/ui/genelist/SelectionOptions.jsx",
    "content": "import React from 'react';\n\n/**\n * [description]\n * @param  {Set} options.selectedGenes      [description]\n * @param  {Boolean} options.selectedAllGenes        [description]\n * @param  {Function} options.toggleSelectAllGenes    [description]\n * @param  {Function} options.openDownloadDialog [description]\n * @return {Function}                            [description]\n */\nconst SelectionOptions = ({ selectedGenes , selectedAllGenes, toggleSelectAllGenes, toggleDownloadDialog }) => {\n  return (\n    Array.from(selectedGenes).length > 0 || selectedAllGenes ?\n    <div className=\"btn-group btn-group-sm\" role=\"group\">\n      <button type=\"button\" className=\"btn btn-success\" onClick={toggleDownloadDialog}>\n        <i className=\"fa fa-download\" aria-hidden=\"true\"></i> Download \n      </button>\n      <button type=\"button\" className=\"btn btn-warning\" data-toggle=\"modal\" data-target=\"#download-modal\">\n        <i className=\"fa fa-external-link\" aria-hidden=\"true\"></i> Send \n      </button>\n      <button type=\"button\" className=\"btn btn-dark select-all\" onClick={toggleSelectAllGenes}>\n        Unselect all <i className=\"fa fa-check checked\" aria-hidden=\"true\"></i>\n      </button>\n    </div> :\n    <button type=\"button\" className=\"btn btn-sm btn-outline-dark select-all\" onClick={toggleSelectAllGenes}>\n      Select all <i className=\"fa fa-check unchecked\" aria-hidden=\"true\"></i>\n    </button>\n  )\n}\n\nexport default SelectionOptions;",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/genelist/SelectionOptions.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 440,
    "kind": "function",
    "name": "SelectionOptions",
    "memberof": "imports/ui/genelist/SelectionOptions.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/genelist/SelectionOptions.jsx~SelectionOptions",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/genelist/SelectionOptions.jsx",
    "importStyle": "SelectionOptions",
    "description": "[description]",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "options.selectedGenes",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.selectedAllGenes",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.toggleSelectAllGenes",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.openDownloadDialog",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "[description]"
    }
  },
  {
    "__docId__": 441,
    "kind": "file",
    "name": "imports/ui/genelist/downloads/AnnotationDownload.jsx",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { withTracker } from 'meteor/react-meteor-data';\n\nimport React from 'react';\n\nimport { Genes } from '/imports/api/genes/gene_collection.js';\n\nconst formatAttributes = interval => {\n  const attributes = interval.attributes;\n  attributes.ID = interval.ID;\n  const attributeString = Object.entries(attributes).map(attribute => {\n    const [key,value] = attribute;\n    return `${key}=${value}`\n  }).join(';');\n  return attributeString\n}\n\nconst formatGene = gene => {  \n  const gffLines = [`${gene.seqid}\\t\n    ${gene.source}\\t\n    ${gene.type}\\t\n    ${gene.start}\\t\n    ${gene.end}\\t\n    ${gene.score}\\t\n    ${gene.strand}\\t\n    .\\t\n    ${formatAttributes(gene)}\\n`]\n  gene.subfeatures.forEach(subfeature => {\n    gffLines.push(`${gene.seqid}\\t\n      ${gene.source}\\t\n      ${subfeature.type}\\t\n      ${subfeature.start}\\t\n      ${subfeature.end}\\t\n      ${subfeature.score}\\t\n      ${subfeature.strand}\\t\n      ${subfeature.phase}\\t\n      ${formatAttributes(subfeature)}\\n`)\n  })\n  return gffLines\n}\n\nclass AnnotationDownload extends React.Component {\n  constructor(props){\n    super(props)\n  }\n\n  render(){\n    console.log(this.props)\n    return (\n      <div className=\"card download-preview\">\n        <div className=\"card-body\">\n          <h4 className=\"card-title\">Download preview</h4>\n          {\n            this.props.previewGenes.map(gene => {\n              return formatGene(gene).map(gffLine => {\n                return <span key={gffLine}>\n                  {gffLine}\n                  <br/>\n                </span>\n              })\n            })\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withTracker(({ geneQuery }) => {\n  console.log(geneQuery)\n  const geneSub = Meteor.subscribe('genes', 3, false, geneQuery);\n  const previewGenes = Genes.find(geneQuery, {limit: 3}).fetch();\n  return {\n    loading: !geneSub.ready(),\n    previewGenes: previewGenes\n  }\n})(AnnotationDownload);",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/genelist/downloads/AnnotationDownload.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 442,
    "kind": "function",
    "name": "formatAttributes",
    "memberof": "imports/ui/genelist/downloads/AnnotationDownload.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/genelist/downloads/AnnotationDownload.jsx~formatAttributes",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/downloads/AnnotationDownload.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "interval",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 443,
    "kind": "function",
    "name": "formatGene",
    "memberof": "imports/ui/genelist/downloads/AnnotationDownload.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/genelist/downloads/AnnotationDownload.jsx~formatGene",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/downloads/AnnotationDownload.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "gene",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 444,
    "kind": "class",
    "name": "AnnotationDownload",
    "memberof": "imports/ui/genelist/downloads/AnnotationDownload.jsx",
    "static": true,
    "longname": "imports/ui/genelist/downloads/AnnotationDownload.jsx~AnnotationDownload",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/downloads/AnnotationDownload.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 445,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/genelist/downloads/AnnotationDownload.jsx~AnnotationDownload",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/genelist/downloads/AnnotationDownload.jsx~AnnotationDownload#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/genelist/downloads/AnnotationDownload.jsx~AnnotationDownload",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/genelist/downloads/AnnotationDownload.jsx~AnnotationDownload#render",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "file",
    "name": "imports/ui/genelist/downloads/DownloadDialog.jsx",
    "content": "import { FlowRouter } from 'meteor/kadira:flow-router';\n\nimport React from 'react';\nimport classNames from 'classnames';\n\nimport AnnotationDownload from './AnnotationDownload.jsx';\n\nimport { downloadGenes } from '/imports/api/genes/download_genes.js';\n\nimport './DownloadDialog.scss';\n\n\nconst SequenceDownload = props => {\n  return (\n    <div></div>\n  )\n}\n\nconst ExpressionDownload = props => {\n  return (\n    <div></div>\n  )\n}\n\nexport default class DownloadDialogModal extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      dataType: 'Annotations',\n      downloading: false\n    }\n  }\n\n  selectDataType = event => {\n    this.setState({\n      dataType: event.target.id\n    })\n  }\n\n  startDownload = event => {\n    this.setState({\n      downloading: true\n    })\n    const geneQuery = this.props.selectedAll ? this.props.query : { ID: { $in: Array.from(this.props.selectedGenes) } };\n\n    //download genes method should return download link url\n    downloadGenes.call({ query: geneQuery, dataType: this.state.dataType }, (err,res) => {\n      console.log(err,res)\n      FlowRouter.redirect(`/download/${res}`)\n    })\n  }\n\n  closeModal = event => {\n    this.setState({\n      downloading: false\n    })\n    this.props.toggleDownloadDialog()\n  }\n\n  render(){\n    const { showDownloadDialog, toggleDownloadDialog, query, selectedAll, selectedGenes } = this.props;\n    if (!showDownloadDialog) {\n      return null\n    }\n\n    const geneQuery = selectedAll ? query : { ID: { $in: Array.from(selectedGenes) } };\n\n    const DATATYPE_COMPONENTS = {\n      'Annotations': <AnnotationDownload geneQuery={geneQuery} />,\n      'Sequences': <SequenceDownload geneQuery={geneQuery} />,\n      'Expression data': <ExpressionDownload geneQuery={geneQuery} />\n    }\n    return (\n      <div>\n        <div className=\"backdrop\" />\n        <div className=\"modal\" role=\"dialog\">\n          <div className=\"modal-dialog\" role=\"document\">\n            <div className=\"modal-content\">\n              <div className=\"modal-header\">\n                <h5 className=\"modal-title\">Download options</h5>\n                <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={this.closeModal}>\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n              </div>\n              <div className=\"modal-body card text-center\">\n                <div className=\"card-header\">\n                  <ul className=\"nav nav-tabs card-header-tabs\">\n                  {\n                    Object.keys(DATATYPE_COMPONENTS).map(dataType => {\n                      console.log(dataType, this.state.dataType)\n                      return (\n                        <li key={dataType} className=\"nav-item\">\n                          <a \n                            className={\n                              classNames('nav-link', {\n                                'active': this.state.dataType === dataType\n                              })\n                            }\n                            id={dataType}\n                            onClick={this.selectDataType}\n                            href=\"#\" >\n                            {dataType}\n                          </a>\n                        </li>\n                      )\n                    })\n                  }\n                  </ul>\n                </div>\n              <p className=\"card-body\">\n                Downloading {this.state.dataType} data for 3 genes. <br/>\n                Please select further options below.\n              </p>\n              {\n                DATATYPE_COMPONENTS[this.state.dataType]\n              }\n              <div className=\"card-body\">\n              </div>\n                Annotation format\n                <div className=\"form-check\">\n                  <input className=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"annotation-format\" checked readOnly />\n                  <label className=\"form-check-label\" htmlFor=\"annotation-format\">\n                    gff3\n                  </label>\n                </div>\n              </div>\n              <div className=\"modal-footer\">\n                {\n                  this.state.downloading ? \n                  <button type=\"button\" className=\"btn btn-success\" disabled>\n                    <span className=\"fa fa-circle-o-notch fa-spin\"/> Preparing download URL\n                  </button> :\n                  <button type=\"button\" className=\"btn btn-success\" onClick={this.startDownload}>\n                    Download\n                  </button>\n                }\n                <button \n                  type=\"button\" \n                  className=\"btn btn-outline-danger\" \n                  data-dismiss=\"modal\" \n                  onClick={this.closeModal}>\n                  Close\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/genelist/downloads/DownloadDialog.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 448,
    "kind": "function",
    "name": "SequenceDownload",
    "memberof": "imports/ui/genelist/downloads/DownloadDialog.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/genelist/downloads/DownloadDialog.jsx~SequenceDownload",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/downloads/DownloadDialog.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 449,
    "kind": "function",
    "name": "ExpressionDownload",
    "memberof": "imports/ui/genelist/downloads/DownloadDialog.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/genelist/downloads/DownloadDialog.jsx~ExpressionDownload",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/downloads/DownloadDialog.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 450,
    "kind": "class",
    "name": "DownloadDialogModal",
    "memberof": "imports/ui/genelist/downloads/DownloadDialog.jsx",
    "static": true,
    "longname": "imports/ui/genelist/downloads/DownloadDialog.jsx~DownloadDialogModal",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/genelist/downloads/DownloadDialog.jsx",
    "importStyle": "DownloadDialogModal",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 451,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/genelist/downloads/DownloadDialog.jsx~DownloadDialogModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/genelist/downloads/DownloadDialog.jsx~DownloadDialogModal#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true
  },
  {
    "__docId__": 452,
    "kind": "member",
    "name": "state",
    "memberof": "imports/ui/genelist/downloads/DownloadDialog.jsx~DownloadDialogModal",
    "static": false,
    "longname": "imports/ui/genelist/downloads/DownloadDialog.jsx~DownloadDialogModal#state",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{\"dataType\": string, \"downloading\": *}"
      ]
    }
  },
  {
    "__docId__": 453,
    "kind": "member",
    "name": "selectDataType",
    "memberof": "imports/ui/genelist/downloads/DownloadDialog.jsx~DownloadDialogModal",
    "static": false,
    "longname": "imports/ui/genelist/downloads/DownloadDialog.jsx~DownloadDialogModal#selectDataType",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 454,
    "kind": "member",
    "name": "startDownload",
    "memberof": "imports/ui/genelist/downloads/DownloadDialog.jsx~DownloadDialogModal",
    "static": false,
    "longname": "imports/ui/genelist/downloads/DownloadDialog.jsx~DownloadDialogModal#startDownload",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 455,
    "kind": "member",
    "name": "closeModal",
    "memberof": "imports/ui/genelist/downloads/DownloadDialog.jsx~DownloadDialogModal",
    "static": false,
    "longname": "imports/ui/genelist/downloads/DownloadDialog.jsx~DownloadDialogModal#closeModal",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 456,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/genelist/downloads/DownloadDialog.jsx~DownloadDialogModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/genelist/downloads/DownloadDialog.jsx~DownloadDialogModal#render",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 457,
    "kind": "file",
    "name": "imports/ui/genelist/downloads/ExpressionDownload.jsx",
    "content": "",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/genelist/downloads/ExpressionDownload.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 458,
    "kind": "file",
    "name": "imports/ui/genelist/downloads/SequenceDownload.jsx",
    "content": "",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/genelist/downloads/SequenceDownload.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 459,
    "kind": "file",
    "name": "imports/ui/genelist/filteroptions/ColumnSelect.jsx",
    "content": "import React from 'react';\n\nconst ColumnSelect = ({attributes, selectedColumns, toggleColumnSelect, ...props}) => {\n  console.log(props)\n  return (\n    <div className='btn-group'>\n      <button type='button' className='btn btn-sm btn-outline-dark dropdown-toggle' data-toggle='dropdown'>\n        Columns&nbsp;\n        <span className='badge badge-dark'>\n          {`${selectedColumns.size}/${attributes.length}`}\n        </span>\n      </button>\n      <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n        <h6 className=\"dropdown-header\">Attributes</h6>\n        {\n          attributes.map(attribute => {\n            const active = selectedColumns.has(attribute.name) ? 'active' : ''\n            return (\n              <a key={attribute.name} \n                className={`dropdown-item ${active}`}\n                id={attribute.name}\n                onClick={toggleColumnSelect.bind(this)} >\n                {attribute.name}\n              </a>\n            )\n          })\n        }\n        <div className=\"dropdown-divider\" />\n        <h6 className=\"dropdown-header\">Data visualizations</h6>\n      </div>\n    </div>\n  )\n}\n\nexport default ColumnSelect;",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/genelist/filteroptions/ColumnSelect.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 460,
    "kind": "function",
    "name": "ColumnSelect",
    "memberof": "imports/ui/genelist/filteroptions/ColumnSelect.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/genelist/filteroptions/ColumnSelect.jsx~ColumnSelect",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/genelist/filteroptions/ColumnSelect.jsx",
    "importStyle": "ColumnSelect",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"attributes\": *, \"selectedColumns\": *, \"toggleColumnSelect\": *, ...props: Object}"
        ],
        "defaultRaw": {
          "attributes": null,
          "selectedColumns": null,
          "toggleColumnSelect": null,
          "props": {}
        },
        "defaultValue": "{\"attributes\":null,\"selectedColumns\":null,\"toggleColumnSelect\":null,\"props\":{}}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 461,
    "kind": "file",
    "name": "imports/ui/genelist/filteroptions/FilterOptions.jsx",
    "content": "import React from 'react';\n\nimport ReferenceSelect from './ReferenceSelect.jsx';\nimport TrackSelect from './TrackSelect.jsx';\nimport ColumnSelect from './ColumnSelect.jsx';\n\nimport './filteroptions.scss';\n\nconst FilterOptions = ({toggleTrackSelect, toggleColumnSelect, ...props}) => {\n  return (\n    <div className='btn-group' role='group'>\n      <button className='btn btn-sm btn-outline-dark' disabled>\n        Select:\n      </button>\n      {/*<ReferenceSelect {...props} />*/}\n      <TrackSelect toggleTrackSelect={toggleTrackSelect} {...props} />\n      <ColumnSelect toggleColumnSelect={toggleColumnSelect} {...props} />\n    </div>\n  )\n}\n\nexport default FilterOptions",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/genelist/filteroptions/FilterOptions.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 462,
    "kind": "function",
    "name": "FilterOptions",
    "memberof": "imports/ui/genelist/filteroptions/FilterOptions.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/genelist/filteroptions/FilterOptions.jsx~FilterOptions",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/genelist/filteroptions/FilterOptions.jsx",
    "importStyle": "FilterOptions",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"toggleTrackSelect\": *, \"toggleColumnSelect\": *, ...props: Object}"
        ],
        "defaultRaw": {
          "toggleTrackSelect": null,
          "toggleColumnSelect": null,
          "props": {}
        },
        "defaultValue": "{\"toggleTrackSelect\":null,\"toggleColumnSelect\":null,\"props\":{}}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 463,
    "kind": "file",
    "name": "imports/ui/genelist/filteroptions/ReferenceSelect.jsx",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { withTracker } from 'meteor/react-meteor-data';\n\nimport React from 'react';\n\nconst ReferenceSelect = ({...props}) => {\n  return ( \n    <div className='btn-group'>\n      <button type='button' className='btn btn-sm btn-outline-dark dropdown-toggle' data-toggle='dropdown'>\n        References\n      </button>\n    </div>\n  )\n}\n\nexport default ReferenceSelect",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/genelist/filteroptions/ReferenceSelect.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 464,
    "kind": "function",
    "name": "ReferenceSelect",
    "memberof": "imports/ui/genelist/filteroptions/ReferenceSelect.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/genelist/filteroptions/ReferenceSelect.jsx~ReferenceSelect",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/genelist/filteroptions/ReferenceSelect.jsx",
    "importStyle": "ReferenceSelect",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{...props: Object}"
        ],
        "defaultRaw": {
          "props": {}
        },
        "defaultValue": "{\"props\":{}}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 465,
    "kind": "file",
    "name": "imports/ui/genelist/filteroptions/TrackSelect.jsx",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { withTracker } from 'meteor/react-meteor-data';\n\nimport { compose } from 'recompose';\nimport React from 'react';\n\nimport { withEither, isLoading, Loading, Dropdown, DropdownButton, DropdownMenu } from '/imports/ui/util/uiUtil.jsx';\nimport { Tracks } from '/imports/api/genomes/track_collection.js';\n\nconst tracksDataTracker = ({...props}) => {\n  const trackSub = Meteor.subscribe('tracks');\n  const loading = !trackSub.ready();\n  const tracks = Tracks.find().fetch();\n  return {\n    loading,\n    tracks,\n    ...props\n  }\n}\n\nconst withConditionalRendering = compose(\n  withTracker(tracksDataTracker),\n  withEither(isLoading, Loading)\n)\n\nclass TrackSelect extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      show: ''\n    }\n  }\n\n  open = () => {\n    console.log('open')\n    this.setState({\n      show: 'show'\n    });\n    document.addEventListener('click', this.close);\n  }\n\n  close = () => {\n    this.setState({\n      show: ''\n    });\n    document.removeEventListener('click', this.close);\n  }\n\n  preventClose = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    event.nativeEvent.stopImmediatePropagation();\n  }\n\n  render(){\n    const {tracks, toggleTrackSelect, ...props} = this.props;\n    return ( \n      <Dropdown>\n        <DropdownButton type='button' className='btn btn-sm btn-outline-dark dropdown-toggle'>\n          Tracks&nbsp;\n          <span className='badge badge-dark'>\n            {`${tracks.length}/${tracks.length}`}\n          </span>\n        </DropdownButton>\n        <DropdownMenu>\n          <h6 className=\"dropdown-header\">Select annotation tracks</h6>\n          {\n            tracks.map(track => {\n              const active = ' active';\n              return (\n                <a key={track.trackName} \n                  className={`dropdown-item ${active}`}\n                  id={track.trackName}\n                  onClick={toggleTrackSelect.bind(this)} >\n                  {track.trackName}\n                </a>\n              )\n            })\n          }\n          <div className=\"dropdown-divider\" />\n          <div className=\"btn-group mx-2\" role=\"group\">\n            <button type=\"button\" className=\"btn btn-sm btn-outline-dark\">Select all</button>\n            <button type=\"button\" className=\"btn btn-sm btn-outline-dark\">Unselect all</button>\n          </div>\n        </DropdownMenu>\n      </Dropdown>\n      \n    )\n  }\n}\n\nexport default withConditionalRendering(TrackSelect);\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/genelist/filteroptions/TrackSelect.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 466,
    "kind": "function",
    "name": "tracksDataTracker",
    "memberof": "imports/ui/genelist/filteroptions/TrackSelect.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/genelist/filteroptions/TrackSelect.jsx~tracksDataTracker",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/filteroptions/TrackSelect.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{...props: Object}"
        ],
        "defaultRaw": {
          "props": {}
        },
        "defaultValue": "{\"props\":{}}"
      }
    ],
    "return": {
      "types": [
        "{\"loading\": *, \"tracks\": *, ...props: Object}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 467,
    "kind": "variable",
    "name": "withConditionalRendering",
    "memberof": "imports/ui/genelist/filteroptions/TrackSelect.jsx",
    "static": true,
    "longname": "imports/ui/genelist/filteroptions/TrackSelect.jsx~withConditionalRendering",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/filteroptions/TrackSelect.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 468,
    "kind": "class",
    "name": "TrackSelect",
    "memberof": "imports/ui/genelist/filteroptions/TrackSelect.jsx",
    "static": true,
    "longname": "imports/ui/genelist/filteroptions/TrackSelect.jsx~TrackSelect",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/genelist/filteroptions/TrackSelect.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 469,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/genelist/filteroptions/TrackSelect.jsx~TrackSelect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/genelist/filteroptions/TrackSelect.jsx~TrackSelect#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 470,
    "kind": "member",
    "name": "state",
    "memberof": "imports/ui/genelist/filteroptions/TrackSelect.jsx~TrackSelect",
    "static": false,
    "longname": "imports/ui/genelist/filteroptions/TrackSelect.jsx~TrackSelect#state",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "{\"show\": *}"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "member",
    "name": "open",
    "memberof": "imports/ui/genelist/filteroptions/TrackSelect.jsx~TrackSelect",
    "static": false,
    "longname": "imports/ui/genelist/filteroptions/TrackSelect.jsx~TrackSelect#open",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 472,
    "kind": "member",
    "name": "close",
    "memberof": "imports/ui/genelist/filteroptions/TrackSelect.jsx~TrackSelect",
    "static": false,
    "longname": "imports/ui/genelist/filteroptions/TrackSelect.jsx~TrackSelect#close",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 473,
    "kind": "member",
    "name": "preventClose",
    "memberof": "imports/ui/genelist/filteroptions/TrackSelect.jsx~TrackSelect",
    "static": false,
    "longname": "imports/ui/genelist/filteroptions/TrackSelect.jsx~TrackSelect#preventClose",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/genelist/filteroptions/TrackSelect.jsx~TrackSelect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/genelist/filteroptions/TrackSelect.jsx~TrackSelect#render",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 475,
    "kind": "file",
    "name": "imports/ui/landingpage/Landingpage.jsx",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { withTracker } from 'meteor/react-meteor-data';\n\nimport React from 'react';\n\nimport './landingpage.scss';\n\nexport default class Landingpage extends React.Component {\n  constructor(props){\n    super(props)\n  }\n  render(){\n    return (\n      <div className=\"container\">\n        <div className=\"jumbotron\">\n          <h2 >Welcome to the </h2>\n          <h1 >Parasponia Genebook</h1>\n          <p>\n            This is the central resource for comparative genomics of <i>Parasponia andersonii</i> and <i>Trema orientalis</i>.<br/>\n            It includes all Genebook functionality, and allows downloading of various data.\n          </p>\n          <p>\n            <a href=\"/register\" className=\"btn btn-success\">\n              <i className=\"fa fa-user-plus\" aria-hidden=\"true\"></i> Create an account\n            </a>\n            <a href=\"/login\" className=\"btn btn-primary\">\n              <i className=\"fa fa-sign-in\" aria-hidden=\"true\"></i> Sign in\n            </a>\n            <a href=\"http://genebook.readthedocs.io/\" className=\"btn btn-outline-dark\">\n              <i className=\"fa fa-github\" aria-hidden=\"true\"></i> About Genebook\n            </a>\n          </p>\n        </div>\n\n        <div className=\"card-deck\">\n\n          <div className=\"card bg-light text-center mb-3\">\n            <div className=\"card-body\">\n              <img src=\"/svg/008-menu.svg\" alt=\"\" />\n              <h3 className=\"card-title\">\n                Gene list\n              </h3>\n              <h6 className=\"card-subtitle mb-2 text-muted\">\n                Browse through a list of genes with customizable queries\n              </h6>\n              <a href=\"/genes\" className=\"btn btn-dark btn-sm\">\n                <i className=\"fa fa-list-ul\" aria-hidden=\"true\"></i> Browse\n              </a> \n            </div>\n          </div>\n\n          <div className=\"card bg-light text-center mb-3\">\n            <div className=\"card-body\">\n              <img src=\"/svg/007-loupe.svg\" alt=\"\" />\n            \n              <h3 className=\"card-title\">\n                Advanced search\n              </h3>\n              <h6 className=\"card-subtitle mb-2 text-muted\">\n                Search genomes, genes, experiments, meta-data etc.\n              </h6>\n              <a href=\"#\" className=\"btn btn-dark btn-sm\">\n                <i className=\"fa fa-search\" aria-hidden=\"true\"></i> Search\n              </a> \n            </div>\n          </div>\n\n          <div className=\"card bg-light text-center mb-3\">\n            <div className=\"card-body\">\n              <img src=\"/svg/001-server.svg\" alt=\"\" />\n              <h3 className=\"card-title\">\n                BLAST\n              </h3>\n              <h6 className=\"card-subtitle mb-2 text-muted\">\n                BLAST your protein or DNA sequence to full genomes and annotations \n              </h6>\n              <a href=\"/blast\" className=\"btn btn-dark btn-sm\">\n                <i className=\"fa fa-server\" aria-hidden=\"true\"></i> Blast\n              </a>\n            </div>\n          </div>\n\n        </div>\n      </div>\n    )\n  }\n};\n",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/landingpage/Landingpage.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 476,
    "kind": "class",
    "name": "Landingpage",
    "memberof": "imports/ui/landingpage/Landingpage.jsx",
    "static": true,
    "longname": "imports/ui/landingpage/Landingpage.jsx~Landingpage",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/landingpage/Landingpage.jsx",
    "importStyle": "Landingpage",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 477,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/landingpage/Landingpage.jsx~Landingpage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/landingpage/Landingpage.jsx~Landingpage#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 478,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/landingpage/Landingpage.jsx~Landingpage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/landingpage/Landingpage.jsx~Landingpage#render",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 479,
    "kind": "file",
    "name": "imports/ui/main/Header.jsx",
    "content": "import { withTracker } from 'meteor/react-meteor-data';\nimport { Meteor } from 'meteor/meteor';\nimport { Roles } from 'meteor/alanning:roles';\n\nimport React from 'react';\n\nimport './header.scss';\n\nclass LoggedInNavbar extends React.Component {\n  constructor(props){\n    super(props)\n  }\n\n  signOut = event => {\n    Meteor.logout();\n  }\n\n  render(){\n    return (\n      <div className=\"collapse navbar-collapse justify-content-between\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav mr-auto\">\n          <li className=\"nav-item active\">\n            <a className=\"nav-link\" href=\"/genes\" id=\"genes\">Genes</a>\n          </li>\n          <li className=\"nav-item\">\n            <a className=\"nav-link\" href=\"/blast\" id=\"blast\">Blast</a>\n          </li>\n        </ul>\n        <form className=\"form-inline my-0 my-lg-0 search\" role=\"search\">\n          <div className=\"input-group input-group-sm mb-0\">\n            <input type=\"text\" className=\"form-control\" />\n            <div className=\"input-group-append\">\n              <button type=\"button\" className=\"btn btn-outline-success\">Search</button>\n              <button type=\"button\" className=\"btn btn-outline-success dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                <span className=\"sr-only\">Toggle Dropdown</span>\n              </button>\n              <div className=\"dropdown-menu\">\n                <a className=\"dropdown-item\" href=\"#\">Action</a>\n                <a className=\"dropdown-item\" href=\"#\">Another action</a>\n                <a className=\"dropdown-item\" href=\"#\">Something else here</a>\n                <div role=\"separator\" className=\"dropdown-divider\"></div>\n                <a className=\"dropdown-item\" href=\"#\">Separated link</a>\n              </div>\n            </div>\n          </div>\n          {/*\n          <input type=\"text\" name=\"search\" className=\"form-control mr-sm-2\" placeholder=\"Search\" value=\"\" />\n          <button type=\"submit\" className=\"btn btn-outline-success my-2 my-sm-0\">Search</button>\n          \n            <button className=\"btn btn-danger\" id=\"clear-search\">\n              <span className=\"glyphicon glyphicon-remove-circle\"></span>\n            </button>\n          */}\n        </form>\n        <ul className=\"nav navbar-nav navbar-right\">\n          {this.props.isAdmin &&\n            <li>\n              <a className=\"nav-link\" href=\"/admin\"><span className=\"fa fa-cog\" aria-hidden=\"true\"></span> Admin settings</a>\n            </li>\n          }\n          <li className=\"mb-0 my-1\">\n            <div className=\"btn-group dropdown\">\n              <button type=\"button\" className=\"btn btn-sm btn-secondary btn-outline-dark dropdown-toggle \" \n                data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                <span className=\"fa fa-user-o\" aria-hidden=\"true\"></span> username {/*{ currentUser.username }*/}\n              </button>\n              <div className=\"dropdown-menu dropdown-menu-right\">\n                <a role=\"menuitem\" href=\"/profile\" className=\"dropdown-item featuremenu-item\">Edit profile</a>\n                <a role=\"menuitem\" className=\"dropdown-item featuremenu-item\">My favourites</a>\n                <div className=\"dropdown-divider\" />\n                <button type=\"button\" className=\"btn btn-outline-danger btn-sm btn-block\" id=\"signout\" onClick={this.signOut}>\n                  Sign out\n                </button>\n              </div>\n            </div>\n          </li>\n        </ul>\n      </div>\n    )\n  }\n}\n\nconst LoggedOutNavbar = props => {\n  return (\n    <div className=\"collapse navbar-collapse d-flex justify-content-between\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav mr-auto\">\n        <a href=\"/login\" className=\"btn btn-primary btn-large navbar-btn pull-right\" id=\"signin\">\n          <i className=\"fa fa-sign-in\" aria-hidden=\"true\"></i> Sign in\n        </a>\n      </ul>\n    </div>\n  )\n}\n\nclass Header extends React.Component {\n  constructor(props){\n    super(props)\n  }\n  render(){\n    return (\n      <header className=\"navigation\" role=\"banner\">\n        <nav className=\"navbar navbar-expand bg-light navbar-light justify-content-between\">\n          <button className=\"navbar-toggler navbar-toggler-right\" \n            type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" \n            aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <a className=\"navbar-brand\" href=\"/\">{/*{prefix}*/} Genebook</a>\n          {  \n            this.props.loggedIn ?\n            <LoggedInNavbar isAdmin={this.props.isAdmin}/> :\n            <LoggedOutNavbar />\n          }\n        </nav>\n      </header>\n    )\n  }\n}\n\nexport default withTracker(props => {\n  const userId = Meteor.userId();\n  const isAdmin = Roles.userIsInRole(userId, 'admin');\n  return {\n    loading: false,\n    loggedIn: !!userId,\n    isAdmin: isAdmin\n  }\n})(Header)",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/main/Header.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 480,
    "kind": "class",
    "name": "LoggedInNavbar",
    "memberof": "imports/ui/main/Header.jsx",
    "static": true,
    "longname": "imports/ui/main/Header.jsx~LoggedInNavbar",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/main/Header.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 481,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/main/Header.jsx~LoggedInNavbar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/main/Header.jsx~LoggedInNavbar#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 482,
    "kind": "member",
    "name": "signOut",
    "memberof": "imports/ui/main/Header.jsx~LoggedInNavbar",
    "static": false,
    "longname": "imports/ui/main/Header.jsx~LoggedInNavbar#signOut",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 483,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/main/Header.jsx~LoggedInNavbar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/main/Header.jsx~LoggedInNavbar#render",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 484,
    "kind": "function",
    "name": "LoggedOutNavbar",
    "memberof": "imports/ui/main/Header.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/main/Header.jsx~LoggedOutNavbar",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/main/Header.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 485,
    "kind": "class",
    "name": "Header",
    "memberof": "imports/ui/main/Header.jsx",
    "static": true,
    "longname": "imports/ui/main/Header.jsx~Header",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/main/Header.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 486,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/main/Header.jsx~Header",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/main/Header.jsx~Header#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true
  },
  {
    "__docId__": 487,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/main/Header.jsx~Header",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/main/Header.jsx~Header#render",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 488,
    "kind": "file",
    "name": "imports/ui/main/InactiveAccountWarning.jsx",
    "content": "import React from 'react';\n\nimport './inactiveAccountWarning.scss';\n\nconst InactiveAccountWarning = props => {\n  return (\n    <div className='container alert alert-danger text-center inactive-account-warning' role='alert'>\n      <h4 className='alert-heading'>\n        <i className=\"fa fa-exclamation-triangle\"/>\n        &nbsp; Inactive account &nbsp;\n        <i className=\"fa fa-exclamation-triangle\"/>\n      </h4>\n      <p>\n        Your account is currently not activated <br/>\n        This means you can not use all features\n      </p>\n      <hr/>\n      <p className=\"mb-0\">\n        <strong>Please have your account activated by an admin user</strong>\n      </p>\n    </div>\n  )\n}\n\nexport default InactiveAccountWarning;",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/main/InactiveAccountWarning.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 489,
    "kind": "function",
    "name": "InactiveAccountWarning",
    "memberof": "imports/ui/main/InactiveAccountWarning.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/main/InactiveAccountWarning.jsx~InactiveAccountWarning",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/main/InactiveAccountWarning.jsx",
    "importStyle": "InactiveAccountWarning",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 490,
    "kind": "file",
    "name": "imports/ui/main/Login.jsx",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { withTracker } from 'meteor/react-meteor-data';\nimport { FlowRouter } from 'meteor/kadira:flow-router';\n\nimport React from 'react';\n\nclass Login extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      username: '',\n      password: ''\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    Meteor.loginWithPassword(this.state.username, this.state.password, (err,res) => {\n      this.setState({\n        password: ''\n      })\n      if (err) {\n        alert(err.reason)\n      } else {\n        FlowRouter.redirect(this.props.redirect)\n      }\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.id]: event.target.value\n    })\n  }\n\n  render(){\n    return (\n      <div>\n        <div className=\"row justify-content-center\">\n          <div className=\"col-3\">\n            <h1 className=\"text-center login-title\">Sign in to continue</h1>\n            <div className=\"login\">\n              <form className=\"form-signin\" onSubmit={this.handleSubmit}>\n                <input \n                  type=\"text\" \n                  className=\"form-control\" \n                  placeholder=\"Username\" \n                  id=\"username\"\n                  onChange = {this.handleChange}\n                  value = {this.state.username} \n                  required autoFocus />\n                <input \n                  type=\"password\" \n                  className=\"form-control\" \n                  placeholder=\"Password\" \n                  id=\"password\"\n                  onChange = {this.handleChange} \n                  value = {this.state.password}\n                  required />\n                <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\">\n                  Sign in\n                </button>\n              </form>\n            </div>\n            <a href=\"/register\" className=\"text-center new-account\" id=\"new-account\">Create new account</a>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withTracker(props => {\n  return {\n    redirect: '/'\n  }\n})(Login);",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/main/Login.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 491,
    "kind": "class",
    "name": "Login",
    "memberof": "imports/ui/main/Login.jsx",
    "static": true,
    "longname": "imports/ui/main/Login.jsx~Login",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/main/Login.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 492,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/main/Login.jsx~Login",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/main/Login.jsx~Login#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 493,
    "kind": "member",
    "name": "state",
    "memberof": "imports/ui/main/Login.jsx~Login",
    "static": false,
    "longname": "imports/ui/main/Login.jsx~Login#state",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"username\": *, \"password\": *}"
      ]
    }
  },
  {
    "__docId__": 494,
    "kind": "member",
    "name": "handleSubmit",
    "memberof": "imports/ui/main/Login.jsx~Login",
    "static": false,
    "longname": "imports/ui/main/Login.jsx~Login#handleSubmit",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 495,
    "kind": "member",
    "name": "handleChange",
    "memberof": "imports/ui/main/Login.jsx~Login",
    "static": false,
    "longname": "imports/ui/main/Login.jsx~Login#handleChange",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 496,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/main/Login.jsx~Login",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/main/Login.jsx~Login#render",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 497,
    "kind": "file",
    "name": "imports/ui/main/MainLayout.jsx",
    "content": "import { withTracker } from 'meteor/react-meteor-data';\nimport { Meteor } from 'meteor/meteor';\nimport { Roles } from 'meteor/alanning:roles';\n\nimport React from 'react';\n\nimport InactiveAccountWarning from './InactiveAccountWarning.jsx';\nimport Header from './Header.jsx';\n\nclass MainLayout extends React.Component {\n  constructor(props){\n    super(props)\n  }\n  render(){\n\n    return (\n      <div>\n        <Header />\n        <main>\n          <div className=\"container-fluid\">\n          { \n            this.props.content\n          }\n          </div>\n        </main>\n      </div>\n    )\n  }\n}\n\nexport default MainLayout;",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/main/MainLayout.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 498,
    "kind": "class",
    "name": "MainLayout",
    "memberof": "imports/ui/main/MainLayout.jsx",
    "static": true,
    "longname": "imports/ui/main/MainLayout.jsx~MainLayout",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/main/MainLayout.jsx",
    "importStyle": "MainLayout",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 499,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/main/MainLayout.jsx~MainLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/main/MainLayout.jsx~MainLayout#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/main/MainLayout.jsx~MainLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/main/MainLayout.jsx~MainLayout#render",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 501,
    "kind": "file",
    "name": "imports/ui/main/NotFound.jsx",
    "content": "import React from 'react';\n\nimport './notFound.scss';\n\nconst NotFound = props => {\n  return (\n    <div className=\"container\">\n      <div className=\"card border-info mb-3 not-found text-center\">\n        <div className=\"card-header\">\n          <h2 className=\"text-info\">404 PAGE NOT FOUND</h2>\n        </div>\n        <div className=\"card-body text-info\">\n          <h6 className=\"card-title\">\n            The page you are looking for can not be found\n          </h6>\n          <p className=\"card-text\">\n            Please try something else, or contact an admin user\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default NotFound",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/main/NotFound.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 502,
    "kind": "function",
    "name": "NotFound",
    "memberof": "imports/ui/main/NotFound.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/main/NotFound.jsx~NotFound",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/main/NotFound.jsx",
    "importStyle": "NotFound",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 503,
    "kind": "file",
    "name": "imports/ui/main/Register.jsx",
    "content": "import { Accounts } from 'meteor/accounts-base';\nimport { withTracker } from 'meteor/react-meteor-data';\nimport { FlowRouter } from 'meteor/kadira:flow-router';\n\nimport React from 'react';\n\nconst UsernameInput = (props) => {\n  return (\n    <div className={`input-group ${ !props.validUsername && 'has-danger'}`}>\n      <span className=\"input-group-addon\">\n        <i className=\"fa fa-user\"></i>\n      </span>\n      <input \n        type=\"text\" \n        className=\"form-control\" \n        placeholder=\"Username\" \n        id=\"username\"  \n        pattern=\"^[a-zA-Z0-9]+$\" \n        title=\"Only letters and numbers\"\n        onChange = {props.handleChange}\n        value = {props.userName}\n        required autoFocus />\n    </div>\n  )\n}\n\nconst EmailInput = (props) => {\n  return (\n    <div className={`input-group ${ !props.validEmail && 'has-danger'}`}>\n      <span className=\"input-group-addon\">\n        <i className=\"fa fa-envelope\"></i>\n      </span>\n      <input \n        type=\"email\" \n        className=\"form-control\" \n        placeholder=\"Email\" \n        id=\"email\" \n        onChange = {props.handleChange}\n        value = {props.email}\n        required />\n    </div>\n  )\n}\n\nconst PassWordInput = (props) => {\n  return (\n    <div>\n      <div className={`input-group password ${ !props.validPassword && 'has-danger'}`}>\n        <span className=\"input-group-addon\">\n          <i className=\"fa fa-lock\"></i>\n        </span>\n        <input \n          type=\"password\" \n          className=\"form-control\" \n          placeholder=\"Password\" \n          id=\"password\" \n          pattern=\".{8,}\" \n          title=\"Minimum 8 charachters\"\n          onChange = {props.handleChange}\n          value = {props.password}\n          required />\n      </div>\n      <div className={`input-group password-repeat ${ !props.validPassword && 'has-danger'}`}>\n        <span className=\"input-group-addon\">\n          <i className=\"fa fa-lock\"></i>\n        </span>\n        <input \n          type=\"password\" \n          className=\"form-control\" \n          placeholder=\"Repeat password\" \n          id=\"passwordRepeat\"\n          onChange = {props.handleChange}\n          value = {props.passwordRepeat} \n          required />\n      </div>\n    </div>\n  )\n}\n\nclass Register extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      username: '',\n      validUsername: true,\n      email: '',\n      validEmail: true,\n      password: '',\n      passwordRepeat: '',\n      validPassword: true\n    }\n  }\n\n  submit = (event) => {\n    event.preventDefault()\n    console.log('submit')\n    console.log(this.state)\n    if (this.state.password !== this.state.passwordRepeat){\n      alert('Passwords do not match!')\n      this.setState({\n        password: '',\n        passwordRepeat: '',\n        validPassword: false\n      })\n    } else {\n      const userData = {\n        username:  this.state.username,\n        email: this.state.email,\n        password: this.state.password\n      }\n      Accounts.createUser(userData, (err,res) => {\n        if (err){\n          this.setState({\n            password: '',\n            passwordRepeat: ''\n          })\n          alert(err.reason)\n          if (err.reason === 'Username already exists.'){\n            this.setState({\n              validUsername: false\n            })\n          } else if (err.reason === 'Email already exists.'){\n            this.setState({\n              validEmail: false\n            })\n          }\n        } else {\n          FlowRouter.redirect('/')\n        }\n      })\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.id] : event.target.value\n    })\n    switch (event.target.id){\n      case 'username': {\n        this.setState({\n          validUsername: true\n        })\n        break;\n      }\n      case 'email': {\n        this.setState({\n          validEmail: true\n        })\n        break;\n      }\n      case 'password':\n      case 'password-repeat': {\n        this.setState({\n          validPassword: true\n        })\n        break\n      }\n    }\n  }\n\n  filledInAllFields = () => {\n    return (\n      this.state.username.length > 0 &&\n      this.state.email.length > 0 &&\n      this.state.password.length > 0 &&\n      this.state.passwordRepeat.length > 0\n    )\n  }\n\n  render(){\n    return (\n      <div className=\"row justify-content-center\">\n        <div className=\"col-3\">\n        <h1 className=\"text-center login-title\">Create new Genebook account</h1>\n          <div className=\"register\">\n            <form className=\"form-register\" onSubmit={this.submit} >\n              <UsernameInput \n                userName = {this.state.username} \n                validUsername = {this.state.validUsername}\n                handleChange = {this.handleChange} />\n              <EmailInput \n                email = {this.state.email} \n                validEmail = {this.state.validEmail}\n                handleChange = {this.handleChange} />\n              <PassWordInput \n                password = {this.state.password} \n                passwordRepeat = {this.state.passwordRepeat} \n                validPassword = {this.state.validPassword}\n                handleChange = {this.handleChange} />\n              <button \n                className={`btn btn-lg btn-block ${ this.filledInAllFields() ? 'btn-success' : 'btn-outline-success' }`} \n                type=\"submit\"\n                disabled = { !this.filledInAllFields() }>\n                {\n                  this.filledInAllFields() ? 'Sign up' : 'Please fill in all fields'\n                }\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withTracker(props => {\n  return {}\n})(Register);",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/main/Register.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 504,
    "kind": "function",
    "name": "UsernameInput",
    "memberof": "imports/ui/main/Register.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/main/Register.jsx~UsernameInput",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/main/Register.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 505,
    "kind": "function",
    "name": "EmailInput",
    "memberof": "imports/ui/main/Register.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/main/Register.jsx~EmailInput",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/main/Register.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 506,
    "kind": "function",
    "name": "PassWordInput",
    "memberof": "imports/ui/main/Register.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/main/Register.jsx~PassWordInput",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/main/Register.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 507,
    "kind": "class",
    "name": "Register",
    "memberof": "imports/ui/main/Register.jsx",
    "static": true,
    "longname": "imports/ui/main/Register.jsx~Register",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/main/Register.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 508,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/main/Register.jsx~Register",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/main/Register.jsx~Register#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true
  },
  {
    "__docId__": 509,
    "kind": "member",
    "name": "state",
    "memberof": "imports/ui/main/Register.jsx~Register",
    "static": false,
    "longname": "imports/ui/main/Register.jsx~Register#state",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "{\"username\": *, \"validUsername\": boolean, \"email\": *, \"validEmail\": boolean, \"password\": *, \"passwordRepeat\": *, \"validPassword\": boolean}"
      ]
    }
  },
  {
    "__docId__": 510,
    "kind": "member",
    "name": "submit",
    "memberof": "imports/ui/main/Register.jsx~Register",
    "static": false,
    "longname": "imports/ui/main/Register.jsx~Register#submit",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 511,
    "kind": "member",
    "name": "handleChange",
    "memberof": "imports/ui/main/Register.jsx~Register",
    "static": false,
    "longname": "imports/ui/main/Register.jsx~Register#handleChange",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 512,
    "kind": "member",
    "name": "filledInAllFields",
    "memberof": "imports/ui/main/Register.jsx~Register",
    "static": false,
    "longname": "imports/ui/main/Register.jsx~Register#filledInAllFields",
    "access": "public",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 513,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/main/Register.jsx~Register",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/main/Register.jsx~Register#render",
    "access": "public",
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 514,
    "kind": "file",
    "name": "imports/ui/user-profile/UserProfile.jsx",
    "content": "import { Meteor } from 'meteor/meteor';\nimport { withTracker } from 'meteor/react-meteor-data';\nimport { FlowRouter } from 'meteor/kadira:flow-router';\nimport { Roles } from 'meteor/alanning:roles';\n\nimport { updateUserInfo } from '/imports/api/users/users.js';\n\nimport React from 'react';\nimport { Creatable as Select } from 'react-select';\nimport '/node_modules/react-select/dist/react-select.css';\nimport update from 'immutability-helper';\nimport pick from 'lodash/pick';\nimport { isEqual }from 'lodash';\nimport { diff } from 'rus-diff';\n\nimport './user-profile.scss';\n\n\nconst UserProfileButtons = (props) => {\n  const buttons = isEqual(props.oldState, props.newState) ?\n  (\n    <div className=\"user-profile-buttons\">\n      <button type=\"button\" className=\"btn btn-warning\" onClick={props.resetPassword}>\n        Reset password\n      </button>\n      <button type=\"button\" className=\"btn btn-danger\" onClick={props.deleteAccount}>\n        Delete account\n      </button>\n    </div>\n  ) :\n  (\n    <div className='user-profile-buttons'>\n      <button type=\"button\" className=\"btn btn-success\" onClick={props.saveChanges}>\n        Save changes\n      </button>\n      <button type=\"button\" className=\"btn btn-danger\" onClick={props.cancelChanges}>\n        Cancel\n      </button>\n    </div>\n  )\n  return buttons\n}\n\nconst UserRoles = (props) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor=\"groups\" className=\"control-label\">User roles</label>\n      <Select\n        name='user-role-select'\n        value={props.userRoles}\n        options={props.allRoles.map(role => { return {value: role, label: role} })}\n        onChange={props.onChange}\n        multi={true}\n        disabled={!props.isAdmin}\n      />\n    </div>\n  )\n}\n\nclass UserProfile extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log('constructing user profile component')\n    this.state = this.props.user\n  }\n\n  componentWillReceiveProps(nextProps){\n    this.setState(nextProps.user)\n  }\n\n  resetPassword = (event) => {\n    event.preventDefault();\n    alert('This currently does nothing')\n    console.log('resetPassword');\n  }\n\n  deleteAccount = (event) => {\n    event.preventDefault();\n    alert('This currently does nothing')\n    console.log('deleteAccount')\n  }\n\n  saveChanges = (event) => {\n    event.preventDefault();\n    const updateQuery = diff(this.props.user,this.state);\n    console.log(updateQuery);\n    console.log(this.props)\n    updateUserInfo.call({\n      userId: this.props.user._id,\n      update: updateQuery\n    })\n  }\n\n  cancelChanges = (event) => {\n    event.preventDefault();\n    this.setState(this.props.user);\n  }\n  \n  handleChange = (event) => {\n    const key = event.target.id;\n    const value = event.target.value;\n    const name = event.target.name;\n\n    switch (key){\n      case 'username':\n        this.setState({username: value})\n        break\n      case 'email':\n        const index = parseInt(name[name.length - 1]);\n        const emails = this.state.emails.slice(); //empty slice to copy email array and not modify state\n        emails[index] = value;\n        this.setState({emails: emails})\n        break\n      case 'firstname':\n        this.setState({\n          profile: update(this.state.profile, {\n            first_name: {\n              $set: value\n            }\n          })\n        })\n        break\n      case 'lastname':\n        this.setState({\n          profile: update(this.state.profile, {\n            last_name: {\n              $set: value\n            }\n          })\n        })\n        break\n    }\n  }\n\n  updateRoles = newRoles => {\n    const newState = update(this.state, {\n      roles: {\n        $set: newRoles.map( role => role.value)\n      }\n    })\n    this.setState(newState)\n  }\n\n  render(){\n    return (\n      this.props.loading ?\n      <div className='user-profile'>LOADING</div> :\n\n      <div className=\"user-profile container\">\n        <form className=\"user-profile card\">\n          <div className=\"card-header\">\n            <h3>User profile</h3>\n          </div>\n          <div className=\"card-body\">\n            <div className=\"form-group\">\n              <label htmlFor=\"username\" className=\"control-label\">Username</label>\n              <input \n                type=\"text\" \n                className=\"form-control form-control-sm\" \n                id=\"username\"\n                onChange={this.handleChange} \n                value={this.state.username} />\n                <small id=\"emailHelp\" className=\"form-text text-muted\">\n                  Your username will be visible to other users and must be unique. <b>required</b>\n                </small>\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"firstname\" className=\"control-label\">First name</label>\n              <input \n                type=\"text\" \n                className=\"form-control form-control-sm\" \n                id=\"firstname\" \n                onChange={this.handleChange}\n                value={this.state.profile.first_name}\n                placeholder=\"First name\" />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"lastname\" className=\"control-label\">Last name</label>\n              <input \n                type=\"text\" \n                className=\"form-control form-control-sm\" \n                id=\"lastname\" \n                onChange={this.handleChange}\n                value={this.state.profile.last_name}\n                placeholder=\"Last name\" />\n            </div>\n            {\n              this.state.emails.map( (email, i) => {\n                //start counting at 1\n                let index = i + 1;\n                return (\n                  <div className=\"form-group\" key={`email${index}`}>\n                    <label htmlFor={`email${index}`} className=\"control-label\">{`Email address ${index}`}</label>\n                    <input \n                      type=\"email\" \n                      className=\"form-control form-control-sm\" \n                      id={`email${index}`} \n                      onChange={this.handleChange}\n                      value={email.address} />\n                  </div>\n                )\n              })\n            }\n            <UserRoles \n              userRoles = {this.state.roles}\n              allRoles = {this.props.allRoles}\n              isAdmin = {Roles.userIsInRole(Meteor.userId()),'admin'} \n              onChange = {this.updateRoles} />\n          </div>\n          <div className=\"card-footer\">\n            <UserProfileButtons \n              oldState = {this.props.user}\n              newState = {this.state}\n              cancelChanges = {this.cancelChanges}\n              saveChanges = {this.saveChanges}\n              resetPassword = {this.resetPassword}\n              deleteAccount = {this.deleteAccount}/>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default withTracker(props => {\n  const subscription = Meteor.subscribe('users');\n  const userId = FlowRouter.getParam('_id');\n  const userProfile = userId ? Meteor.users.findOne({_id: userId}) : Meteor.user();\n  const allRoles = Meteor.users.find({}).fetch().reduce((roles, user) => {\n    return roles.concat(user.roles)\n  },[])\n  const uniqueRoles = [...new Set(allRoles)]\n   return {\n    user: pick(userProfile, ['_id','username', 'emails', 'profile', 'roles']),\n    loading: !subscription.ready(),\n    allRoles: uniqueRoles\n   }\n})(UserProfile);",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/user-profile/UserProfile.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 515,
    "kind": "function",
    "name": "UserProfileButtons",
    "memberof": "imports/ui/user-profile/UserProfile.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/user-profile/UserProfile.jsx~UserProfileButtons",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/user-profile/UserProfile.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 516,
    "kind": "function",
    "name": "UserRoles",
    "memberof": "imports/ui/user-profile/UserProfile.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/user-profile/UserProfile.jsx~UserRoles",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/user-profile/UserProfile.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 517,
    "kind": "class",
    "name": "UserProfile",
    "memberof": "imports/ui/user-profile/UserProfile.jsx",
    "static": true,
    "longname": "imports/ui/user-profile/UserProfile.jsx~UserProfile",
    "access": "public",
    "export": false,
    "importPath": "genebook/imports/ui/user-profile/UserProfile.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 518,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/user-profile/UserProfile.jsx~UserProfile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/user-profile/UserProfile.jsx~UserProfile#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true
  },
  {
    "__docId__": 519,
    "kind": "member",
    "name": "state",
    "memberof": "imports/ui/user-profile/UserProfile.jsx~UserProfile",
    "static": false,
    "longname": "imports/ui/user-profile/UserProfile.jsx~UserProfile#state",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 520,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "imports/ui/user-profile/UserProfile.jsx~UserProfile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/user-profile/UserProfile.jsx~UserProfile#componentWillReceiveProps",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 521,
    "kind": "member",
    "name": "resetPassword",
    "memberof": "imports/ui/user-profile/UserProfile.jsx~UserProfile",
    "static": false,
    "longname": "imports/ui/user-profile/UserProfile.jsx~UserProfile#resetPassword",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 522,
    "kind": "member",
    "name": "deleteAccount",
    "memberof": "imports/ui/user-profile/UserProfile.jsx~UserProfile",
    "static": false,
    "longname": "imports/ui/user-profile/UserProfile.jsx~UserProfile#deleteAccount",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 523,
    "kind": "member",
    "name": "saveChanges",
    "memberof": "imports/ui/user-profile/UserProfile.jsx~UserProfile",
    "static": false,
    "longname": "imports/ui/user-profile/UserProfile.jsx~UserProfile#saveChanges",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 524,
    "kind": "member",
    "name": "cancelChanges",
    "memberof": "imports/ui/user-profile/UserProfile.jsx~UserProfile",
    "static": false,
    "longname": "imports/ui/user-profile/UserProfile.jsx~UserProfile#cancelChanges",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 525,
    "kind": "member",
    "name": "handleChange",
    "memberof": "imports/ui/user-profile/UserProfile.jsx~UserProfile",
    "static": false,
    "longname": "imports/ui/user-profile/UserProfile.jsx~UserProfile#handleChange",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 526,
    "kind": "member",
    "name": "updateRoles",
    "memberof": "imports/ui/user-profile/UserProfile.jsx~UserProfile",
    "static": false,
    "longname": "imports/ui/user-profile/UserProfile.jsx~UserProfile#updateRoles",
    "access": "public",
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 527,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/user-profile/UserProfile.jsx~UserProfile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/user-profile/UserProfile.jsx~UserProfile#render",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 528,
    "kind": "file",
    "name": "imports/ui/util/uiUtil.jsx",
    "content": "import React from 'react';\n\n/**\n * Higher order component for conditional rendering, to be used with compose\n * https://www.robinwieruch.de/gentle-introduction-higher-order-components/\n * @param  {Function}   conditionalRenderingFn Function returning a boolean for condional rendering\n * @param  {Function} EitherComponent       Component to render if conditionalRenderingFn evaluates to true\n * @return {Function}                          \n */\nexport const withEither = (conditionalRenderingFn, EitherComponent) => (Component) => (props) =>\n  conditionalRenderingFn(props)\n    ? <EitherComponent />\n    : <Component { ...props } />\n\n\n/**\n * Helper function to see if reactive dataTracker is still loading\n * @param  {Boolean} options.loading \n * @return {Boolean}                 \n */\nexport const isLoading = ({ loading }) => {\n  return loading\n}\n\n/**\n * Simple React Loading component\n * @return {Function} React Loading component\n */\nexport const Loading = () => {\n  return (\n    <div>\n      Loading ...\n    </div>\n  )\n}\n\nexport const DropdownButton = ({children, ...props}) => {\n  return (\n    <button key='dropdownButton' {...props}>\n      { children }\n    </button>\n  )\n}\n\nexport const DropdownMenu = ({children, show, ...props}) => {\n  return (\n    <div key='dropdownMenu' className={`dropdown-menu ${show}`} {...props}>\n      { children }\n    </div>\n  )\n}\n\nexport class Dropdown extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      show: ''\n    }\n  }\n\n  open = () => {\n    this.setState({\n      show: 'show'\n    })\n    document.addEventListener('click', this.close);\n  }\n\n  close = () => {\n    this.setState({\n      show: ''\n    })\n    document.removeEventListener('click', this.close);\n  }\n\n  preventClose = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    event.nativeEvent.stopImmediatePropagation();\n  }\n\n  renderChildren = () => {\n    return React.Children.map(this.props.children, child => {\n      const onClick = child.props.type === 'button' ? this.open : this.preventClose;\n      return React.cloneElement(child, {\n        onClick: onClick,\n        show: this.state.show\n      })\n    })\n  }\n\n  render(){\n    return (\n      <div className='dropdown btn-group'>\n        {\n          this.renderChildren()\n        }\n      </div>\n    )\n  }\n}",
    "static": true,
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/imports/ui/util/uiUtil.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 529,
    "kind": "function",
    "name": "withEither",
    "memberof": "imports/ui/util/uiUtil.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/util/uiUtil.jsx~withEither",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/util/uiUtil.jsx",
    "importStyle": "{withEither}",
    "description": "Higher order component for conditional rendering, to be used with compose\nhttps://www.robinwieruch.de/gentle-introduction-higher-order-components/",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "conditionalRenderingFn",
        "description": "Function returning a boolean for condional rendering"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "EitherComponent",
        "description": "Component to render if conditionalRenderingFn evaluates to true"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 530,
    "kind": "function",
    "name": "isLoading",
    "memberof": "imports/ui/util/uiUtil.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/util/uiUtil.jsx~isLoading",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/util/uiUtil.jsx",
    "importStyle": "{isLoading}",
    "description": "Helper function to see if reactive dataTracker is still loading",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.loading",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 531,
    "kind": "function",
    "name": "Loading",
    "memberof": "imports/ui/util/uiUtil.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/util/uiUtil.jsx~Loading",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/util/uiUtil.jsx",
    "importStyle": "{Loading}",
    "description": "Simple React Loading component",
    "lineNumber": 29,
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "React Loading component"
    },
    "params": []
  },
  {
    "__docId__": 532,
    "kind": "function",
    "name": "DropdownButton",
    "memberof": "imports/ui/util/uiUtil.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/util/uiUtil.jsx~DropdownButton",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/util/uiUtil.jsx",
    "importStyle": "{DropdownButton}",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"children\": *, ...props: Object}"
        ],
        "defaultRaw": {
          "children": null,
          "props": {}
        },
        "defaultValue": "{\"children\":null,\"props\":{}}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 533,
    "kind": "function",
    "name": "DropdownMenu",
    "memberof": "imports/ui/util/uiUtil.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "imports/ui/util/uiUtil.jsx~DropdownMenu",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/util/uiUtil.jsx",
    "importStyle": "{DropdownMenu}",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"children\": *, \"show\": *, ...props: Object}"
        ],
        "defaultRaw": {
          "children": null,
          "show": null,
          "props": {}
        },
        "defaultValue": "{\"children\":null,\"show\":null,\"props\":{}}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 534,
    "kind": "class",
    "name": "Dropdown",
    "memberof": "imports/ui/util/uiUtil.jsx",
    "static": true,
    "longname": "imports/ui/util/uiUtil.jsx~Dropdown",
    "access": "public",
    "export": true,
    "importPath": "genebook/imports/ui/util/uiUtil.jsx",
    "importStyle": "{Dropdown}",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 535,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "imports/ui/util/uiUtil.jsx~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/util/uiUtil.jsx~Dropdown#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true
  },
  {
    "__docId__": 536,
    "kind": "member",
    "name": "state",
    "memberof": "imports/ui/util/uiUtil.jsx~Dropdown",
    "static": false,
    "longname": "imports/ui/util/uiUtil.jsx~Dropdown#state",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "{\"show\": *}"
      ]
    }
  },
  {
    "__docId__": 537,
    "kind": "member",
    "name": "open",
    "memberof": "imports/ui/util/uiUtil.jsx~Dropdown",
    "static": false,
    "longname": "imports/ui/util/uiUtil.jsx~Dropdown#open",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 538,
    "kind": "member",
    "name": "close",
    "memberof": "imports/ui/util/uiUtil.jsx~Dropdown",
    "static": false,
    "longname": "imports/ui/util/uiUtil.jsx~Dropdown#close",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 539,
    "kind": "member",
    "name": "preventClose",
    "memberof": "imports/ui/util/uiUtil.jsx~Dropdown",
    "static": false,
    "longname": "imports/ui/util/uiUtil.jsx~Dropdown#preventClose",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 540,
    "kind": "member",
    "name": "renderChildren",
    "memberof": "imports/ui/util/uiUtil.jsx~Dropdown",
    "static": false,
    "longname": "imports/ui/util/uiUtil.jsx~Dropdown#renderChildren",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 541,
    "kind": "method",
    "name": "render",
    "memberof": "imports/ui/util/uiUtil.jsx~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "imports/ui/util/uiUtil.jsx~Dropdown#render",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# Genebook\n## A collaborative notebook for genes and genomes\n----\nFull documentation is at http://genebook.readthedocs.io/\n----\n### Requirements:\n\n* node.js >= 8.9.4 (on mac: ```brew install node```, on linux: ```apt-get install nodejs```)\n* mongodb >= 3.4 (on mac: ```brew install mongodb```, on linux: ```apt-get install mongodb```)\n* meteor (```curl https://install.meteor.com/ | sh```) \n\n\nTo run a small example in development mode:\n\nInstall dependencies and fire up meteor in development mode\n\n```\nmeteor npm install --save\nmeteor\n```\n\nLoad test data\n\n```\nnode scripts/add_test_data.sh\n```\n\nNavigate to http://localhost:3000\n\nBrowse genomes, genomic annotations and expression levels. Update functionality, version history.\n\n",
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"genebook\",\n  \"version\": \"0.1.0-alpha\",\n  \"repository\": \"https://github.com/holmrenser/genebook\",\n  \"description\": \"A portable website for browsing and querying genome sequences and annotations\",\n  \"license\": \"AGPL-3.0\",\n  \"scripts\": {\n    \"docs\": \"esdoc .esdoc.json\"\n  },\n  \"devDependencies\": {\n    \"@babel/runtime\": \"^7.0.0-beta.42\",\n    \"asteroid\": \"^2.0.3\",\n    \"bcrypt\": \"^0.8.7\",\n    \"bootstrap\": \"^4.0.0\",\n    \"buffer-shims\": \"^1.0.0\",\n    \"bufferutil\": \"^1.3.0\",\n    \"child-process\": \"^1.0.2\",\n    \"child-process-promise\": \"^2.2.1\",\n    \"classnames\": \"^2.2.5\",\n    \"core-util-is\": \"^1.0.2\",\n    \"d3\": \"^4.13.0\",\n    \"d3-hierarchy\": \"^1.1.5\",\n    \"d3-scale\": \"^1.0.7\",\n    \"d3-scale-chromatic\": \"^1.2.0\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-accessor-plugin\": \"^1.0.0\",\n    \"esdoc-brand-plugin\": \"^1.0.0\",\n    \"esdoc-coverage-plugin\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-external-ecmascript-plugin\": \"^1.0.0\",\n    \"esdoc-integrate-manual-plugin\": \"^1.0.0\",\n    \"esdoc-integrate-test-plugin\": \"^1.0.0\",\n    \"esdoc-jsx-plugin\": \"^1.0.0\",\n    \"esdoc-lint-plugin\": \"^1.0.1\",\n    \"esdoc-publish-html-plugin\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"esdoc-type-inference-plugin\": \"^1.0.1\",\n    \"esdoc-undocumented-identifier-plugin\": \"^1.0.0\",\n    \"esdoc-unexported-identifier-plugin\": \"^1.0.0\",\n    \"fibers\": \"^1.0.15\",\n    \"file-saver\": \"^1.3.3\",\n    \"file-type\": \"^4.4.0\",\n    \"font-awesome\": \"^4.7.0\",\n    \"fs.extra\": \"^1.3.2\",\n    \"glob\": \"^7.1.2\",\n    \"html-entities\": \"^1.2.1\",\n    \"immutability-helper\": \"^2.6.6\",\n    \"install\": \"^0.10.4\",\n    \"jquery\": \"^3.3.1\",\n    \"lodash\": \"^4.17.5\",\n    \"meteor-babel-helpers\": \"0.0.3\",\n    \"meteor-node-stubs\": \"^0.2.11\",\n    \"npm\": \"^5.7.1\",\n    \"object-hash\": \"^1.3.0\",\n    \"papaparse\": \"^4.3.7\",\n    \"react\": \"^16.2.0\",\n    \"react-alert\": \"^2.4.0\",\n    \"react-bootstrap\": \"^0.31.5\",\n    \"react-container-dimensions\": \"^1.3.3\",\n    \"react-dom\": \"^16.2.0\",\n    \"react-mounter\": \"^1.2.0\",\n    \"react-select\": \"^1.2.1\",\n    \"recompose\": \"^0.26.0\",\n    \"request\": \"^2.85.0\",\n    \"rus-diff\": \"^1.1.0\",\n    \"simpl-schema\": \"0.0.3\",\n    \"spawn-promise\": \"^0.1.8\",\n    \"spawn-sync\": \"^1.0.15\",\n    \"thread-sleep\": \"^2.0.0\",\n    \"try-thread-sleep\": \"^1.0.2\",\n    \"utf-8-validate\": \"^2.0.0\",\n    \"ws\": \"^1.1.5\",\n    \"xml2js-es6-promise\": \"^1.1.1\"\n  }\n}\n",
    "longname": "/Users/rensholmer/Documents/Code/genenotebook/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]